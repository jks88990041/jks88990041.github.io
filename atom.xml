<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只柴犬</title>
  
  <subtitle>一只柴犬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-15T14:26:02.792Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凯凯超人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>过滤器(Filter)与监听器(Listener)</title>
    <link href="http://yoursite.com/2021/01/15/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8(Listener)/"/>
    <id>http://yoursite.com/2021/01/15/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8(Listener)/</id>
    <published>2021-01-15T14:25:55.514Z</published>
    <updated>2021-01-15T14:26:02.792Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="过滤器与监听器">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>熟悉掌握过滤器的使用及生命周期</li><li>掌握过滤器的执行顺序和应用场景</li><li>了解监听器的概念及常用监听器</li><li>能够使用监听器完善在线人数统计的小例子</li></ul><h1 id="过滤器概述"><a href="#过滤器概述" class="headerlink" title="过滤器概述"></a>过滤器概述</h1><h2 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h2><blockquote><p>过滤器是JAVAWEB三大组件之一。<strong>用于拦截请求</strong>而不是处理请求，处理请求是Servlet做的。<br>当用户请求某个Servlet时，会先执行部署在这个请求上的Filter，若果Filter“放行”，那么会继续执行用户请求的Servlet；如果Filter不“放行”，那么就就此中断了。<br>话句话说，就是当用户请求某个Servlet时，TomCat会去执行注册在这个请求上的Filter，然后是否“放行”由Filter决定。可以理解为，<strong>Filter来决定是否调用Servlet</strong>。注意，<strong>当执行完成Servlet的代码后，还会继续执行Filter后面的代码</strong>。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114172023528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="构建过滤器步骤"><a href="#构建过滤器步骤" class="headerlink" title="构建过滤器步骤"></a>构建过滤器步骤</h2><p> 1.创建一个类，实现javax.servelt.Filter接口，并实现它的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过滤器被执行了 前"</span>);</span><br><span class="line">        <span class="comment">//表示对请求进行放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"过滤器被执行了 后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在web.xml中进行Filter配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    filter的声明</span></span><br><span class="line"><span class="comment">        指定filter的名称 filter-name</span></span><br><span class="line"><span class="comment">        指定filter的实现类 filter-class--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn_tx_Filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    filter的映射</span></span><br><span class="line"><span class="comment">        指定filter的名称</span></span><br><span class="line"><span class="comment">        要拦截的路径、用法和Servlet的url-pattern是一样的</span></span><br><span class="line"><span class="comment">        servlet-name 表示指向拦截的servlet 不建议这样使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url-pattern和Servlet的url-pattern的匹配规则一模一样</p><ul><li>完全路径匹配 以/开头 例如 /aaa /aaa/bbb</li><li>目录匹配 以/开头 例如 /aaa/* /*</li><li>扩展名匹配 <strong>不能以/开头</strong> 例如 <em>.do *.action ….<br>*</em>优先级： 完全路径匹配 &gt; 目录匹配 &gt; 扩展名匹配**</li></ul><p>当用户访问index.jsp页面时，会执行Filter中的<code>doFilter()</code>方法。而Filter必须要执行放行后，才能显示该页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示对请求进行放行</span></span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br></pre></td></tr></table></figure><h1 id="过滤器详解"><a href="#过滤器详解" class="headerlink" title="过滤器详解"></a>过滤器详解</h1><h2 id="过滤器的生命周期"><a href="#过滤器的生命周期" class="headerlink" title="过滤器的生命周期"></a>过滤器的生命周期</h2><ul><li><strong><code>init(FilterConfig)</code></strong>：从服务器启动时会<strong>创建Filter实例</strong>，并且<strong>每个类型的Filter只创建一个实例</strong>，从此不再创建。<strong>在创建完Filter实例后，会马上调用<code>init()</code>方法完成初始化工作</strong>，这个方法只会被<strong>执行一次</strong>。</li><li><strong><code>doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</code></strong>：会在用户每次访问“目标资源 web.xml下标签&lt; url-pattern &gt;对应的入口地址”时执行，如果需要“放行”，那么需要调用FilterChain的<strong><code>filterChain.doFilter(servletRequest,servletResponse)</code></strong>方法，如果不调用FilterChain的<code>doFilter()</code>方法，那么目标资源将无法被执行。</li><li><strong><code>destroy()</code></strong>：服务器会在创建Filter对象之后，把Filter对象放到缓存中一直使用，通常不会摧毁它。一般都是在TomCat服务器关了以后再销毁。<h2 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h2><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114172023528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果有两个过滤器（首先根据web.xml的定义配置前后顺序规定先后）</li><li>先执行Filter1的init()初始化，再执行Filter2()的初始化。</li><li>执行Filter1的doFilter()方法的前部分，读到开放通行，再执行Filter2的doFilter()方法的前部分</li><li>由于没有其他的过滤器了，继续执行Filter()的doFilter后部分</li><li>然后再回到Filter1的doFilter()的后部分<h2 id="过滤器应用场景（精通）"><a href="#过滤器应用场景（精通）" class="headerlink" title="过滤器应用场景（精通）"></a>过滤器应用场景（精通）</h2></li><li>执行目标资源之前做预处理工作，<strong>例如设置编码</strong>，这种试通常都会放行，只是在目标资源执行之前做一些准备工作；</li><li><strong>通过条件判断是否放行</strong>，例如校验当前用户是否已经登录，或者用户IP是否被禁用；</li><li>在目标资源执行后，做一些后续的特殊处理工作，例如把目标资源输出的数据进行处理；</li></ul><h2 id="过滤器设置目标资源（熟悉）"><a href="#过滤器设置目标资源（熟悉）" class="headerlink" title="过滤器设置目标资源（熟悉）"></a>过滤器设置目标资源（熟悉）</h2><p>在web.xml文件中部署Filter时，可以通过”*”来执行目标资源；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;FilterDemo3&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><p>这一特性与Servlet完全相同。因此，可以用来在用户访问敏感资源时，执行过滤器，例如：<code>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;</code>，可以把所有管理员才能访问的资源放到<code>/admin</code>路径下，这是可以通过过滤器来验证用户身份。<br>还可以为<code>&lt;filter-mapping&gt;</code>指定目标资源为某个Servlet，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;FilterServlet1&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn_tx_Servlet</span>.<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">FilterServlet1</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_Filter</span>.<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户访问<a href="http://localhost:8080/项目路径/FilterServlet1，这时会执行对应的过滤器。" target="_blank" rel="noopener">http://localhost:8080/项目路径/FilterServlet1，这时会执行对应的过滤器。</a></p><h2 id="过滤器总结"><a href="#过滤器总结" class="headerlink" title="过滤器总结"></a>过滤器总结</h2><p>Filter的三个方法</p><ul><li><code>void init(FilterConfig filterConfig)</code>：在Tomcat启动时被调用</li><li><code>void doFilter(ServletRequest servletRequest,ServletResponse servletResponse, FilterChain filterChain)</code>：每次有请求都会调用该方法</li><li><code>void destroy()</code> ：在Tomcat关闭时被调用</li></ul><p>FilterConfig类：与ServletConfig相似，用来获取Filter的初始化参数</p><ul><li><p><code>ServletContext getServletContext()</code>：获取ServletContext的方法</p></li><li><p><code>String getFilterName()</code>：获取Filter的配置名称</p></li><li><p><code>String getInitParameter(String name)</code>：获取Filter的初始化配置，与web-xml的&lt; init-param &gt;标签元素对应</p></li><li><p><code>Enumeration getInitParameterNames()</code>：获取所有参数化参数的名称</p><p>FilterChain类</p></li><li><p><code>void doFilter(servletRequest,servletResponse)</code>：表示放行，执行下一个过滤器或者执行目标资源。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    String charset = filterConfig.getInitParameter(<span class="string">"charset"</span>);</span><br><span class="line">    System.out.println(charset);</span><br><span class="line">    Enumeration&lt;String&gt; names = filterConfig.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">        String name = names.nextElement();</span><br><span class="line">        String value = filterConfig.getInitParameter(name);</span><br><span class="line">        System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//FilterChain.doFilter 表示是放行,在该方法前的代码，我们称之为前置拦截</span></span><br><span class="line">    <span class="comment">//后面的代码，称之为后置拦截</span></span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器设置参数实现中文无乱码"><a href="#过滤器设置参数实现中文无乱码" class="headerlink" title="过滤器设置参数实现中文无乱码"></a>过滤器设置参数实现中文无乱码</h2><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    实现 改正乱码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn_tx_Filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn_tx_Servlet.EncodingServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/EncodingServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EncodingFilter.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String encode;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        encode = filterConfig.getInitParameter(<span class="string">"encode"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletResponse.setContentType(<span class="string">"text/html;charset="</span>+encode);</span><br><span class="line">        servletResponse.setCharacterEncoding(encode);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EncodingServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"测试中文乱码问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器 Listener"></a>监听器 Listener</h1><p><strong>比如用来统计某个网页同时在线的人数</strong></p><h2 id="监听器概述"><a href="#监听器概述" class="headerlink" title="监听器概述"></a>监听器概述</h2><p>在JAVAWEB被监听的事件源为：ServletContext、HttpSession、ServletRequest，即三大域对象</p><ul><li>监听域对象“创建”与“销毁”的监听器</li><li>监听域对象“操作域属性”的监听器</li><li>监听HttpSession的监听器</li></ul><p>创建Listener的步骤</p><ol><li>创建类实现 ServletContextListener类</li><li>联想打出对应的成员方法</li><li>web.xml 中 设置Listener标签</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn_tx_Listener.MyServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h2><p>ServletContextListener：<strong>Tomcat启动和关闭时</strong>调用下面两个方法：</p><ul><li><code>public void contextInitialized(ServletContextEvent sce)</code> ：ServletContext对象被创建后调用；</li><li><code>public void contextDestroyed(ServletContextEvent sce)</code>：ServletContext对象被销毁前调用；</li></ul><h2 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h2><p>HttpSessionListener：<strong>开始会话和结束时</strong>调用下面两个方法：</p><ul><li><code>public void sessionCreated(HttpSessionEvent se)</code> ：ServletContext对象被创建后调用；</li><li><code>public void sessionDestroyed(HttpSessionEvent se)</code>：ServletContext对象被销毁前调用；<h2 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h2>ServletRequestListener：开始请求和结束请求时调用下面两个方法</li><li><code>public void requestInitialized(ServletRequestEvent sre)</code> ：ServletContext对象被创建后调用；</li><li><code>public void requestDestroyed(ServletRequestEvent sre)</code>：ServletContext对象被销毁前调用；</li></ul><h2 id="监听器练习-在线人数"><a href="#监听器练习-在线人数" class="headerlink" title="监听器练习(在线人数)"></a>监听器练习(在线人数)</h2><p>一个现实人数的 jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;一只柴犬的网页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.getSession().setAttribute(<span class="string">"user"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h1&gt;当前在线人数:$&#123;online&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;a href="loginout.jsp"&gt;退出登录&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实现退出用户的jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户退出界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实现监听人数的 监听。 其实际就是通过ServletContext存储当前的访问数量，因为其是贯彻服务器始终的。每当有session对象存储时，表示有个人进来的，session对象被撤销时，表示有个人出去了。因此选择监听HttpSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span>, <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取到ServletContext对象</span></span><br><span class="line">        ServletContext context = sce.getServletContext();</span><br><span class="line">        <span class="comment">//把当前在线人数 初始化到ServletContext对象内</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext对象中 获取当前在线人数</span></span><br><span class="line">        Integer count = (Integer) context.getAttribute(<span class="string">"online"</span>);</span><br><span class="line">        <span class="comment">//把count+1 添加回ServletContext对象</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,++count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext对象中 获取当前在线人数</span></span><br><span class="line">        Integer count = (Integer) context.getAttribute(<span class="string">"online"</span>);</span><br><span class="line">        <span class="comment">//把count-1 添加回ServletContext对象</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,--count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;过滤器与监听器&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;熟悉掌握过滤器的使用及生命周期&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EL表达式和JSTL标签库</title>
    <link href="http://yoursite.com/2021/01/14/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://yoursite.com/2021/01/14/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</id>
    <published>2021-01-14T14:56:45.629Z</published>
    <updated>2021-01-14T14:56:52.829Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="EL表达式和JSTL标签库">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>掌握EL表达式的运算，操作对象和内置对象的使用</li><li>掌握JSTL标签的核心标签库常用标签，并能使用JSTL格式化标签库处理相关格式化操作</li><li>了解JSTL函数库相关操作</li><li><strong>能够使用EL表达式和JSTL标签库完成一张用户表的增删改查</strong></li></ul><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><h2 id="EL表达式概述"><a href="#EL表达式概述" class="headerlink" title="EL表达式概述"></a>EL表达式概述</h2><blockquote><p>EL是一门表达式语言，它对应<code>&lt;%=...%&gt;</code>。在JSP中，表达式会被输出，所以EL表达式也会被输出<br>EL表达式的格式为：<code>${...}</code>，例如：<code>${1+2}</code><br>在使用EL表达式时，要求page指令的<code>isELIgnored</code>属性为false。这样JSP在编译成.java时，才不会忽视EL表达式。<br>如果想让EL表达式被JSP编译器忽略，那么可以<code>\${1+2}</code></p></blockquote><h2 id="EL表达式-1"><a href="#EL表达式-1" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>JSP是Servlet。通常编写的Servlet不需要输出HTML代码，而是转发到JSP页面。<br>换句话说就是，，Servlet不负责显示页面，显示页面这个功能由JSP来完成。而Servlet专注于控制层内容。</p><h2 id="EL表达式运算"><a href="#EL表达式运算" class="headerlink" title="EL表达式运算"></a>EL表达式运算</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114143231158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="EL表达式操作对象"><a href="#EL表达式操作对象" class="headerlink" title="EL表达式操作对象"></a>EL表达式操作对象</h2><ul><li>操作变量和常量 ：<code>${name}</code> 、<code>${8}</code> </li><li>操作List 和数组：<code>${list[0]}</code> 、<code>${arr[0]}</code> </li><li><strong>操作bean的属性：${person.name} 、${person[‘name’]} ，对应person.getName()方法</strong></li><li>操作Map的值：${map.key} 、${map[‘key’]} ，对应map.get(key)</li></ul><p>可以参考如下程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.Map"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.HashMap"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.List"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"EL.TxUser"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>EL表达式操作对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">name</span> =<span class="string">"txjava"</span>;</span></span><br><span class="line">    Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    map.put("akey","avalue");</span><br><span class="line">    map.put("bkey","bvalue");</span><br><span class="line">    map.put("ckey","cvalue");</span><br><span class="line">    List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    list.add(100);</span><br><span class="line">    list.add(200);</span><br><span class="line">    list.add(300);</span><br><span class="line"></span><br><span class="line">    TxUser txUser = new TxUser("柴犬",23);</span><br><span class="line">    //全域放入参数对象</span><br><span class="line">    pageContext.setAttribute("name",name);</span><br><span class="line">    pageContext.setAttribute("map",map);</span><br><span class="line">    pageContext.setAttribute("list",list);</span><br><span class="line">    pageContext.setAttribute("txUser",txUser);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取JAVA对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser['name']&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser['age']&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取LIST对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;list[0]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;list[1]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;list[2]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取map对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;map.akey&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;map.get("akey")&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;map["akey"]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><h2 id="什么是内置对象（面试常问）"><a href="#什么是内置对象（面试常问）" class="headerlink" title="什么是内置对象（面试常问）"></a>什么是内置对象（面试常问）</h2><p>内置对象是JSP页面中无需创建就可以直接使用的变量。在JSP中一共有9个这样的对象！他们分别是：</p><ul><li><p>out(JspWriter) 最常用的方法是print()，向页面输出！它与response.getWriter()基本相同</p></li><li><p>config(ServletConfig) 在页面中基本没有用</p></li><li><p>page(当前JSP的真身类型) 基本没用。表示当前JSP页面的当前实例！在页面中使用this和使用page是相同的</p></li><li><p><strong>pageContext</strong>(PageContext) <strong>非常有用</strong></p></li><li><p>exception(Throwable) 类型为Throwable。它只能在错误页中可以使用</p></li><li><p><strong>request</strong>(HttpServletRequest) 与Servlet中的request一样，没有区别</p></li><li><p><strong>response</strong>(HttpServletResponse) 与Servlet中的response一样，没有区别</p></li><li><p><strong>application</strong>(ServletContext) 就是ServletContext的对象</p></li><li><p><strong>Session</strong>(HttpSession) 就是HttpSession对象</p><p>JSPdemo1.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内置对象测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">.out</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">out.print</span>("这是<span class="attr">JSP</span>内置对象的测试页面");</span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">response</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">response.getWriter</span>()<span class="attr">.write</span>("这是<span class="attr">response</span>打印的内容");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>request获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=request.getAttribute("rkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>session获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=session.getAttribute("skey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>application获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=application.getAttribute("ckey")%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而对应的Servlet 基于HttpServlet</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向request存入内容</span></span><br><span class="line">req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue1"</span>);</span><br><span class="line"><span class="comment">//向session中存入内容</span></span><br><span class="line">req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue2"</span>);</span><br><span class="line"><span class="comment">//向servletcontext存入内容</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue3"</span>);</span><br><span class="line"><span class="comment">//页面跳转-请求转发</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"JSPdemo1.jsp"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><h2 id="EL表达式内置对象"><a href="#EL表达式内置对象" class="headerlink" title="EL表达式内置对象"></a>EL表达式内置对象</h2><p>在EL表达式中，无需创建就可以使用的对象称之为EL隐藏（隐含、内置）对象。在EL中一共有11个隐藏对象，它们都与Map相似。其中10个是Map，一个是PageContext；</p><h3 id="参数隐藏对象"><a href="#参数隐藏对象" class="headerlink" title="参数隐藏对象"></a>参数隐藏对象</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL隐藏对象测试页1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"cname"</span>,<span class="string">"yuxue"</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;%--    从url内可传参或者表单上传,例如username的<span class="number">3</span>种方式--%&gt;</span><br><span class="line">    $&#123;param.username&#125;</span><br><span class="line">    $&#123;param.get(<span class="string">"username"</span>)&#125;</span><br><span class="line">    $&#123;param[<span class="string">'username'</span>]&#125;</span><br><span class="line">    &lt;p&gt;|$&#123;param.password&#125;|&lt;/p&gt;</span><br><span class="line">&lt;%--    从url内可传参或者表单上传 多参形式--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;paramValues.like[0]&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;paramValues.like[1]&#125;&lt;/p&gt;</span><br><span class="line">&lt;%--    获取请求头信息 两种方式--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;header.HOST&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;header.get("HOST")&#125;&lt;/p&gt;</span><br><span class="line">&lt;%--    获取初始化参数 两种方式--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;initParam.get("user")&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;initParam.user&#125;&lt;/p&gt;</span><br><span class="line">&lt;%--    获取cookie的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;cookie.cname.name&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;cookie.cname.value&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="域隐藏对象（精通）"><a href="#域隐藏对象（精通）" class="headerlink" title="域隐藏对象（精通）"></a>域隐藏对象（精通）</h3><p>当EL中给出不是隐藏对象时，表示在四个域中查找数据。例如：${a}. 查找的优先级顺序为顺序依次为page、request、session、application<br>Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue"</span>);</span><br><span class="line">req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue"</span>);</span><br><span class="line">getServletContext().setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue"</span>);</span><br><span class="line">req.getRequestDispatcher(<span class="string">"EL4.jsp"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL隐藏对象测试页2&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">"pkey"</span>,<span class="string">"pvalue"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%--获取pageContext的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;pageContext.pkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取request的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;requestScope.rkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取session的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;sessionScope.skey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取application的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;applicationScope.ckey&#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &lt;%--获取pageContext的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;pkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取request的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;rkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取session的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;skey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取application的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;ckey&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="PageContext对象的一些方法"><a href="#PageContext对象的一些方法" class="headerlink" title="PageContext对象的一些方法"></a>PageContext对象的一些方法</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114164239239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="JSTL标签（精通）"><a href="#JSTL标签（精通）" class="headerlink" title="JSTL标签（精通）"></a>JSTL标签（精通）</h1><h2 id="JSTL概述"><a href="#JSTL概述" class="headerlink" title="JSTL概述"></a>JSTL概述</h2><h3 id="JSTL是什么"><a href="#JSTL是什么" class="headerlink" title="JSTL是什么"></a>JSTL是什么</h3><p>JSP标准标记库是一个实现Web应用程序中常见的通用功能的定制标记库集。这些功能包括迭代和条件判断、数据管理格式化、XML操作以及<strong>数据库访问</strong>。</p><h3 id="导入标签库"><a href="#导入标签库" class="headerlink" title="导入标签库"></a>导入标签库</h3><p>JSTL是第三方的，所以要导包。<br>导包后，在jsp文件头部，联想写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br></pre></td></tr></table></figure><p>并且要在WEB-INF下新建一个文件夹lib，并把原来的两个jar包放入。</p><h2 id="JSTL核心库（要非常熟）"><a href="#JSTL核心库（要非常熟）" class="headerlink" title="JSTL核心库（要非常熟）"></a>JSTL核心库（要非常熟）</h2><h3 id="c-out和c-set"><a href="#c-out和c-set" class="headerlink" title="c:out和c:set"></a>c:out和c:set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"key"</span>,<span class="string">"&lt;h4&gt;啦啦啦&lt;/h4&gt;"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;c:out&lt;/h3&gt;</span><br><span class="line">&lt;%--    c：out标签，表示在页面输出内容--%&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"1"</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">&lt;%--    <span class="keyword">default</span>属性表示该内容如果为空 则替换为<span class="keyword">default</span>所设置的值--%&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;pageScope.username&#125;"</span> <span class="keyword">default</span>=<span class="string">"空的"</span> /&gt;</span><br><span class="line">&lt;%--    escapeXml表示是否忽略xml的标签，默认为<span class="keyword">true</span>表示忽略，不建议设置为<span class="keyword">false</span>--%&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;pageScope.key&#125;"</span> <span class="keyword">default</span>=<span class="string">"空的"</span> escapeXml=<span class="string">"false"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;c:set&lt;/h3&gt;</span><br><span class="line">&lt;%--  value表示值  <span class="keyword">var</span>表示变量名称 其默认存在page中 不在其他<span class="number">3</span>个域内 --%&gt;</span><br><span class="line">    &lt;c:set value=<span class="string">"yuxue"</span> <span class="keyword">var</span>=<span class="string">"ckey"</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;ckey&#125;"</span>/&gt;</span><br><span class="line">&lt;%--如果我想存在其他域内可以通过scope 设置--%&gt;</span><br><span class="line">    &lt;c:set value=<span class="string">"yuxue1"</span> <span class="keyword">var</span>=<span class="string">"skey"</span> scope=<span class="string">"session"</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;sessionScope.skey&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="c-if和c-choose"><a href="#c-if和c-choose" class="headerlink" title="c:if和c:choose"></a>c:if和c:choose</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;h3&gt;c:if&lt;/h3&gt;</span><br><span class="line">    &lt;c:set <span class="keyword">var</span>=<span class="string">"str"</span> value=<span class="string">"hello"</span>/&gt;</span><br><span class="line">&lt;%--    cif标签表示 判断等式是否成立，如果成立则执行cif标签内的内容</span><br><span class="line">        test属性 必须为一个<span class="keyword">boolean</span>类型--%&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;not empty str&#125;"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;str&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;c:choose&lt;/h3&gt;</span><br><span class="line">    &lt;c:set <span class="keyword">var</span>=<span class="string">"score"</span> value=<span class="string">"90"</span>/&gt;</span><br><span class="line">&lt;%--    choose表示 多重判断</span><br><span class="line">        c:when表示判断该等式是否成立，如成立则不向下进行计算</span><br><span class="line">        c:otherwise表示<span class="keyword">else</span> 当上面所有等式均不成立的情况下，则执行otherwise内的内容。--%&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=90&#125;"&gt;A级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=80&#125;"&gt;B级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=70&#125;"&gt;C级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=60&#125;"&gt;D级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:otherwise&gt;E级&lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h3 id="c-forEach"><a href="#c-forEach" class="headerlink" title="c:forEach"></a>c:forEach</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">   &lt;%</span><br><span class="line">        String[] strs = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">        pageContext.setAttribute(<span class="string">"strs"</span>,strs);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="number">300</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"yuxue"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">        map.put(<span class="string">"chunxia"</span>,<span class="string">"liyuan"</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"map"</span>,map);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;c:forEach&lt;/h3&gt;</span><br><span class="line">&lt;%--    c:forEach 表示循环</span><br><span class="line">        begin 表示从哪里开始</span><br><span class="line">        end 表示从哪里结束</span><br><span class="line">        <span class="keyword">var</span> 表示从循环中的变量--%&gt;</span><br><span class="line">    &lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> <span class="keyword">var</span>=<span class="string">"num"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;num&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--    遍历数组</span><br><span class="line">        items 表示要遍历哪个数组--%&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;strs&#125;"</span> <span class="keyword">var</span>=<span class="string">"str"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;str&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--    遍历集合</span><br><span class="line">            items 表示要遍历哪个数组--%&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"i"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;i&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--    遍历map</span><br><span class="line">        取map的key 需要使用.key进行获取</span><br><span class="line">        取map的value 需要使用.value进行获取--%&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;map&#125;"</span> <span class="keyword">var</span>=<span class="string">"m"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;m.key&#125;"</span>/&gt;：&lt;c:out value=<span class="string">"$&#123;m.value&#125;"</span>/&gt;&lt;br&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        List&lt;TxUser&gt; txUsers =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"李远"</span>,<span class="number">72</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"柴犬"</span>,<span class="number">65</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"哈士奇"</span>,<span class="number">90</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"柯基"</span>,<span class="number">105</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"总分"</span>,<span class="number">332</span>));</span><br><span class="line">        pageContext.setAttribute(<span class="string">"users"</span>,txUsers);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;c:forEach&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table border=<span class="string">"1"</span> cellpadding=<span class="string">"0"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;分数年龄&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;step&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;end&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;begin&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;current&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;last&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;first&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;count&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;index&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">&lt;%--            step 表示步數 一步循环跳过几个元素</span><br><span class="line">                varStatus 表示循环状态--%&gt;</span><br><span class="line">            &lt;c:forEach items=<span class="string">"$&#123;users&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;user.name&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;user.age&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.step&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.end&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.begin&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.current&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.last&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.first&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.count&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.index&#125;"/&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">        &lt;/table&gt;</span><br></pre></td></tr></table></figure><h2 id="JSTL格式化标签库"><a href="#JSTL格式化标签库" class="headerlink" title="JSTL格式化标签库"></a>JSTL格式化标签库</h2><p>JSTL是第三方的，所以要导包。<br>导包后，在jsp文件头部，联想写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br></pre></td></tr></table></figure><p>并且要在WEB-INF下新建一个文件夹lib，并把原来的两个jar包放入。</p><h3 id="fmt-formatDate"><a href="#fmt-formatDate" class="headerlink" title="fmt:formatDate"></a>fmt:formatDate</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114222507952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    &lt;%</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        pageContext.setAttribute(<span class="string">"date1"</span>,now);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;fmt&lt;/h3&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;now&#125;"</span>/&gt;&lt;br&gt;</span><br><span class="line">    &lt;fmt:formatDate value=<span class="string">"$&#123;date1&#125;"</span> pattern=<span class="string">"yyyy-MM-dd"</span>/&gt;</span><br><span class="line">    &lt;fmt:formatDate value=<span class="string">"$&#123;date1&#125;"</span> pattern=<span class="string">"yyyy-MM-dd hh:mm:ss"</span>/&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(1):&lt;fmt:formatDate type="time" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(2):&lt;fmt:formatDate type="date" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(3):&lt;fmt:formatDate type="both" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(4):&lt;fmt:formatDate type="both" dateStyle="short" timeStyle="short" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(5):&lt;fmt:formatDate type="both" dateStyle="medium" timeStyle="medium" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(6):&lt;fmt:formatDate type="both" dateStyle="long" timeStyle="long" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(7):&lt;fmt:formatDate pattern="yyyy-MM-dd" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="fmt-formatNumber"><a href="#fmt-formatNumber" class="headerlink" title="fmt:formatNumber"></a>fmt:formatNumber</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114222707192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">123.456</span>;</span><br><span class="line">    pageContext.setAttribute(<span class="string">"num1"</span>,num);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;数字格式化(1):&lt;fmt:formatNumber  value="$&#123;num1&#125;" type="currency"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(2):&lt;fmt:formatNumber type="number" maxIntegerDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(3):&lt;fmt:formatNumber type="number" maxFractionDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(4):&lt;fmt:formatNumber type="number" groupingUsed="false" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(5):&lt;fmt:formatNumber type="percent" maxIntegerDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(6):&lt;fmt:formatNumber type="percent"  minFractionDigits="10" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(7):&lt;fmt:formatNumber type="percent" maxIntegerDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(8):&lt;fmt:formatNumber type="number"  value="$&#123;num1&#125;" pattern="0.00‰"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(9):&lt;fmt:formatNumber type="number"  value="$&#123;num1&#125;" pattern="0.00%"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;fmt:setLocale value=<span class="string">"en_US"</span>/&gt;</span><br><span class="line">    &lt;fmt:formatNumber value=<span class="string">"$&#123;num1&#125;"</span> type=<span class="string">"currency"</span>/&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="fmt-parseNumber"><a href="#fmt-parseNumber" class="headerlink" title="fmt:parseNumber"></a>fmt:parseNumber</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">double</span> jks = <span class="number">123.456</span>;</span><br><span class="line">    pageContext.setAttribute(<span class="string">"jks"</span>,jks);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;fmt:parseNumber <span class="keyword">var</span>=<span class="string">"i"</span> type=<span class="string">"number"</span> value=<span class="string">"$&#123;num1&#125;"</span>/&gt;</span><br><span class="line">&lt;p&gt;数字解析(1):&lt;c:out value="$&#123;i&#125;"/&gt;&lt;/p&gt;</span><br><span class="line">&lt;fmt:parseNumber <span class="keyword">var</span>=<span class="string">"i"</span> integerOnly=<span class="string">"true"</span> type=<span class="string">"number"</span> value=<span class="string">"$&#123;num1&#125;"</span>/&gt;</span><br><span class="line">&lt;p&gt;数字解析(2):&lt;c:out value="$&#123;i&#125;"/&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="JSTL函数库-用的不多"><a href="#JSTL函数库-用的不多" class="headerlink" title="JSTL函数库(用的不多)"></a>JSTL函数库(用的不多)</h2><h3 id="什么是EL函数库"><a href="#什么是EL函数库" class="headerlink" title="什么是EL函数库"></a>什么是EL函数库</h3><p>EL函数库是由第三方对EL的扩展，其是由JSTL添加的。其定义一些有返回值的静态方法。然后通过EL语言来调用他们！当然，不只是JSTL可以定义EL函数库，自己也是可以定义的。<br>EL函数库包含了很多对字符串的操作方法，以及对集合对象的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;EL表达式和JSTL标签库&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;掌握EL表达式的运算，操作对象和
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="http://yoursite.com/2021/01/14/JSP/"/>
    <id>http://yoursite.com/2021/01/14/JSP/</id>
    <published>2021-01-13T16:20:55.219Z</published>
    <updated>2021-01-13T16:21:02.353Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JSP">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>掌握jsp的本质，并熟悉使用JSP相关语法。<strong>能够使用JAVA代码和html拼装成完整页面</strong></li><li><strong>熟练掌握JSP常用内置对象</strong> 9个</li><li><strong>JSP四个域对象倒背如流，并知晓每个对象的作用</strong></li><li><strong>熟练掌握JSP指令，能解决JSP页面中文乱码问题</strong></li><li><strong>了解JSP动态标签，知晓其含义并能够使用</strong></li></ul><h1 id="JSP概述"><a href="#JSP概述" class="headerlink" title="JSP概述"></a>JSP概述</h1><h2 id="什么是JSP（Java-Server-page）"><a href="#什么是JSP（Java-Server-page）" class="headerlink" title="什么是JSP（Java Server page）"></a>什么是JSP（Java Server page）</h2><p>html+java代码+JSP动态标签 =jsp<br>在静态页面上添加动态信息。<br><strong>简单的说就是就是在前端页面上添加Servlet的代码。</strong></p><blockquote><p>当客户请求的为JSP页面时，服务器会查看JSP对应的Servlet是否存在，如果存在，那么直接调用Servlet的service()方法来处理请求。如果不存在，那么服务器会先把<strong>JSP编译成.java，再把.java编译成.class</strong>。<strong>然后调用service()方法。</strong><br>当这个JSP页面，第二次处理请求时，就会直接调用自身的service()方法</p></blockquote><h2 id="JSP和Servlet有啥不同"><a href="#JSP和Servlet有啥不同" class="headerlink" title="JSP和Servlet有啥不同"></a>JSP和Servlet有啥不同</h2><p>JSP是Servlet。通常编写的Servlet不需要输出HTML代码，而是转发到JSP页面。<br>换句话说就是，，Servlet不负责显示页面，显示页面这个功能由JSP来完成。而Servlet专注于控制层内容。</p><h2 id="JSP的注释"><a href="#JSP的注释" class="headerlink" title="JSP的注释"></a>JSP的注释</h2><p>语法:<code>&lt;%----%&gt;</code><br>其中JSP只有如上一种注释，注释的内容会被JSP编译系统忽略。<br>Html注释和jsp注释二者的区别</p><ul><li><code>&lt;!----!&gt;</code>：Tomcat不把它当注释，和其他东西一样，会发送到客户端。但浏览器不会显示它，因为浏览器知道它是注释。</li><li><code>&lt;%----%&gt;</code>：Tomcat在生成“真身”时，就会忽略它，因为Tomcat认识它，知道它是注释。所以在“真身”中就没有它，也不会发现到客户端，也就是说，客户端永远看不到他。</li></ul><h1 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h1><h2 id="什么是内置对象（面试常问）"><a href="#什么是内置对象（面试常问）" class="headerlink" title="什么是内置对象（面试常问）"></a>什么是内置对象（面试常问）</h2><p>内置对象是JSP页面中无需创建就可以直接使用的变量。在JSP中一共有9个这样的对象！他们分别是：</p><ul><li><p>out(JspWriter) 最常用的方法是print()，向页面输出！它与response.getWriter()基本相同</p></li><li><p>config(ServletConfig) 在页面中基本没有用</p></li><li><p>page(当前JSP的真身类型) 基本没用。表示当前JSP页面的当前实例！在页面中使用this和使用page是相同的</p></li><li><p><strong>pageContext</strong>(PageContext) <strong>非常有用</strong></p></li><li><p>exception(Throwable) 类型为Throwable。它只能在错误页中可以使用</p></li><li><p><strong>request</strong>(HttpServletRequest) 与Servlet中的request一样，没有区别</p></li><li><p><strong>response</strong>(HttpServletResponse) 与Servlet中的response一样，没有区别</p></li><li><p><strong>application</strong>(ServletContext) 就是ServletContext的对象</p></li><li><p><strong>Session</strong>(HttpSession) 就是HttpSession对象</p><p>JSPdemo1.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内置对象测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">.out</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">out.print</span>("这是<span class="attr">JSP</span>内置对象的测试页面");</span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">response</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">response.getWriter</span>()<span class="attr">.write</span>("这是<span class="attr">response</span>打印的内容");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>request获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=request.getAttribute("rkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>session获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=session.getAttribute("skey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>application获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=application.getAttribute("ckey")%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而对应的Servlet 基于HttpServlet</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向request存入内容</span></span><br><span class="line">req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue1"</span>);</span><br><span class="line"><span class="comment">//向session中存入内容</span></span><br><span class="line">req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue2"</span>);</span><br><span class="line"><span class="comment">//向servletcontext存入内容</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue3"</span>);</span><br><span class="line"><span class="comment">//页面跳转-请求转发</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"JSPdemo1.jsp"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><h2 id="JSP四个域对象"><a href="#JSP四个域对象" class="headerlink" title="JSP四个域对象"></a>JSP四个域对象</h2><h3 id="域的范围和属性管理"><a href="#域的范围和属性管理" class="headerlink" title="域的范围和属性管理"></a>域的范围和属性管理</h3><ul><li><p>pageContext 范围：当前页面之内有效</p></li><li><p>request 范围：当前的请求内有效</p></li><li><p>session 范围：当前的会话内有效</p></li><li><p>application 范围：当前这次服务器生命周期内有效</p><p>域对象的共同特地是都管理域中的属性，他们有着相同的方法</p></li><li><p><code>void setAttribute(String name,Object value)</code></p></li><li><p><code>Object getAttribute(String name,Object value)</code></p></li><li><p><code>void removeAttribute(String name,Object value)</code></p></li></ul><p>Servlet端 存入数据，请求跳转到前端jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//向request存入内容</span></span><br><span class="line">    req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue1"</span>);</span><br><span class="line">    <span class="comment">//向session中存入内容</span></span><br><span class="line">    req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue2"</span>);</span><br><span class="line">    <span class="comment">//向servletcontext存入内容</span></span><br><span class="line">    ServletContext context = getServletContext();</span><br><span class="line">    context.setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue3"</span>);</span><br><span class="line">    <span class="comment">//页面跳转-请求转发</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">"JSPdemo1.jsp"</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSPdemo1.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>域对象测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //向<span class="attr">pageContext</span>内存入内容</span></span><br><span class="line"><span class="tag">        <span class="attr">pageContext.setAttribute</span>("<span class="attr">pkey</span>","<span class="attr">pvalue2</span>");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>pageContext<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=pageContext.getAttribute("pkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>request获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=request.getAttribute("rkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>session获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=session.getAttribute("skey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>application获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=application.getAttribute("ckey")%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pageContext基本可以实现所有的参数获取。<br>用<code>Object findAttribute(String name)</code> 可以再所有范围内查找数据，顺序依次为page、request、session、application。如果前一个范围内查找到数据，那么就直接返回，不会继续查找</strong></p><h1 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h1><h2 id="什么是JSP指令"><a href="#什么是JSP指令" class="headerlink" title="什么是JSP指令"></a>什么是JSP指令</h2><p>JSP指令的格式为<code>&lt;%@指令名attr1=&quot;&quot;  attr2=&quot;&quot; %&gt;</code>一般都会把JSP指令放到JSP文件的最上面，但不是必须的。<br>其实创建的时候就已经自动生成了设定编码的JSP指令<code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code><br>JSP的三大指令分别为：page、include、taglib，最为常用，也最为复杂的是page指令</p><h2 id="page指令的errorPage和isErrorPage"><a href="#page指令的errorPage和isErrorPage" class="headerlink" title="page指令的errorPage和isErrorPage"></a>page指令的errorPage和isErrorPage</h2><p>其就是为了当出现一些特定错误的时候，页面跳转到对应的错误页面。并且使用之前的exception(Throwable) 显示错误信息。不过要提前设定<code>&lt;%@ page isErrorPage=&quot;true&quot; %&gt;</code></p><p>出错JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page errorPage=<span class="string">"error.jsp"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b=a/<span class="number">0</span>;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>跳转的错误显示页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isErrorPage=<span class="string">"true"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;这是一个错误页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;这是错误页面，你的页面出现了问题，错误内容如下：&lt;/h1&gt;</span><br><span class="line">    &lt;%=exception.getMessage()%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>同时可以在web.xml中设置 跳转到对应的错误项。如下为出现404错误，跳转到的error,jsp中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">    &lt;location&gt;/error.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><h2 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h2><p>include指令的意思是静态包含。其指令只有一个属性：file，指定要包含的页面，例如：<code>&lt;%@ include file=&quot;JPSdemo3.jsp&quot;%&gt;</code>  放在<code>&lt;body&gt;</code>标签中。</p><blockquote><p>静态包含：当1.jsp页面包好2.jsp页面后，在编译1.jsp页面时，需要把1.jsp与2.jsp页面合并成一个文件，然后再编译成Servlet(JAVA文件)</p></blockquote><h2 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h2><p>在JSP页面中使用第三方的标签库时，需要使用taglib指令来“导包”。放在开头例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jst1/core"</span> %&gt;</span><br></pre></td></tr></table></figure><ul><li>prefix表示标签的前端，这个名字可以随便起</li><li>uri是由第三方标签库定义的，所以需要第三方定义的uri</li></ul><p>这是响应工作的一部分，所以这个方法是response对象的。并且<strong>Cookie是HTTP协议中的内容</strong>，所以<strong>保存Cookie是HttpServletResponse类的方法</strong>。</p><h1 id="JSP动态标签（了解即可）"><a href="#JSP动态标签（了解即可）" class="headerlink" title="JSP动态标签（了解即可）"></a>JSP动态标签（了解即可）</h1><h2 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h2><p>include标签是动态包含，与include指令不同，include标签与<code>RequestDispatcher.include()</code>方法的功能是相同的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSPA<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--动态</span> 这么跳转即可<span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"JPSdemo3.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="forward标签"><a href="#forward标签" class="headerlink" title="forward标签"></a>forward标签</h2><p>相当于跳转，不过最后地址栏还是源地址。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;JSPA&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--去显示JPSdemo3.jsp中的内容--%&gt;</span><br><span class="line">&lt;jsp:forward page="JPSdemo3.jsp"&gt;&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;JSP&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;掌握jsp的本质，并熟悉使用JSP相关语法。&lt;str
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>会话对象 Session and Cookie</title>
    <link href="http://yoursite.com/2021/01/13/%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1%20Session%20and%20Cookie/"/>
    <id>http://yoursite.com/2021/01/13/%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1%20Session%20and%20Cookie/</id>
    <published>2021-01-13T11:28:03.179Z</published>
    <updated>2021-01-13T11:28:10.355Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC](会话对象<br>Session and Cookie )</p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>熟练掌握Cookie的概念,使用,及生命周期;</li><li>能够使用Cookie存储中文并了解Cookie的路径作用;</li><li>掌握Session的原理及使用方法;</li><li><strong>能够详细说明Cookie和Session的区别;</strong></li><li><strong>能够独立完成自动登陆</strong></li></ul><h1 id="Cookie概述-熟练"><a href="#Cookie概述-熟练" class="headerlink" title="Cookie概述(熟练)"></a>Cookie概述(熟练)</h1><h2 id="什么叫Cookie"><a href="#什么叫Cookie" class="headerlink" title="什么叫Cookie"></a>什么叫Cookie</h2><p>Cookie翻译成中文是小甜点，小饼干的意思。<strong>在HTTP中它表示服务器送给客户端浏览器的小甜点。</strong>其实Cookie就是一个键和一个值构成的，<strong>随着服务器端的响应发送给客户端浏览器</strong>。<strong>然后客户端浏览器会把Cookie保存起来，<em>当下一次再访问服务器时把Cookie再发送给服务器</em>。</strong><br>不同的浏览器不共享Cookie</p><h2 id="Cookie的作用"><a href="#Cookie的作用" class="headerlink" title="Cookie的作用"></a>Cookie的作用</h2><p>Cookie的作用可大了，但无论怎么夸大Cookie的作用都离不开“<strong>跟踪客户端状态</strong>”这句话。</p><ol><li>Cookie是服务器保存在客户端的信息</li><li>然后客户端会在下次请求时把Cookie在还给服务器</li><li>服务器就可以通过信息来识别客户端了<h1 id="Cookie示例-精通"><a href="#Cookie示例-精通" class="headerlink" title="Cookie示例(精通)"></a>Cookie示例(精通)</h1><h2 id="保存Cookie到客户端"><a href="#保存Cookie到客户端" class="headerlink" title="保存Cookie到客户端"></a>保存Cookie到客户端</h2>这是响应工作的一部分，所以这个方法是response对象的。并且<strong>Cookie是HTTP协议中的内容</strong>，所以<strong>保存Cookie是HttpServletResponse类的方法</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Cookie</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line"><span class="comment">//把cookie添加到响应对象内</span></span><br><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>访问路径后，可以在请求的响应头中看到所存入的cookie<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112151657647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到Response Headers 中 Set-Cookie 中存入了刚才我们放的cookie信息。同样根据浏览器的开发者工具我们可以看到<code>http://localhost:8080</code>的网址的cookie中被加入了username=chaiquan的信息:</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112151923827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注意：</strong></p><ul><li>不同次的存入cookie，因为键是唯一的，相同键的值会被覆盖。同一时间只能够存在唯一的一对键值对。</li><li>同时后续请求，请求头都会带上存储的Cookie<h2 id="服务器端读取Cookie"><a href="#服务器端读取Cookie" class="headerlink" title="服务器端读取Cookie"></a>服务器端读取Cookie</h2>如果浏览器保存了Cookie，那么会在下一次请求时把Cookie放到<strong>请求头</strong>中发送给服务器，这时服务器需要<strong>在请求中读取Cookie</strong>。既然是<strong>在请求中读取</strong>，那么当然是<strong>使用request对象</strong>来读取了。<br>循环遍历Cookie 的每一条键值对 cookie 取键与取值的方法为</li><li>取键 cookie.getName();</li><li>取值 cookie.getValue();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="comment">//输出所有的键值对</span></span><br><span class="line">        System.out.println(cookie.getName() +<span class="string">":"</span>+ cookie.getValue());</span><br><span class="line">        <span class="comment">//去对应键的值</span></span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"username"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"输出username的值"</span>);</span><br><span class="line">            System.out.println(cookie.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cookie生命周期-熟练"><a href="#Cookie生命周期-熟练" class="headerlink" title="Cookie生命周期(熟练)"></a>Cookie生命周期(熟练)</h1><p>Cookie会在客户端存活多久呢？这就是Cookie的生命了。<strong>默认情况下，Cookie只在浏览器的内存中存活</strong>，也就是说，<strong>当你关闭浏览器后，Cookie就会消失</strong>！<br>可以使用<code>Cookie#setMaxAge(int expiry)</code>来设置Cookie的存活时间。<strong>参数expiry表示Cookie存活的秒数</strong>。</p><ul><li>cookie.setMaxAge(60*60)：表示cookie对象可存活1小时。就算关闭浏览器，就算重启客户端电脑，cookie也会存活1小时。因为当maxAge大于0时，浏览器不仅会把cookie保存在浏览器内存中，还会把cookie保存到硬盘上。</li><li>cookie.setMaxAge(-1)：cookie的maxAge属性的默认值就是-1（其实只要是负数都是一个意思），表示只在浏览器内存中存活。一旦关闭浏览器窗口，那么cookie就会消失。</li><li>cookie.setMaxAge(0)：cookie被作废！表示cookie即不在内存中存活，也不在硬盘上存活，这<strong>样的cookie设置只有一个目的，那就是覆盖客户端原来的这个cookie，使其作废</strong>。<h1 id="Cookie的路径-不常用"><a href="#Cookie的路径-不常用" class="headerlink" title="Cookie的路径(不常用)"></a>Cookie的路径(不常用)</h1><h2 id="Cookie的path属性"><a href="#Cookie的path属性" class="headerlink" title="Cookie的path属性"></a>Cookie的path属性</h2>Cookie还有一个path属性，可以通过Cookie#setPath(String)方法来设置。这个路径就是请求的路径。例如在请求:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/cookie_demo/path</span><br></pre></td></tr></table></figure><p>服务器响应了一个Cookie，那么这个Cookie的默认路径是/cookie_demo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/cookie_demo/path/son</span><br></pre></td></tr></table></figure><p>服务器响应了一个Cookie，那么这个Cookie的默认路径就是/cookie_demo/path。<br>其可以在浏览器当中查看。例如谷歌浏览器：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112185659870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Cookie-路径的作用"><a href="#Cookie-路径的作用" class="headerlink" title="Cookie 路径的作用:"></a>Cookie 路径的作用:</h2><ul><li><p>首先声明一点，path不是指Cookie在客户端存放的路径！！！不同的浏览器存放Cookie的路径是不同的！！！你不能通过Cookie的path来指定Cookie文件的存放路径！！！</p><p>假设你的浏览器当前已经有了两个Cookie：</p></li></ul><ul><li>cookie1:name=path1;value=pathvalue1;path=/cookie_demo</li><li>cookie2:name=path1;value=pathvalue2;path=/cookie_demo/path</li></ul><p>区别在于</p><ul><li>当访问<a href="http://localhost:8080/cookie_demo/*时，请求头中会包含cookie1，而不会包含cookie2。" target="_blank" rel="noopener">http://localhost:8080/cookie_demo/*时，请求头中会包含cookie1，而不会包含cookie2。</a></li><li>当访问<a href="http://localhost:8080/cookie_demo/path/*时，请求头中会包含cookie1和cookie2。" target="_blank" rel="noopener">http://localhost:8080/cookie_demo/path/*时，请求头中会包含cookie1和cookie2。</a></li></ul><p><strong>也就是说，在访问子路径时，会包含其父路径的Cookie，而在访问父路径时，不包含子路径的Cookie。</strong></p><h2 id="Cookie路径的使用"><a href="#Cookie路径的使用" class="headerlink" title="Cookie路径的使用"></a>Cookie路径的使用</h2><p>如果你想在BServlet中设置的Cookie，在客户端访问AServlet时也包含在请求头中，那么就需要设置BServlet中的Cookie的path：</p><ul><li>c2.setPath(“/cookie_demo”)：硬编码；</li><li>c2.setPath(request.getContextpath() + “/”)：活编码。</li></ul><p>这样就可以设置Cookie的路径，保存在访问AServlet时，也会包含BServlet中添加的Cookie。<br>Cookie的SetPath设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie。</p><blockquote><p>首先默认情况如果不设置cookie的path，默认是 /项目名称/当前路径的上一层地址如：<br>请求路径：/cookie_demo/servlet/login，<br>cookie的路径：/cookie_demo/servlet</p></blockquote><p>如果我们设置path，如果当前访问的路径包含了cookie的路径（当前访问路径在cookie路径基础上要比cookie的范围小）cookie就会加载到request对象之中。</p><h1 id="Cookie保存中文-熟练-Tom9是可以使用中文的-针对Tom7版本"><a href="#Cookie保存中文-熟练-Tom9是可以使用中文的-针对Tom7版本" class="headerlink" title="Cookie保存中文(熟练) Tom9是可以使用中文的 针对Tom7版本"></a>Cookie保存中文(熟练) Tom9是可以使用中文的 针对Tom7版本</h1><p>Tom7 中  。Cookie中是不可以设置中文的，但可以使用<code>URLEncodor.encode()</code>方法<strong>编码</strong>后在存放到Cookie中。在获取Cookie时，需要先使用<code>URLDecoder.decode()</code>方法<strong>解码</strong>，再使用。<br>添加cookie:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Cookie</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>,<span class="string">"柴犬"</span>);</span><br><span class="line"><span class="comment">//编码 </span></span><br><span class="line">URLEncoder.encode(username,<span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure><p>读取cookie:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"username"</span>))</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">            username = URLDecoder.decode(cookie.getValue(),<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"password"</span>))</span><br><span class="line">            password = cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpSession概述-熟练"><a href="#HttpSession概述-熟练" class="headerlink" title="HttpSession概述(熟练)"></a>HttpSession概述(熟练)</h1><p>会话跟踪之session</p><blockquote><p><strong>session也是域对象之一</strong>，它的范围是在一个会话范围内有效。session既然是域对象，那么当然就要有<code>getAttribute()</code>和<code>setAttribute()</code>系列方法了。<br>在一个会话内共享一个session对象，所以session中可以保存一个会话内的数据。例如当前用户的信息。</p></blockquote><ul><li>session的范围大于request，<strong>可以在一个会话中多个请求之间共享数据</strong>。</li><li>但session的范围小于ServletContext(application)，<strong>session不能在多个用户之间共享数据</strong>。</li></ul><p>目前所学过的域对象的作用范围：</p><blockquote><pre><code>**ServletContext &gt;    HttpSession    &gt;    HttpServletRequest**</code></pre></blockquote><p><strong>获取session对象</strong></p><ul><li><p>使用<code>request.getSession()</code>方法就可以获取session对象。 <strong>存入的键值对参数，是存在sussionid对应的session对象中，存在于服务器的session池中</strong></p><p>类TxUser</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TxUser&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Session_demo1 存入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求对象</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"><span class="comment">//向session内存入内容</span></span><br><span class="line">session.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"txuser"</span>,<span class="keyword">new</span> TxUser(<span class="string">"admin"</span>,<span class="string">"123456"</span>));</span><br><span class="line">resp.getWriter().write(<span class="string">"success!!!"</span>);</span><br></pre></td></tr></table></figure><p>Session_demo2 读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求对象</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"><span class="comment">//向session内存入内容</span></span><br><span class="line">session.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"txuser"</span>,<span class="keyword">new</span> TxUser(<span class="string">"admin"</span>,<span class="string">"123456"</span>));</span><br></pre></td></tr></table></figure><p><strong>有了session，就不用使用Cookie来跟踪会话了</strong>！但是session不能像Cookie那样长命，一旦用户关闭浏览器窗口，那么session就死掉了。但在请求，服务器会分配一个新的session对象给他。</p><h1 id="HttpSession原理（依赖Cookie）"><a href="#HttpSession原理（依赖Cookie）" class="headerlink" title="HttpSession原理（依赖Cookie）"></a>HttpSession原理（依赖Cookie）</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112215401736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>HTTP是无状态协议，<strong>但是为什么session可以跟踪会话状态呢</strong>？ 因为session依赖Cookie。</p></blockquote><ol><li>当客户端第一次访问服务器时，服务器会为客户端创建一个session对象，然后把session对象放到session池中，在响应时把<strong>sessionId通过Cookie响应</strong>给客户端。注意，<strong>只有在第一次访问时，服务器才会创建session，给客户端响应sessionId</strong>。从此以后就不会了！</li><li>当<strong>客户端再次访问服务器时，会在请求中带着sessionId给服务器</strong>，<strong>服务器通过sessionId到session池中找到session对象，这就可以完成会话跟踪了</strong>。也就是说，服务器端保存的是session对象，而客户端只有sessionId。每次访问都需要通过客户端的sessionId来匹配服务器端的session对象！这样用户在session中保存的数据就可以再次被使用了。</li><li>sessionId是服务器通过Cookie发送给客户端浏览器的，<strong>这个Cookie的maxAge为-1</strong>，即只在浏览器内存中存在。如果你关闭所有浏览器窗口，那么这个Cookie（Session）就会消失了！</li></ol><h1 id="HttpSession失效-精通"><a href="#HttpSession失效-精通" class="headerlink" title="HttpSession失效(精通)"></a>HttpSession失效(精通)</h1><p>session失效有如下几个原因：</p><ol><li>session.invalidate()方法注销session</li><li>session超时</li></ol><p>在web.xml中添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">    &lt;!-- session的超时时间，以分钟为单位 --&gt;</span><br><span class="line">    &lt;session-timeout&gt;1&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>Cookie被禁用</li></ol><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="Session和Cookie的区别-精通"><a href="#Session和Cookie的区别-精通" class="headerlink" title="Session和Cookie的区别(精通)"></a>Session和Cookie的区别(精通)</h2><ul><li>session 存在服务器端，cookie 存在客户端（浏览器）</li><li>session 默认被存在在服务器的一个文件里（不是内存）</li><li>session 的运行<strong>依赖 session id</strong>，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li><li>session 可以放在 文件、数据库、或内存中都可以。</li><li>用户验证这种场合一般会用 session 因此，维持一个会话的核心就是客户端的唯一标识，即 session id</li></ul><h1 id="综合练习-精通-使用cookie实现自动登录"><a href="#综合练习-精通-使用cookie实现自动登录" class="headerlink" title="综合练习(精通) 使用cookie实现自动登录"></a>综合练习(精通) 使用cookie实现自动登录</h1><p>具体实现流程如图所示：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112230225355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>login.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"auto"</span>/&gt;</span><span class="symbol">&amp;nbsp;</span>一天内自动登陆<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Login的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置响应对象的编码</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取用户名与密码</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//判断是否传递参数</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> &amp;&amp; password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取cookies</span></span><br><span class="line">            <span class="comment">//字符串</span></span><br><span class="line">            String txStr =<span class="string">""</span>;</span><br><span class="line">            Cookie[] cookies = req.getCookies();</span><br><span class="line">            <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"txuser1"</span>))&#123;</span><br><span class="line">                        txStr = cookie.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否有用户cookie</span></span><br><span class="line">            <span class="keyword">if</span> (txStr.equals(<span class="string">""</span>))&#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">"你没登录呢"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                BASE64Decoder decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">                txStr = <span class="keyword">new</span> String(decoder.decodeBuffer(txStr));</span><br><span class="line">                <span class="comment">//划分：内容</span></span><br><span class="line">                String[] split = txStr.split(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">if</span>(split[<span class="number">0</span>].equals(<span class="string">"admin"</span>) &amp;&amp; split.equals(<span class="string">"123456"</span>))&#123;</span><br><span class="line">                    TxUser txUser = <span class="keyword">new</span> TxUser(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">                    req.getSession().setAttribute(<span class="string">"txuser"</span>,txUser);</span><br><span class="line">                    resp.getWriter().write(<span class="string">"欢迎你大哥"</span>+txUser.getUsername());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.getWriter().write(<span class="string">"大神啊，你得重新登录"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//判断用户名或者摩玛是否正确   正常应该是数据库</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)&amp;&amp; <span class="string">"123456"</span>.equals(password))&#123;</span><br><span class="line">                <span class="comment">//输入正确 获取用户，存入session</span></span><br><span class="line">                <span class="comment">//创建一个用户</span></span><br><span class="line">                TxUser txUser = <span class="keyword">new</span> TxUser(username,password);</span><br><span class="line">                <span class="comment">//用户对象 存入session</span></span><br><span class="line">                HttpSession session = req.getSession();</span><br><span class="line">                session.setAttribute(<span class="string">"txuser"</span>,txUser);</span><br><span class="line">                <span class="comment">//获取是否勾选自动登录 auto是name的参数</span></span><br><span class="line">                String auto = req.getParameter(<span class="string">"auto"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"1"</span>.equals(auto))&#123;</span><br><span class="line">                    <span class="comment">//admin:123456</span></span><br><span class="line">                    String str = txUser.getUsername()+<span class="string">":"</span>+txUser.getPassword();</span><br><span class="line">                    <span class="comment">//使用BASE64编码格式</span></span><br><span class="line">                    BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">                    str = encoder.encode(str.getBytes());</span><br><span class="line">                    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"txuser1"</span>,str);</span><br><span class="line">                    resp.addCookie(cookie);</span><br><span class="line">                    resp.getWriter().write(<span class="string">"欢迎你奥 你设置了自动登录"</span>+txUser.getUsername());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.getWriter().write(<span class="string">"欢迎你奥 不过你没有设置自动登录"</span>+txUser.getUsername());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//账号密码对不上</span></span><br><span class="line">                resp.getWriter().write(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TxUser类</p><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxUser</span> </span>{    <span class="keyword">private</span> String username;    <span class="keyword">private</span> String password;    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">()</span> </span>{    }    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">(String username, String password)</span> </span>{        <span class="keyword">this</span>.username = username;        <span class="keyword">this</span>.password = password;    }    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>{        <span class="keyword">return</span> username;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>{        <span class="keyword">this</span>.username = username;    }    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>{        <span class="keyword">return</span> password;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>{        <span class="keyword">this</span>.password = password;    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{        <span class="keyword">return</span> <span class="string">"TxUser{"</span> +                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +                <span class="string">'}'</span>;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC](会话对象&lt;br&gt;Session and Cookie )&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;熟练掌握Cookie的概念
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>请求对象和响应对象 request and response</title>
    <link href="http://yoursite.com/2021/01/11/%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%20request%20and%20response/"/>
    <id>http://yoursite.com/2021/01/11/%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%20request%20and%20response/</id>
    <published>2021-01-11T13:26:38.058Z</published>
    <updated>2021-01-11T13:26:45.262Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC](请求对象和响应对象 request and response )<br>request是客户端（浏览器）请求服务器，response是服务器返回给客户端（浏览器）</p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>熟练掌握相对路径和绝对路径的使用,能够解决项目中的404问题;</li><li>能够使用request的API接收所有的前台传过来的参数(单值多值);</li><li>能够熟练处理页面各种中文乱码问题;</li><li>能够熟练的使用request完成请求转发,使用response完成请求重定向;</li><li><strong>掌握请求转发和重定向的区别(面试题);</strong></li></ul><h1 id="相对路径和绝对路径-精通"><a href="#相对路径和绝对路径-精通" class="headerlink" title="相对路径和绝对路径(精通)"></a>相对路径和绝对路径(精通)</h1><p>Java中使用的路径，分为两种：<strong>绝对路径和相对路径</strong>。归根结底，Java本质上只能使用绝对路径来寻找资源。所有的相对路径寻找资源的方法，都不过是一些便利方法。不过是API在底层帮助我们构建了绝对路径，从而找到资源的！</p><h2 id="区分绝对路径与相对路径"><a href="#区分绝对路径与相对路径" class="headerlink" title="区分绝对路径与相对路径"></a>区分绝对路径与相对路径</h2><p>相对路径中</p><ul><li>. 表示当前目录</li><li>上层目录 .. (两个点)</li></ul><p>绝对路径中</p><ul><li>/ 打头 </li><li>其中完整路径包括 <code>http://localhost:8080/</code></li></ul><p>例如 ：<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210109214720649.png#pic_center" alt="在这里插入图片描述"></p><ul><li>jks.html 位于web下 其完整路径为 <code>http://localhost:8080/JAVAWEB_REQ_RES_test/jks.html</code> 其要跳转到 jks2.html </li><li>jks.html 的完整路径为 <code>http://localhost:8080/JAVAWEB_REQ_RES_test/html/jks2.html</code></li><li>从jks.html 网页中 跳转到 jks2.html 有三种方法<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    &lt;p&gt;使用完整路径访问 非常麻烦 而且项目无法上线&lt;/p&gt;</span><br><span class="line">&lt;a href=<span class="string">"http://localhost:8080/JAVAWEB_REQ_RES_test/html/jks2.html"</span>&gt;跳转http:<span class="comment">//localhost:8080/JAVAWEB_REQ_RES_test/html/jks2.html&lt;/a&gt;</span></span><br><span class="line">    &lt;p&gt;使用绝对路径访问 /代表的为8080后面的斜杠 不推荐使用，项目名称变化就失效了&lt;/p&gt;</span><br><span class="line">    &lt;a href="/JAVAWEB_REQ_RES_test/html/jks2.html"&gt;跳转 /JAVAWEB_REQ_RES_test/html/jks2.html&lt;/a&gt;</span><br><span class="line">    &lt;p&gt;使用相对路径访问&lt;/p&gt;</span><br><span class="line">    &lt;a href="html/jks2.html"&gt;跳转 html/jks2.html&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li>同样 jks2.html  跳转 回  jks.html  应该采用相对路径  <code>../回到上一层目录，然后下面的文件jks.html</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="../jks.html"&gt;跳转 ../jks.html&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="HttpServletRequest基本功能-了解"><a href="#HttpServletRequest基本功能-了解" class="headerlink" title="HttpServletRequest基本功能(了解)"></a>HttpServletRequest基本功能(了解)</h1><h2 id="HttpServletRequest的功能"><a href="#HttpServletRequest的功能" class="headerlink" title="HttpServletRequest的功能"></a>HttpServletRequest的功能</h2><p>HttpServletRequest在JavaWeb中非常重要的一个类。它<strong>是Servlet的service()方法的参数</strong>之一。request的功能可以分为以下几种：</p><ul><li>封装了请求头数据；</li><li>封装了请求正文数据，如果是GET请求，那么就没有正文；</li><li>request是一个域对象，可以把它当成Map来添加获取数据；</li><li>做请求的转发<h2 id="request获取请求头数据"><a href="#request获取请求头数据" class="headerlink" title="request获取请求头数据"></a>request获取请求头数据</h2>request与请求头相关的方法有：</li><li>String getHeader(String name)：获取指定名称的请求头；</li><li>Enumeration getHeaderNames()：获取所有请求头名称；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过请求对象获取请求头</span></span><br><span class="line">String host = req.getHeader(<span class="string">"Host"</span>);</span><br><span class="line">System.out.println(host);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过请求对象获取所有请求头的名称</span></span><br><span class="line">Enumeration &lt;String&gt; names = req.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">    String name = names.nextElement();</span><br><span class="line">    String header = req.getHeader(name);</span><br><span class="line">    System.out.println(name +<span class="string">":"</span>+ header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="request获取请求相关的其它方法"><a href="#request获取请求相关的其它方法" class="headerlink" title="request获取请求相关的其它方法"></a>request获取请求相关的其它方法</h2><ul><li><p>int getContentLength()：获取请求正文的字节数，GET请求没有正文，没有正文返回-1；</p></li><li><p><strong><code>String getContentType()</code></strong>：获取请求类型，如果请求是GET，那么这个方法返回null；如果是POST请求，那么默认为application/x-www-form-urlencoded（理解为字符串类型），其它类型以后再学；</p></li><li><p>String getMethod()：返回请求方法，例如：GET</p></li><li><p>Locale getLocale()：返回当前客户端浏览器支持的Locale。</p></li><li><p>java.util.Locale表示国家和言语，这个东西在国际化中很有用；</p></li><li><p><strong><code>String getCharacterEncoding()</code></strong>：获取请求编码，如果没有<br>setCharacterEncoding()，那么返回null。表示使用ISO-8859-1编码；</p></li><li><p>void setCharacterEncoding(String code)：设置请求编码，只对正文有效！注意，对于GET而言，没有正文！！！所以此方法只能对POST请求中的参数有效！</p></li><li><p>String getContextPath()：返回上下文路径，例如：/项目名称</p></li><li><p>String getQueryString()：返回请求URL中的参数，例如：name=zhangSan</p></li><li><p>String getRequestURI()：返回请求URI路径，例如：/hello/oneServlet</p></li><li><p>StringBuffer getRequestURL()：返回请求URL路径，例如：<a href="http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；" target="_blank" rel="noopener">http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；</a></p></li><li><p><strong><code>String getServletPath()</code></strong>：返回Servlet路径，例如：/oneServlet</p></li><li><p>String getRemoteAddr()：返回当前客户端的IP地址；</p></li><li><p>String getRemoteHost()：返回当前客户端的主机名，但这个方法的实现还是获取IP地址；</p></li><li><p>int getRemotePort()：返回客户端的端口号，每次请求都会变；</p></li><li><p>String getSchema()：返回请求协议，例如：http；</p></li><li><p>String getServerName()：返回主机名，例如：localhost</p></li><li><p>int getServerPort()：返回服务器端口号，例如：80</p><p>url分段 获取API 可看此图<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/202101100115588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="HttpServletRequest获取参数-精通"><a href="#HttpServletRequest获取参数-精通" class="headerlink" title="HttpServletRequest获取参数(精通)"></a>HttpServletRequest获取参数(精通)</h1><p>HTTP请求方法不只是<strong>GET和POST</strong>，还有其他的方法，但基本上用不上。这里只是简单介绍一下。你自己心里有个数，HTTP请求除了GET和POST之外还有别的就行了。</p><h2 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h2><p>有POST和GET 两种。  HttpServlet 下，的doGET和doPOST方法，可以互掉用比如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    doGet(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HttpServletRequest获取参数方法"><a href="#HttpServletRequest获取参数方法" class="headerlink" title="HttpServletRequest获取参数方法"></a>HttpServletRequest获取参数方法</h2><p>可以使用HttpServletRequest获取客户端的请求参数，相关方法如下：</p><ul><li><strong><code>String getParameter(String name)</code></strong>：通过指定名称获取参数值；</li><li><strong><code>String[] getParameterValues(String name)</code></strong>：通过指定名称获取参数值数组，有可能一个名字对应多个值，例如表单中的多个复选框使用相同的name时；</li><li><strong><code>Enumeration getParameterNames()</code></strong>：获取所有参数的名字；</li><li><strong><code>Map getParameterMap()</code></strong>:获取所有参数对应的Map，其中key为参数名，value为参数值。</li></ul><h3 id="单值参数的接收"><a href="#单值参数的接收" class="headerlink" title="单值参数的接收"></a>单值参数的接收</h3><p>单值参数包括单选，单值下拉框，文本，隐藏域。无论是GET还是POST，获取参数的方法是相同的。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String username = req.getParameter(“username”);</span><br></pre></td></tr></table></figure><p>案例：实现从前端传递表单，后台拿到表单数据并打印<br>前台页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前台页面:  RES1 表示当前路径下调用 该Servlet文件 RES1</span></span><br><span class="line">    &lt;form action=<span class="string">"RES1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"用户名"</span>&gt; &lt;br&gt;</span><br><span class="line">        密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"密码"</span>&gt; &lt;br&gt;</span><br><span class="line">        爱好:&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"java"</span>&gt;java</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c"</span>&gt;c</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c++"</span>&gt;c++</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>后台接收:（Servlet RES1内）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过请求对象获取单个参数</span></span><br><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//他只会获得第一个like </span></span><br><span class="line">String like = req.getParameter(<span class="string">"like"</span>);</span><br></pre></td></tr></table></figure><h3 id="多值参数接收"><a href="#多值参数接收" class="headerlink" title="多值参数接收"></a>多值参数接收</h3><p>像复选框这种，上面单值参数不能满足。所以必须使用多值参数。采用的方法为<strong><code>String[] getParameterValues(String name)</code></strong><br>前台页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前台页面:  RES1 表示当前路径下调用 该Servlet文件 RES1</span></span><br><span class="line">    &lt;form action=<span class="string">"RES1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"用户名"</span>&gt; &lt;br&gt;</span><br><span class="line">        密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"密码"</span>&gt; &lt;br&gt;</span><br><span class="line">        爱好:&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"java"</span>&gt;java</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c"</span>&gt;c</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c++"</span>&gt;c++</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>后台接收:（Servlet RES1内）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] likes = req.getParameterValues(<span class="string">"like"</span>);</span><br><span class="line">System.out.println(Arrays.toString(likes));</span><br></pre></td></tr></table></figure><h3 id="我不知道name是啥啊-咋办呢？-获取前台传递的所有键值和值"><a href="#我不知道name是啥啊-咋办呢？-获取前台传递的所有键值和值" class="headerlink" title="我不知道name是啥啊 咋办呢？ 获取前台传递的所有键值和值"></a>我不知道name是啥啊 咋办呢？ 获取前台传递的所有键值和值</h3><p> <strong><code>Enumeration getParameterNames()</code></strong>：获取所有参数的名字；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line"><span class="keyword">while</span> ((names.hasMoreElements()))&#123;</span><br><span class="line">    String name = names.nextElement();</span><br><span class="line">    String[] values = req.getParameterValues(name);</span><br><span class="line">    System.out.println(name+<span class="string">":"</span>+Arrays.toString(values));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有参数-键-和值对应的map-读出"><a href="#所有参数-键-和值对应的map-读出" class="headerlink" title="所有参数(键)和值对应的map 读出"></a>所有参数(键)和值对应的map 读出</h3><p><strong><code>Map getParameterMap()</code></strong>:获取所有参数对应的Map，其中key为参数名，value为参数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; parameterMap =req.getParameterMap();</span><br><span class="line"><span class="comment">//遍历Map  keySet() 方法是用来获取包含在这个哈希表的键的Set视图 相当于就是每个键+值 一个组</span></span><br><span class="line">Set&lt;String&gt; keyset = parameterMap.keySet();</span><br><span class="line"><span class="comment">//循环每个 hashMAP组 通过键得到对应的值（存成数组了）</span></span><br><span class="line"><span class="keyword">for</span> (String key : keyset)&#123;</span><br><span class="line">    System.out.println(key +<span class="string">":"</span>+Arrays.toString(parameterMap.get(key)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpServletRequest的获得中文乱码处理-熟练"><a href="#HttpServletRequest的获得中文乱码处理-熟练" class="headerlink" title="HttpServletRequest的获得中文乱码处理(熟练)"></a>HttpServletRequest的获得中文乱码处理(熟练)</h1><p>Request接收参数时有get和post两种请求方式，但是处理中文的编码却不一样，我们在做项目时会全站都采用统一的编码，最常用的就是UTF-8，在UTF-8编码的项目中的乱码处理方法如下:</p><h2 id="Post请求中文乱码"><a href="#Post请求中文乱码" class="headerlink" title="Post请求中文乱码"></a>Post请求中文乱码</h2><p>我们知道，请求信息中，只有POST存在正文，所谓POST参数编码就是就是请求正文的编码。默认情况下，使用<strong><code>getParameter()</code></strong>获取POST请求参数时，使用的是ISO-8859-1编码。<br>为什么会出现乱码？本来是使用UTF-8编码的，但错误的使用了ISO-8859-1编码。 即编码不一致</p><h3 id="第一种方法，针对字符串本身进行手动转码"><a href="#第一种方法，针对字符串本身进行手动转码" class="headerlink" title="第一种方法，针对字符串本身进行手动转码:"></a>第一种方法，针对字符串本身进行手动转码:</h3><p>但这个非常的繁琐，那不是每一个都要 进行转换解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line"><span class="comment">//转化编码解码的方式进行接收参数的乱码处理</span></span><br><span class="line">username = <span class="keyword">new</span> String(username.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(<span class="string">"username:"</span>+username);</span><br></pre></td></tr></table></figure><h3 id="JAVAWEB使用的-第二种方法-直接设置request的编码格式"><a href="#JAVAWEB使用的-第二种方法-直接设置request的编码格式" class="headerlink" title="JAVAWEB使用的 第二种方法,直接设置request的编码格式:"></a>JAVAWEB使用的 第二种方法,直接设置request的编码格式:</h3><p>request的<strong>setCharacterEncodng()</strong>可以设置编码，当然这必须在调用所有的<strong>getParameter()</strong>方法之前调用request的setCharacterEncodng()方法来设置编码，这样，就不会使用ISO解读字节串了，而是使用你给定的编码来解读。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">String name = req.getParameter(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name);</span><br></pre></td></tr></table></figure><p><strong>对于每个请求，只需要调用request的setCharacterEncodng()一次</strong>，然后所有getParameter()都会使用这个编码来解读参数。但要注意，只对请求正文有效，即POST参数。<br><strong>该方法 必须放在获取参数值之前</strong></p><h2 id="Get请求中文乱码"><a href="#Get请求中文乱码" class="headerlink" title="Get请求中文乱码"></a>Get请求中文乱码</h2><p>Get请求是讲参数放在<strong>URL的queryString</strong>中进行提交,<strong>故此不存在请求体,所以上面处理post请求乱码的方法不再生效.</strong></p><h3 id="第一种方式-同样针对字符串进行单独解码"><a href="#第一种方式-同样针对字符串进行单独解码" class="headerlink" title="第一种方式,同样针对字符串进行单独解码"></a>第一种方式,同样针对字符串进行单独解码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line"><span class="comment">//转化编码解码的方式进行接收参数的乱码处理</span></span><br><span class="line">username = <span class="keyword">new</span> String(username.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(<span class="string">"username:"</span>+username);</span><br></pre></td></tr></table></figure><h3 id="第二种方法-通过设置服务器配置（默认，除非是7版本）"><a href="#第二种方法-通过设置服务器配置（默认，除非是7版本）" class="headerlink" title="第二种方法 通过设置服务器配置（默认，除非是7版本）"></a>第二种方法 通过设置服务器配置（默认，除非是7版本）</h3><p>通过设置服务器配置来让get请求支持中文,例如我们使用tomcat服务器,则设置/conf/server.xml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">              connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">              redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"UTF-8"</span>/&gt;</span><br></pre></td></tr></table></figure><p>一旦设置了这个属性，那么对于GET参数就直接是UTF-8编码的了。但是，<Connector>元素来说，对整个Tomcat都是有效的！<strong>不过，不建议使用get请求传递中文参数</strong><br>另外，<strong>Tomcat8.5及以上版本,无需进行设置,即可直接支持URL传递中文;</strong></p><h2 id="HttpServletRequest请求转发（相当于逻辑处理后-页面的跳转，或者转其他的Servlet进行后续逻辑处理）"><a href="#HttpServletRequest请求转发（相当于逻辑处理后-页面的跳转，或者转其他的Servlet进行后续逻辑处理）" class="headerlink" title="HttpServletRequest请求转发（相当于逻辑处理后 页面的跳转，或者转其他的Servlet进行后续逻辑处理）"></a>HttpServletRequest请求转发（相当于逻辑处理后 页面的跳转，或者转其他的Servlet进行后续逻辑处理）</h2><p>在Servlet中请求转发是大量要使用的，因为当我们访问一个Servlet的时候通常会执行一些后台的业务逻辑，然后跳转到一个结果页面，那么跳转到结果页面的这个过程就是请求转发。<strong>这么做的优点是可以隐藏，文件的目录结构不在url中显示。</strong></p><h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><blockquote><p><strong>举个例子我们做登录的功能。</strong><br>我们填写用户名密码然后提交到一个负责登录的Servlet，Servlet为我们做用户名和密码的校验，如果我们都正确的话，我们就要跳转到登录的提示页面，如果错误就要跳转到登录失败的页面。<br>Request的请求转发也可以叫做服务器端的跳转，虽然有页面的跳转但是我们会发现地址栏是不会有变化的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用request进行请求转发  forward 意思为转发 转发了request和response</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"html/Dispatcher.html"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure><h3 id="跳转到其他Servlet"><a href="#跳转到其他Servlet" class="headerlink" title="跳转到其他Servlet"></a>跳转到其他Servlet</h3><p>DES2 为另一个 Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用request进行请求转发  forward 意思为转发 转发了request和response</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"DES2"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure><h2 id="request作用域"><a href="#request作用域" class="headerlink" title="request作用域"></a>request作用域</h2><p>之前提及过ServletContext的概念，它也是一个域的对象，它的范围非常大，是指定项目所有Servlet的公共的对象，随着服务器的启动而产生，服务器的停止而销毁，那么request的也是域对象，它的作用范围小的多，它的范围只在一次请求响应范围之内，每一个线程的请求都会新产生一个HttpServletRequest和HttpServletResponse的对象。</p><ul><li>我们可以给request来设置当前域中的属性值，在该域之内（当前请求完成之前）都能获得到该属性值。</li><li>req.setAttribute(“name”, “txjava”);<br>req.getAttribute(“name”);</li></ul><p>案例：从一个Servlet中存入参数，另一个Servlet获取显示<br>第一个Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request作用域内存入数据</span></span><br><span class="line">req.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">req.getRequestDispatcher(<span class="string">"RES2"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure><p>第二个Servlet  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 request作用域内获取数据</span></span><br><span class="line">Object username = req.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line">System.out.println(<span class="string">"这是ServletRES2!!!"</span>);</span><br><span class="line">req.getRequestDispatcher(<span class="string">"html/Dispatcher.html"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><h2 id="HttpServletResponse-熟练"><a href="#HttpServletResponse-熟练" class="headerlink" title="HttpServletResponse(熟练)"></a>HttpServletResponse(熟练)</h2><ul><li>request是请求对象，而response是响应对象。</li><li>response对象用于响应client请求，向客户输出信息。</li><li>他封装了JSP产生的响应，并发送到client以响应client请求。</li></ul><h3 id="HttpServletResponse功能介绍"><a href="#HttpServletResponse功能介绍" class="headerlink" title="HttpServletResponse功能介绍"></a>HttpServletResponse功能介绍</h3><p>response对象的功能分为以下四种：</p><ul><li>设置响应头信息；addHeader(“reFresh”, “5;URL=xxxx”);</li><li>发送状态码；sendError(404);</li><li>设置响应正文；getWriter().print(“fdsfdsa”);</li><li>重定向：sendRedirect(“path”);</li></ul><h3 id="设置状态码和其他方法"><a href="#设置状态码和其他方法" class="headerlink" title="设置状态码和其他方法"></a>设置状态码和其他方法</h3><ul><li>response.setContentType(“text/html;charset=utf-8”)：设置响应类型为html，编码为utf-8，处理相应页面文本显示的乱码；</li><li>response.setCharacterEncoding(“utf-8”)：如果响应类型为文本，那么就需要设置文本的编码类型，然后浏览器使用这个编码来解读文本。注意，如果没有设置contentType，那么浏览器会认为contentType为text/html，如果没设置编码，那么默认为ISO-8859-1编码。所以以上两点在使用response返回结果之前必须设置。</li><li>response.setStatus(200)：设置状态码；</li><li>response.sendError(404, “您要查找的资源不存在”)：当发送错误状态码时，Tomcat会跳转到固定的错误页面去，但可以显示错误信息。</li></ul><h3 id="设置响应头信息"><a href="#设置响应头信息" class="headerlink" title="设置响应头信息"></a>设置响应头信息</h3><ul><li><p><strong><code>response.setHeader(“contentType”, “text/html;charset=utf-8”)</code></strong>：与setContentType()方法的功能相同。setContentType()方法属于便捷方法；</p></li><li><p>刷新（定时重定向）：<strong><code>response.setHeader(&quot;Refresh&quot;,&quot;5; URL=http://www.baidu.com&quot;)</code></strong>：5秒后自动跳转到百度主页。</p><p>JAVAWEB_HttpServletResponse</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过响应对象设置响应头信息</span></span><br><span class="line">resp.addHeader(<span class="string">"teacher"</span>,<span class="string">"ly"</span>);</span><br><span class="line"><span class="comment">// 通过响应对象设置响应头信息，5s后跳转到http://www.baidu.com</span></span><br><span class="line">resp.addHeader(<span class="string">"reFresh"</span>,<span class="string">"5,url=http://www.baidu.com"</span>);</span><br><span class="line"><span class="comment">// 发送状态码</span></span><br><span class="line">resp.sendError(<span class="number">404</span>);</span><br><span class="line"><span class="comment">// 通过相应对象设置相应的内容</span></span><br><span class="line">resp.getWriter().write(<span class="string">"success!!"</span>);</span><br></pre></td></tr></table></figure><p>可以在，检查审视中 Response Headers 中，可以看到里面的 teacher : ly<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210110235837726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="Response重定向"><a href="#Response重定向" class="headerlink" title="Response重定向"></a>Response重定向</h3><p>使用response对象的sendRedirect()方法能够将网页重定向到还有一个页面。重定向支持将地址重定向到不同的主机上，这一点与转发不同。<strong>在client浏览器上将会得到跳转后的地址，并又一次发送请求链接</strong>（即两次）；用户能够从浏览器的地址栏中看到跳转后的地址；<strong>重定向操作后，request中的属性将会所有失效，并开始一个新的request对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用响应对象进行请求的重定向</span></span><br><span class="line">resp.sendRedirect(<span class="string">"Form.html"</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210111172409609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>他是分两次访问的。第一次回复后，读取回复头的信息中的Location。再进行第二次的回复。（跳转网页或者是其他的Servlet处理）<br>注意</p><ul><li>重定向操作后，request中的属性将会所有失效，并开始一个新的request对象</li><li>就是说比如Servlet1的赋给的参数与值，并不能共享到Servlet2中。 要不你用ServletContext来做</li><li><strong>其一般用来 跳转外部网址 比如直接跳百度</strong></li></ul><p><strong>请求转发与重定向的区别</strong></p><ol><li>请求转发指的是服务器内部网页的跳转，或者Servlet逻辑的递进交付。</li><li>重定向可以访问外部地址，比如直接跳百度</li></ol><h2 id="Response中文-乱码问题"><a href="#Response中文-乱码问题" class="headerlink" title="Response中文 乱码问题"></a>Response中文 乱码问题</h2><p>当我们使用response向页面返回带有中文的值时,可能会出现中文乱码,需要进行如下设置:</p><ul><li>设置响应类为html，编码为utf-8，处理相应页面文本显示的乱码；其实还有 json响应类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure><ul><li>如果响应类型为文本，那么就需要设置文本的编码类型，然后浏览器使用这个编码来解读文本。注意，如果没有设置contentType，那么浏览器会认为contentType为text/html，如果没设置编码，会默认为ISO-8859-1编码。所以以上两点在使用response返回结果之前必须设置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p>两者中其实有一个就可以生效。不过最好都设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">"张三"</span>);</span><br></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="1-请求转发和重定向的区别"><a href="#1-请求转发和重定向的区别" class="headerlink" title="1.请求转发和重定向的区别"></a>1.请求转发和重定向的区别</h2><h3 id="1-1-处理流程的区别"><a href="#1-1-处理流程的区别" class="headerlink" title="1.1 处理流程的区别"></a>1.1 处理流程的区别</h3><p>请求转发:</p><ol><li>客户端发送请求，Servlet做出业务逻辑处理。</li><li>Servlet调用forword()方法，服务器Servlet把<strong>目标资源返回给客户端浏览器</strong>。 <strong>一次性</strong></li></ol><p>重定向:</p><ul><li>客户端发送请求，Servlet做出业务逻辑处理。</li><li>Servlet调用response.sendReadirect()方法，把要<strong>访问的目标资源作为response响应头信息发给客户端浏览器</strong>。例如，在访问location中的内容。 <strong>二次型</strong></li><li>客户端浏览器重新访问服务器资源xxx.jsp，服务器再次对客户端浏览器做出响应。</li></ul><h3 id="1-2-路径"><a href="#1-2-路径" class="headerlink" title="1.2 路径"></a>1.2 路径</h3><ul><li>使用<strong>相对路径</strong>在重定向和转发中没有区别</li><li>重定向和请求转发使用<strong>绝对路径</strong>时，<strong>根/路径代表了不同含义</strong></li><li><ul><li>重定向resp.sendRedirect(“xxx”)是服务器向客户端发送一个请求头信息，由客户端再请求一次服务器。<strong>/指的Tomcat的根目录</strong>,写绝对路径应该写成”<strong>/当前Web程序根名称/资源名</strong>“ 。如”/WebModule/login.jsp”,”<strong>/bbs/servlet/LoginServlet</strong>“</li><li><ul><li>请求转发是在服务器内部进行的，<strong>写绝对路径/开头指的是当前的Web应用程序</strong>。绝对路径写法就是”/login.jsp”或”<strong>/servlet/LoginServlet</strong>“。</li></ul></li><li>总结：以上要注意是区分是从服务器外的请求，还在是内部转发，<strong>从服务器外的请求，从Tomcat根写起(就是要包括当前Web的根)</strong>；是服务器内部的转发，很简单了，<strong>因为在当前服务器内，/写起指的就是当前Web的根目录</strong>。</li></ul></li></ul><h3 id="1-3-其他区别"><a href="#1-3-其他区别" class="headerlink" title="1.3 其他区别"></a>1.3 其他区别</h3><p>请求转发</p><ul><li><p>req.getRequestDispatcher()是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；<strong>服务器内部转发，整个过程处于同一个请求当中</strong>。</p></li><li><ul><li>forward()更加高效，在可以满足需要时，尽量使用RequestDispatcher.forward()方法。</li></ul></li><li><ul><li>RequestDispatcher是通过调用HttpServletRequest对象的getRequestDispatcher()方法得到的，是属于请求对象的方法。</li></ul><p>重定位</p></li><li><p>resp.sendRedirect()则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。不在同一个请求。重定向，实际上客户端会向服务器端发送两个请求。</p></li><li><ul><li>sendRedirect()是HttpServletResponse对象的方法，即响应对象的方法，既然调用了响应对象的方法，那就表明整个请求过程已经结束了，服务器开始向客户端返回执行的结果。</li></ul></li><li><p><strong>所以转发中数据的存取可以用request作用域：req.setAttribute()； req.getAttribute()，重定向是取不到request中的数据的。只能用session。</strong></p></li><li><p><strong>重定向可以跨域访问，而转发是在web服务器内部进行的，不能跨域访问。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC](请求对象和响应对象 request and response )&lt;br&gt;request是客户端（浏览器）请求服务器，response是服务器返回给客户端（浏览器）&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Servlet - HttpServlet （2）</title>
    <link href="http://yoursite.com/2021/01/09/Servlet%20-%20HttpServlet%20%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2021/01/09/Servlet%20-%20HttpServlet%20%EF%BC%882%EF%BC%89/</id>
    <published>2021-01-09T09:18:31.359Z</published>
    <updated>2021-01-09T09:18:38.507Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="HttpServlet">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>了解Servlet概念和JavaWeb的三大组件都包含哪些组件;</li><li>创建一个Servlet实现javax.servlet.Servlet接口,并自行验证Servlet的生命周期;</li><li>创建一个Servlet继承javax.servlet.http.HttpServlet类,提供一个初始化属性,并在Servlet初始化时打印它;</li><li>自己实现统计网址访问人次的功能;</li><li>熟练掌握两道面试题<h1 id="HttpServlet介绍"><a href="#HttpServlet介绍" class="headerlink" title="HttpServlet介绍"></a>HttpServlet介绍</h1><strong>因为现在我们的请求都是基于HTTP协议的</strong>，所以我们应该<strong>专门为HTTP请求写一个Servlet做为通用父类。</strong><br>我们只需要创建一个HttpServlet的继承即可。其内部关系结构如图所示<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108135020440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>由上图我们可以看出,以后再写<strong>Servlet 可以直接继承HttpServlet</strong><br><strong>Servlet            一个标准<br>GenericServlet     是Servlet接口子类<br>HttpServlet        是GenericServlet子类，一个专门处理Http请求的Servlet</strong></li></ul><h1 id="Http请求方法"><a href="#Http请求方法" class="headerlink" title="Http请求方法"></a>Http请求方法</h1><p>HTTP请求方法不只是<strong>GET和POST</strong>，还有其他的方法，但基本上用不上。这里只是简单介绍一下。你自己心里有个数，HTTP请求除了GET和POST之外还有别的就行了。</p><ol><li><strong>GET            通过请求URI得到资源</strong>   实现的方法就是 doGet</li><li><strong>POST        用于添加新的内容</strong>   实现的方法就是 doPost</li><li>PUT            用于修改某个内容</li><li>DELETE        删除某个内容</li><li>CONNECT    用于代理进行传输，如使用SSL</li><li>OPTIONS    询问可以执行哪些方法</li><li>PATCH        部分文档更改</li><li>RACE        用于远程诊断服务器</li><li>HEAD        类似于GET, 但是不返回body信息，用于检查对象是否存在，以及得到对象的元数据</li><li>TRACE        用于远程诊断服务器</li></ol><h1 id="创建HttpServlet"><a href="#创建HttpServlet" class="headerlink" title="创建HttpServlet"></a>创建HttpServlet</h1><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><ol><li>创建一个类继承HttpServlet。并实现方法，例如实现GET就是doGet方法。输入doget自己就可以联想出来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用了doGET方法"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>web.xml配置 Servlet 路径信息。同上节<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web.xml</span></span><br><span class="line">    &lt;!--定义一个Servlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--名称--&gt;</span><br><span class="line">        &lt;servlet-name&gt;MyHttpServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--对应的<span class="class"><span class="keyword">class</span>文件--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_servlet</span>.<span class="title">MyHttpServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--定义一个<span class="title">Servlet</span>的路径映射--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;!--对应的名称--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">MyHttpServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;!--该<span class="title">Servlet</span>处理的请求路径--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">myHttphello</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第二种方法-（只找到2017版本的-2020版本未知）"><a href="#第二种方法-（只找到2017版本的-2020版本未知）" class="headerlink" title="第二种方法  （只找到2017版本的 2020版本未知）"></a>第二种方法  （只找到2017版本的 2020版本未知）</h2></li><li>IDEA直接创建servlet<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108152824741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>填写一下 Servlet的名字<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108152911175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>创建完成,自己填写映射路径 urlPatterns<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108153040578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="Servlet创建顺序"><a href="#Servlet创建顺序" class="headerlink" title="Servlet创建顺序"></a>Servlet创建顺序</h2>之前都是你在客户端请求，初始化Servlet。 需要一定的时间，所以最爱的办法就是在TomCat启动的时候就初始化了 所有的Servlet。<br>有些Servlet需要在Tomcat启动时就被创建，而不是第一次访问时被创建，那么可以在web.xml文件中配置&lt; servlet &gt;元素</li><li>在&lt; servlet &gt;元素中添加子元素&lt; load-on-startup &gt;元素<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">tx</span>.<span class="title">servlet</span>.<span class="title">Servlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--由参数控制启动时机--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;1&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>&lt; load-on-startup &gt;1&lt; /load-on-startup &gt;中间的值1     <strong>当值为0或者大于0</strong>时，表示容器在应用启动时就加载这个servlet； 而这个值 表示各自 创建Servlet实例对象（初始化的顺序）</li><li>对于刚才的HttpServlet 需要自己重写一个 init方法。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">    System.out.println(<span class="string">"你是第2个被初始化的"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ServletConfig（熟练）"><a href="#ServletConfig（熟练）" class="headerlink" title="ServletConfig（熟练）"></a>ServletConfig（熟练）</h1><ul><li><p>. ServletConfig对象对应web.xml文件中的&lt; servlet &gt;元素。**例如你想获取当前Servlet在web.xml文件中的配置名，那么可以使用servletConfig.getServletName()方法获取！</p></li><li><p>你不能自己去创建ServletConfig对象，Servlet的init()方法的参数就是ServletConfig类型的。<strong>Tomcat在调用init()方法时，会传递ServletConfig对象。</strong></p><h2 id="如何设定初始参数，并操作"><a href="#如何设定初始参数，并操作" class="headerlink" title="如何设定初始参数，并操作"></a>如何设定初始参数，并操作</h2></li></ul><ol><li>在对应的Servlet标签下，设定init初始化参数，使用的标签为 <code>&lt;init-param&gt;</code>。并且 <code>&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</code>必须再初始化数据之后。</li><li>在对应的Servlet标签下，设定init初始化参数，使用的标签为 <code>&lt;init-param&gt;</code>。并且 <code>&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</code>必须再初始化数据之后。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义一个Servlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;!--名称--&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyHttpServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--对应的<span class="class"><span class="keyword">class</span>文件--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_servlet</span>.<span class="title">MyHttpServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">company</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">txjava</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">chaiquan</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">liyuan</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;2&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果我知道参数键是啥。在对应的servlet Class 文件下 通过<code>ServletConfig</code> 获取<code>servletConfig</code>对象，通过之前设定的参数键得到值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ServletConfig</span></span><br><span class="line">ServletConfig servletConfig = getServletConfig();</span><br><span class="line"><span class="comment">//获取该Servlet的初始化参数</span></span><br><span class="line">String company = servletConfig.getInitParameter(<span class="string">"company"</span>);</span><br><span class="line">System.out.println(company);</span><br><span class="line">String teacher = servletConfig.getInitParameter(<span class="string">"chaiquan"</span>);</span><br><span class="line">System.out.println(teacher);</span><br></pre></td></tr></table></figure></li><li>如果我不知道参数键是啥。也就是我需要全部读取到<strong>枚举集合</strong>中  Enumeration&lt; String &gt;   参数是String类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有初始化参数的枚举集合</span></span><br><span class="line">Enumeration&lt;String&gt; names = servletConfig.getInitParameterNames();</span><br><span class="line"><span class="comment">//遍历枚举</span></span><br><span class="line"><span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">    <span class="comment">//拿到名称</span></span><br><span class="line">    String name = names.nextElement();</span><br><span class="line">    String value = servletConfig.getInitParameter(name);</span><br><span class="line">    System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Servlet路径映射（熟练）"><a href="#Servlet路径映射（熟练）" class="headerlink" title="Servlet路径映射（熟练）"></a>Servlet路径映射（熟练）</h1><h2 id="关于Url-Pattern（即url的Servlet入口地址）的配置："><a href="#关于Url-Pattern（即url的Servlet入口地址）的配置：" class="headerlink" title="关于Url-Pattern（即url的Servlet入口地址）的配置："></a>关于Url-Pattern（即url的Servlet入口地址）的配置：</h2><ol><li>完全路径匹配  以/开头    例如  /aaa   /aaa/bbb  </li><li>目录匹配        以/开头       例如  /aaa/*   /*</li><li>扩展名匹配    不能以/开头   例如  *.do   *.action  ….</li></ol><p> <strong>优先级： 完全路径匹配 &gt; 目录匹配 &gt; 扩展名匹配</strong><br> <strong>经典错误：  /*.do</strong>  这玩意不存在的  注意</p><h1 id="ServletContext-熟练"><a href="#ServletContext-熟练" class="headerlink" title="ServletContext(熟练)"></a>ServletContext(熟练)</h1><h2 id="ServletContext介绍"><a href="#ServletContext介绍" class="headerlink" title="ServletContext介绍"></a>ServletContext介绍</h2><blockquote><p>ServletContext是一个全局的储存信息的空间，服务器开始，其就存在，服务器关闭，其才释放。<strong>request，一个用户可有多个；session，一个用户一个；**</strong>而servletContext，所有用户共用一个<strong>。所以，为了节省空间，提高效率，ServletContext中，要放必须的、重要的、</strong>所有用户需要共享的线程又是安全的一些信息**。</p></blockquote><p>说白了，就是 一个web项目内，一些Servlet可以共同共享访问的内容 放在ServletContext中。 举个实际的例子，一个网站n多人访问，请求的内容可能是一致的。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108223708569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。</li><li>由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，<strong>因此Servlet对象之间可以通过ServletContext对象来实现通讯</strong>。ServletContext对象通常也被称之为context域对象。</li><li>查看ServletContext API文档，了解ServletContext对象的功能。其主要的功能方法包括</li></ul><table><thead><tr><th>ServletContext API</th><th></th></tr></thead><tbody><tr><td>Object</td><td><strong>getAttribute(String name)</strong>  取键值对</td></tr><tr><td>String</td><td>getContextPath()</td></tr><tr><td>String</td><td>getInitParameter(String name)</td></tr><tr><td>String</td><td>getRealPath(String path)</td></tr><tr><td>void</td><td><strong>setAttribute(String name, Object object)</strong>  设置键值对</td></tr><tr><td>InputStream</td><td>getResourceAsStream(String path)</td></tr></tbody></table><h3 id="举个例子实现两个Servelt对象之间的-通讯。一个实现放置键值对，一个取键值"><a href="#举个例子实现两个Servelt对象之间的-通讯。一个实现放置键值对，一个取键值" class="headerlink" title="举个例子实现两个Servelt对象之间的 通讯。一个实现放置键值对，一个取键值"></a>举个例子实现两个Servelt对象之间的 通讯。一个实现放置键值对，一个取键值</h3><p>设置键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServleContext对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//存入内存 设置键值对</span></span><br><span class="line">        context.setAttribute(<span class="string">"company"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取键值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServleContext对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//存入内存 设置键值对</span></span><br><span class="line">        Object company = context.getAttribute(<span class="string">"company"</span>);</span><br><span class="line">        System.out.println(company);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：统计站点访问次数 （注意版本区别，返回是resp）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServleContext对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//num 表示当前访问的人数  如果为null则初始化并加1</span></span><br><span class="line">        Integer num = (Integer)(context.getAttribute(<span class="string">"num"</span>));</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span>)</span><br><span class="line">            num =<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//把num加1，然后存入键值对  实现刷新一次 就+1 由于是共享的 两个不同的浏览器看到的会是同步的效果</span></span><br><span class="line">        context.setAttribute(<span class="string">"num"</span>,++num);</span><br><span class="line">        <span class="comment">//向客户端返回相应的内容</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"GBK"</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">"当前网站访问人次:"</span>+num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="通过ServletContext对象读取资源文件"><a href="#通过ServletContext对象读取资源文件" class="headerlink" title="通过ServletContext对象读取资源文件"></a>通过ServletContext对象读取资源文件</h3><h4 id="方法一：通过ServletContext-getRealPath-方法-（注意druid-properties-要放在web这个文件下）"><a href="#方法一：通过ServletContext-getRealPath-方法-（注意druid-properties-要放在web这个文件下）" class="headerlink" title="方法一：通过ServletContext.getRealPath()方法;（注意druid.properties 要放在web这个文件下）"></a>方法一：通过ServletContext.getRealPath()方法;（注意druid.properties 要放在web这个文件下）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String path = servletContext.getRealPath(<span class="string">"druid.properties"</span>);</span><br><span class="line">System.out.println(path);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">    p.load(is);</span><br><span class="line">    String username = p.getProperty(<span class="string">"username"</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：使用servletContext-getResourceAsStream-方法-（相对地址获取）放src下即可"><a href="#方法二：使用servletContext-getResourceAsStream-方法-（相对地址获取）放src下即可" class="headerlink" title="方法二：使用servletContext.getResourceAsStream()方法;（相对地址获取）放src下即可"></a>方法二：使用servletContext.getResourceAsStream()方法;（相对地址获取）放src下即可</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获得到ServletContext对象</span></span><br><span class="line">ServletContext servletContext = getServletContext();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获得工程目录web下文件的流第一个/代表项目的根目录</span></span><br><span class="line">    InputStream is = servletContext.getResourceAsStream(<span class="string">"/WEB-INF/druid.properties"</span>);</span><br><span class="line">    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">    p.load(is);</span><br><span class="line">    String username = p.getProperty(<span class="string">"username"</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法三：使用getClass-getClassLoader-getResourceAsStream-方法-（注意druid-properties-要放在该Class的上一层文件目录下）"><a href="#方法三：使用getClass-getClassLoader-getResourceAsStream-方法-（注意druid-properties-要放在该Class的上一层文件目录下）" class="headerlink" title="方法三：使用getClass().getClassLoader().getResourceAsStream()方法;（注意druid.properties 要放在该Class的上一层文件目录下）"></a>方法三：使用getClass().getClassLoader().getResourceAsStream()方法;（注意druid.properties 要放在该Class的上一层文件目录下）</h4><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210109171444633.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用类加载器的方式来读取classpath下的资源文件，好处不依赖与ServletContext，任何类都可以获得classpath下的资源文件，</span></span><br><span class="line"><span class="comment">//不需要再自己指定/WEB-INF/classes</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>);</span><br><span class="line">        properties.load(is);</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"username"</span>));</span><br><span class="line">       <span class="comment">//这个也行 统一一下 System.out.println(properties.get("username"));</span></span><br></pre></td></tr></table></figure><h1 id="面试有关"><a href="#面试有关" class="headerlink" title="面试有关"></a>面试有关</h1><h2 id="单例的Servlet"><a href="#单例的Servlet" class="headerlink" title="单例的Servlet"></a>单例的Servlet</h2><p>因为Servlet实例是由Tomcat来创建的，但Tomcat只会创建一个Servlet实例，所以<strong>Servlet就是单例的</strong>！这与我们自己写的单例模式不太一样。因为这种单例是通过容器tomcat来管理而实现的！</p><p>一个实例需要在同一个时间点上处理多个请求！<br>同步就是安全，但效率太低！</p><ul><li><strong>Servlet是线程不安全的！</strong></li><li>不写属性；</li><li>不写可以存储数据的属性<h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2></li><li>Servlet 通过调用 init () 方法进行初始化。</li><li>Servlet 调用 service() 方法来处理客户端的请求。</li><li>Servlet 通过调用 destroy() 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p><br><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;HttpServlet&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;了解Servlet概念和JavaWe
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Servlet概述与使用（1）</title>
    <link href="http://yoursite.com/2021/01/08/Servlet%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2021/01/08/Servlet%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%881%EF%BC%89/</id>
    <published>2021-01-08T05:43:15.340Z</published>
    <updated>2021-01-08T05:42:54.501Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Servlet概述与使用">TOC</a></p><h1 id="Servlet概述"><a href="#Servlet概述" class="headerlink" title="Servlet概述"></a>Servlet概述</h1><h2 id="JavaWeb的三大组件"><a href="#JavaWeb的三大组件" class="headerlink" title="JavaWeb的三大组件"></a>JavaWeb的三大组件</h2><p>JavaWeb的三大组件：Servlet、Filiter（过滤器）、Listener（观察者模式、监听器）</p><h2 id="Servlet的作用"><a href="#Servlet的作用" class="headerlink" title="Servlet的作用"></a>Servlet的作用</h2><p><strong>Servlet 用于处理用户请求</strong>。 当客户端发出请求后，由Tomcat去找到可以处理这一请求的Servlet 来处理。 </p><ul><li>举个例子，用户发出登录请求，有Servlet组件来处理登录请求。判断是否正确啊或者是不是自动登录等等，在返回给服务器响应给浏览器。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106164835424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Servlet-初始"><a href="#Servlet-初始" class="headerlink" title="Servlet 初始"></a>Servlet 初始</h1><h2 id="Servlet的说明"><a href="#Servlet的说明" class="headerlink" title="Servlet的说明"></a>Servlet的说明</h2><p>servlet 是运行在 Web 服务器中的小型 Java 程序。servlet 通常通过 HTTP（超文本传输协议）接收和响应来自 Web 客户端的请求。也就是说，Servlet是由我们自己来完成的！Servlet一定要实现javax.servlet.Servlet接口，并且还要在web.xml文件中部署！不然Tomcat是找不到我们写的Servlet的。</p><ol><li><p>在src下，创建一个文件夹，例如叫：cn_tx_servlet   在其目录中创建一个class文件MyServlet 。</p></li><li><p>MyServlet 实现 Servlet接口 。实现5个方法，分别为 Servlet生命周期。生命周期要经过以下路径，并且涉及到五种方法：<br>（1）装载Servlet类<br>（2）创建Servlet实例（实例化）<br>（3）通过调用init()方法初始化servlet。 <code>void init(ServletConfig config)方法</code><br>（4）servlet调用service()方法来处理客户端的请求。<code>void service(ServletRequest req, ServletResponse res)</code>   可以在里面写点东西看看是否调用了<br>（5）通过调用destroy()方法终止servlet。<code>public void destroy()</code><br>下面将分别介绍五种方法。</p></li><li><p>public void init(ServletConfig servletConfig)  </p></li></ol><blockquote><p> //当Tomcat创建Servlet实例后，马上调用init()方法。<br>    // 这个方法只在创建后调用一次！用来做Servlet初始化工作！<br>    // 一个Servlet实例只被创建一次，所以init()方法也只被调用一次！</p></blockquote><ol start="2"><li>public void service(ServletRequest servletRequest, ServletResponse servletResponse)</li></ol><blockquote><p>  //Servlet实例在每次处理请求时都调用service()方法。<br>    // 这个方法是在servlet生命周期中被多次调用的唯一方法，同时它也是执行实际任务的主要方法。<br>    // 它服务于来自客户端（浏览器）请求，每当服务器收到请求时都会调用此方法。<br>    // 每当服务器接收到对servlet的请求时，服务器将产生一个新线程并调用服务。<br>    // Service()方法检查HTTP请求类型（GET，POST，PUT，DELETE等），并根据需要调用doGet，doPost，doPut，doDelete等方法。</p></blockquote><ol start="3"><li>public ServletConfig getServletConfig() </li></ol><blockquote><p> //这个方法返回ServletConfig对象，但我们不能自己去创建ServletConfig对象，<br>    // 所以一般我们会在init()方法中把init()方法的参数保存起来，<br>    // 然后再在本方法中返回它。ServletConfig对象对应web.xml中当前Servlet实例的配置信息。<br> 4.  public String getServletInfo()<br> //基本没用，返回有关servlet的信息，如作者，版本和版权。<br> 5. public void destroy()<br>  //当Tomcat要销毁Servlet实例时，会先调用destroy()方法，再销毁它。<br>    // 所谓销毁Servlet，其实就是在Servlet缓存池中把Servlet移除！<br>    // 一旦destroy()方法被调用，servlet容器就不会调用service()方法了。<br>    // 一般只有Tomcat关闭时，才会销毁Servlet实例！<br> 3. 在WEB-INF包下的 web.xml文件中 添加 （<strong>如果Web容器中包含了多个Servlet，特定的HTTP请求该由哪一个Servlet来处理呢？它由Web容器中的web.xml来决定的</strong>。）<br>这边映射的 url为 /hello</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义一个Servlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;!--名称--&gt;</span><br><span class="line">    &lt;servlet-name&gt;myServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--对应的<span class="class"><span class="keyword">class</span>文件--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_servlet</span>.<span class="title">MyServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!--定义一个<span class="title">Servlet</span>的路径映射--&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--对应的名称--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">myServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--该<span class="title">Servlet</span>处理的请求路径--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">hello</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>那JAVAWEB是如何加载url地址运行的呢？</strong>如图所示<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108131819710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例如地址  <a href="http://localhost:8080/JAVA_WEB_ServletDemo1/hello" target="_blank" rel="noopener">http://localhost:8080/JAVA_WEB_ServletDemo1/hello</a>     可以输出Serve方法的内容。  </p><ul><li>其中<a href="http://localhost:8080，为TomCat的环回地址">http://localhost:8080，为TomCat的环回地址</a></li><li>/JAVA_WEB_ServletDemo1 为 TomCat 预定设置的 访问地址（设置方式看上一讲）</li><li>/hello 为设定的  该Servlet处理的请求路径</li></ul><p>复杂的来说具体流程为：</p><blockquote><p>当Tomcat接收到请（<a href="http://localhost:8080/JAVA_WEB_ServletDemo1/hello）后，Tomcat会找到servlet_pro项目中的web.xml文件。" target="_blank" rel="noopener">http://localhost:8080/JAVA_WEB_ServletDemo1/hello）后，Tomcat会找到servlet_pro项目中的web.xml文件。</a><br>然后通过logon这个请求路径，查找处理这个请求的Servlet类型。<br>这刚好与<url-pattern>/hello</url-pattern>匹配，这说明存在一个可以通过这个请求的Servlet。然后再通过<url-pattern>/hello </url-pattern>查找到<servlet-name>hello</servlet-name>，然后再通过<servlet-name>hello </servle-name>查找到<servlet-class>cn_tx_servlet.MyServlet</servlet-class>。这时Tomcat已经得到了一个Servlet类名字（一个字符串而已）。<br>Tomcat通过Servlet类名字去查找内存中是否存在Servlet对象，如果存在，那么就不用再去创建，直接获取这个Servlet实例，调用它的service()方法完成请求！<br>如果这个Servlet不存在，那么Tomcat会通过反射来创建Servlet实例，并把Servlet实例存放到Servlet池中，再去调用Servlet的service方法处理请求。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108131855138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><p>即Servlet的调用顺序，javax.servlet.Servlet接口中，有三个方法说明了Servlet的生命周期。 其背后的操作者当然是 服务器容器 TomCat</p><ol><li>public void init(ServletConfig servletConfig)   先初始化，但其只初始化一次，后续的刷新（访问），<strong>都不会再次初始化。因为其实个单例模式。</strong></li><li>public void service(ServletRequest servletRequest, ServletResponse servletResponse)  每次处理请求时调用service()方法；处理请求的服务，可以多次访问调用</li><li>void destroy()：当Tomcat要销毁Servlet实例时（就是关掉TomCat），先调用destroy()方法。</li><li>Servlet 最后由JVM的垃圾回收器进行垃圾回收</li></ol><h2 id="Servlet注意点"><a href="#Servlet注意点" class="headerlink" title="Servlet注意点"></a>Servlet注意点</h2><ol><li>Servlet对象的实例默认情况下是在浏览器第一次调用servlet时候被创建的</li><li><strong>Servlet的实例不由我们创建，Servlet的方法不由我们来调用，这一切都是由Tomcat来完成</strong>！！！这就是说由<strong>Tomcat来管理Servlet</strong>，而<strong>我们只需要去编写Servlet实现类，并将其部署到web.xml文件中去</strong>！</li><li>再次提醒，只有这三个方法是生命周期中的方法。也就是说，<strong>生命周期方法会被Tomcat在不同的时间点来调用！而其它方法就不会被调用了！！！</strong>如果你在自己写的Servlet中添加了其他方法，那么Tomcat也是不会去调用它们的！但你可以让生命周期方法去调用你自己写的方法就OK了！</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Servlet概述与使用&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Servlet概述&quot;&gt;&lt;a href=&quot;#Servlet概述&quot; class=&quot;headerlink&quot; title=&quot;Servlet概述&quot;&gt;&lt;/a&gt;Servlet概述&lt;/h1&gt;&lt;h2 id
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IDEA部署TomCat搭建WEB项目</title>
    <link href="http://yoursite.com/2021/01/06/IDEA%E9%83%A8%E7%BD%B2TomCat%E6%90%AD%E5%BB%BAWEB%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2021/01/06/IDEA%E9%83%A8%E7%BD%B2TomCat%E6%90%AD%E5%BB%BAWEB%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-01-06T08:33:09.483Z</published>
    <updated>2021-01-06T08:33:16.732Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="TomCat搭建WEB项目">TOC</a></p><h2 id="TomCat-的作用"><a href="#TomCat-的作用" class="headerlink" title="TomCat 的作用"></a>TomCat 的作用</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106160120625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="TomCat-的配置"><a href="#TomCat-的配置" class="headerlink" title="TomCat 的配置"></a>TomCat 的配置</h2><p>官网下载TomCat 9.0 版本。 需要配置JAVA_HOME，环境变量；并配置path 如图<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106142805753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>而后打开 bin文件夹下的 start.up。  出现黑框，并且开始读一串下来就算成功了。打开环回地址：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>    看见TomCat的界面 表明这个服务器已经开启成功了。</p><h2 id="TomCat-构建JAVAWEB项目"><a href="#TomCat-构建JAVAWEB项目" class="headerlink" title="TomCat 构建JAVAWEB项目"></a>TomCat 构建JAVAWEB项目</h2><h3 id="WEB项目部署目录结构"><a href="#WEB项目部署目录结构" class="headerlink" title="WEB项目部署目录结构"></a>WEB项目部署目录结构</h3><p>TomCat文件夹下有一个 <strong>webapps</strong> 的文件目录用于存放JAVA项目。其下面，每个文件夹都是一个独立的项目（其默认有4个项目，都是自带的）其中的ROOT 是我们测试Tomcat时访问的Tomcat 主项目。</p><p>我们构建一个叫<strong>hello</strong>的<strong>WEB</strong>项目</p><ol><li>在<strong>webapps</strong> 下面 创建一个叫hello的文件夹</li><li>在<strong>hello</strong>文件夹下面 要包括 <strong>WEB-INF</strong>文件夹（必须得有，其实受保护目录，里面的东西用户不能直接访问，需要动态页面来访问。<strong>即用户不能通过浏览器地址的形式打开里面的东西</strong>），再创建一个 hello.html 的网页文件</li><li>在<strong>WEB-INF</strong>文件夹下，创建<strong>web.xml</strong>文件（把ROOT下面的web.xml内容复制过来，在删掉不要的留个大框），<strong>classes</strong>文件夹（存放项目所需的class文件）和<strong>lib</strong>文件夹（存放项目所需要的jar文件）</li></ol><p>之后重新启动Tomcat，访问对应的hello.html网页的 浏览器地址为：<a href="http://localhost:8080/hello/hello.html" target="_blank" rel="noopener">http://localhost:8080/hello/hello.html</a></p><h2 id="IDEA-创建一个JAVAWEB项目"><a href="#IDEA-创建一个JAVAWEB项目" class="headerlink" title="IDEA 创建一个JAVAWEB项目"></a>IDEA 创建一个JAVAWEB项目</h2><p>可以把上述的项目hello放到任何目录中，然后通过添加&lt; Context &gt;元素来指定项目的真实位置。在&lt; Host &gt;元素中添加&lt; Context &gt;元素，然后指定&lt; Context &gt;元素的path和docBase属性，其中path指定的为项目虚拟路径，可以随意的给出 例如path=“/h1”  而，docBase指定hello 项目真实存放的路径<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106151835748.png#pic_center" alt="在这里插入图片描述"><br>此时访问 对应的hello.html的 浏览器目的URL为 <a href="http://localhost:8080/h1/hello.html" target="_blank" rel="noopener">http://localhost:8080/h1/hello.html</a></p><p>IDEA创建 JAVAWEB项目（针对2020版本）</p><ol><li>首先先建立一个普通的JAVA项目</li><li>项目右击 ADD framework Support</li><li>勾选Web Application  选择创建web.xml</li><li>点击OK<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106153057691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="IDEA-的JAVAWEB部署到TomCat-中"><a href="#IDEA-的JAVAWEB部署到TomCat-中" class="headerlink" title="IDEA 的JAVAWEB部署到TomCat 中"></a>IDEA 的JAVAWEB部署到TomCat 中</h3></li><li>点击右上角 的 Add Configuration</li><li>选择添加 <strong>Tomcat server  local</strong></li><li>添加 本地的 Tomcat地址。 </li><li>deployment 下 <strong>Application context</strong> 取名随便。 例如取名为 <strong>/txjava_web</strong></li><li>在 idea 的 web目录下 创建一个 <strong>txjava_web.html</strong>的 网页文件</li><li>点击右上角启动服务器。  注意要关闭之前所有的tomcat黑框。一次只能有一个tomcat执行</li><li>可以通过访问<a href="http://localhost:8080/txjava_web/txjava_web.html" target="_blank" rel="noopener">http://localhost:8080/txjava_web/txjava_web.html</a>   来访问对应的网页文件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;TomCat搭建WEB项目&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;TomCat-的作用&quot;&gt;&lt;a href=&quot;#TomCat-的作用&quot; class=&quot;headerlink&quot; title=&quot;TomCat 的作用&quot;&gt;&lt;/a&gt;TomCat 的作用&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JDBC(1)</title>
    <link href="http://yoursite.com/2020/07/09/JDBC(1)/"/>
    <id>http://yoursite.com/2020/07/09/JDBC(1)/</id>
    <published>2020-07-09T06:35:19.074Z</published>
    <updated>2020-07-09T06:35:26.234Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JDBC">TOC</a></p><h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><h2 id="JDBC是神马"><a href="#JDBC是神马" class="headerlink" title="JDBC是神马"></a>JDBC是神马</h2><p>JDBC（Java DataBase Connectivity）就是<strong>Java数据库连接</strong>，说白了就是用Java语言来操作数据库。原来操作数据库是在控制台使用SQL语句来操作数据库，而JDBC是用Java语言向数据库发送SQL语句。</p><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>遵循了JDBC规范的，可以访问自己数据库的API被称之为驱动。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200709105133961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>JDBC是接口，而JDBC驱动才是接口的实现，没有驱动无法完成数据库连接！每个数据库厂商都有自己的驱动，用来连接自己公司的数据库。</p><h1 id="JDBC接口、类介绍"><a href="#JDBC接口、类介绍" class="headerlink" title="JDBC接口、类介绍"></a>JDBC接口、类介绍</h1><h2 id="JDBC中的主要类（接口）"><a href="#JDBC中的主要类（接口）" class="headerlink" title="JDBC中的主要类（接口）"></a>JDBC中的主要类（接口）</h2><p>在JDBC中常用的类有：</p><ul><li>DriverManager – 类，用来获取Connection；今后只需要会用DriverManager的getConnection()方法</li><li>Connection – 接口；</li></ul><blockquote><p>Connection最为重要的方法就是获取Statement：<br>Statement stmt = con.createStatement(); </p></blockquote><p>后面在学习ResultSet方法时，还要学习一下下面的方法：<br>Statement stmt = con.createStatement(int,int);</p><ul><li>Statement – 接口；</li></ul><blockquote><p>Statement最为重要的方法是：<br>int executeUpdate(String sql)：执行更新操作，即执行insert、update、delete语句，其实这个方法也可以执行create table、alter table，以及drop table等语句，但我们很少会使用JDBC来执行这些语句；<br>ResultSet executeQuery(String sql)：执行查询操作，执行查询操作会返回ResultSet，即结果集。</p></blockquote><ul><li>ResultSet – 接口  用于查询；可以通过next()方法使ResultSet的游标向下移动</li></ul><h2 id="如何写一个JDBC-连接数据库呢？"><a href="#如何写一个JDBC-连接数据库呢？" class="headerlink" title="如何写一个JDBC 连接数据库呢？"></a>如何写一个JDBC 连接数据库呢？</h2><p>具体的步骤出查询外有一些区别，大体上的过程如下所示：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200709143302435.png#pic_center" alt="在这里插入图片描述"></p><p>首先，访问的数据库与执行访问程序的一定不是一台电脑。所以连接一个服务器数据库需要的东西包括：（用java表达的话）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String username = <span class="string">"root"</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String password = <span class="string">"root"</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"jdbc:mysql://127.0.0.1:3306/jdbcdemo"</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String driver = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br></pre></td></tr></table></figure><p>而要访问一个数据表，并进行CRUD其实是使用JDBC+SQL语句的方式</p><h3 id="数据表添加记录"><a href="#数据表添加记录" class="headerlink" title="数据表添加记录"></a>数据表添加记录</h3><p>首先先定义一条添加记录的SQL语句如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = "<span class="keyword">insert</span> <span class="keyword">into</span> person(p_id,<span class="keyword">name</span>,addr,birth) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'志玲'</span>,<span class="string">'日本'</span>,<span class="string">'1998-7-1'</span>)<span class="string">";</span></span><br></pre></td></tr></table></figure><p>再设定初始外部的接口Connection与Statement为NULL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement statement = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>而后分别是 驱动加载、建立连接、获取执行SQL对象、执行SQL。但途中可能需要抛出SQL异常等进行捕获。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//驱动加载</span></span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//获得一个执行sql的对象</span></span><br><span class="line">statement = conn.createStatement();</span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line">statement.executeUpdate(sql);</span><br></pre></td></tr></table></figure><p>最后将原来访问的接口，关闭即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (statement != <span class="keyword">null</span>) </span><br><span class="line">statement.close();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>)</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>详细的具体代码可以看如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"insert into person(p_id,name,addr,birth) values(null,'志玲','日本','1998-7-1')"</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//驱动加载</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//获得一个执行sql的对象</span></span><br><span class="line">        statement = conn.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>)</span><br><span class="line">                statement.close();</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) </span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据表修改记录"><a href="#数据表修改记录" class="headerlink" title="数据表修改记录"></a>数据表修改记录</h3><p>与插入记录步骤相同，仅仅改变SQL语句即可。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"update person p set p.ADDR = '日本', p.BIRTH = '1977-12-31' where p.P_ID = 2"</span>;</span><br></pre></td></tr></table></figure><h3 id="数据表删除记录"><a href="#数据表删除记录" class="headerlink" title="数据表删除记录"></a>数据表删除记录</h3><p>与插入记录步骤相同，仅仅改变SQL语句即可。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"delete from person where p_id = 3"</span>;</span><br></pre></td></tr></table></figure><h3 id="数据表查询记录"><a href="#数据表查询记录" class="headerlink" title="数据表查询记录"></a>数据表查询记录</h3><p>访问服务器、驱动加载、建立连接、获取执行SQL对象步骤都一致，但由于查询需要获得列表数据，所以执行得返回果集。<strong>所以执行SQL使用的方法不同</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//驱动的加载</span></span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//获得一个执行SQL的对象</span></span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line">rs = stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><p>stmt.executeQuery(sql)得到的对象，是一组列表对象。可以通过next()方法使ResultSet的游标向下移动，当游标移动到你需要的行时，就需要来获取该行的数据了。next()方法在碰到有数据记录时会返回true，并会循环直到找不到数据记录而返回false为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="comment">//获得列数据 标明列数或者列名均可以 实际为方法的两种重载</span></span><br><span class="line"><span class="keyword">int</span> pId = rs.getInt(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//int pId = rs.getInt("p_id");</span></span><br><span class="line">String pname = rs.getString(<span class="number">2</span>);</span><br><span class="line">String addr = rs.getString(<span class="number">3</span>);</span><br><span class="line">Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不清楚获取的东西，类型是啥应该采用getObject的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如获取名称为columnName的列的Object数据；</span></span><br><span class="line"><span class="function">Object <span class="title">getObject</span><span class="params">(String columnName)</span></span>;</span><br></pre></td></tr></table></figure><p>最后再把访问的接口都关了就可以了。<br>总体查询栗子，举个栗子如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个sql</span></span><br><span class="line">    String sql = <span class="string">"select * from person where pname like '%娜%'"</span>;</span><br><span class="line"></span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//驱动的加载</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//获得一个执行SQL的对象</span></span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="comment">//获得列数据</span></span><br><span class="line">            <span class="keyword">int</span> pId = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            String pname = rs.getString(<span class="number">2</span>);</span><br><span class="line">            String addr = rs.getString(<span class="number">3</span>);</span><br><span class="line">            Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"pid:"</span>+pId+<span class="string">"     pname:"</span>+pname+<span class="string">"   addr:"</span>+addr+<span class="string">"    birth:"</span>+birth);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"执行完毕"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;JDBC&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;JDBC概述&quot;&gt;&lt;a href=&quot;#JDBC概述&quot; class=&quot;headerlink&quot; title=&quot;JDBC概述&quot;&gt;&lt;/a&gt;JDBC概述&lt;/h1&gt;&lt;h2 id=&quot;JDBC是神马&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MySQL数据库和SQL语言</title>
    <link href="http://yoursite.com/2020/07/07/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CSQL%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2020/07/07/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CSQL%E8%AF%AD%E8%A8%80/</id>
    <published>2020-07-07T08:10:22.007Z</published>
    <updated>2020-07-07T08:10:29.171Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="MySQL数据库和SQL语言">TOC</a></p><h1 id="MySQL数据库和SQL语言"><a href="#MySQL数据库和SQL语言" class="headerlink" title="MySQL数据库和SQL语言"></a>MySQL数据库和SQL语言</h1><p>Java开发，必用的两个数据库Oracle和MySQL *</p><ol><li>Oracle数据库（甲骨文） 大型的数据库，收费的。 *</li><li>MySQL数据库小型的数据库，免费开源的。被Oracle收购了（在6.x版本下开始收费了）</li></ol><h2 id="MySQL数据库的安装和卸载"><a href="#MySQL数据库的安装和卸载" class="headerlink" title="MySQL数据库的安装和卸载"></a>MySQL数据库的安装和卸载</h2><ol><li>MySQL数据库的卸载</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先找到MySQL的安装路径，找到my.ini配置文件。 </span><br><span class="line">basedir=<span class="string">"C:/Program Files (x86)/MySQL/MySQL Server 5.5/"</span> ‐‐ MySQL安装路径（my.ini没有 删除）</span><br><span class="line">datadir=<span class="string">"C:/ProgramData/MySQL/MySQL Server 5.5/Data/"</span> ‐‐ MySQL数据存放位置（手动删 除） </span><br><span class="line">直接通过控制面板卸载程序</span><br></pre></td></tr></table></figure><ol start="2"><li>安装MySQL * 安装的路径中不能有中文和空格。</li><li>进行测试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd ‐‐ 输入mysql ‐u root ‐p    ‐‐ 回车 ‐‐ 输入密码 ‐‐ 进入MySQL的服务器。</span><br></pre></td></tr></table></figure><h2 id="MySQL数据库基本操作"><a href="#MySQL数据库基本操作" class="headerlink" title="MySQL数据库基本操作"></a>MySQL数据库基本操作</h2><h3 id="MySQL数据库意义"><a href="#MySQL数据库意义" class="headerlink" title="MySQL数据库意义"></a>MySQL数据库意义</h3><p>一个数据库的服务器中包含多个数据库，一个数据库中有多张表，一个表中包含多个字段（字段和JavaBean的 属性是对应），表中存放是数据，一行数据和一个JavaBean实体对象是对应的。</p><h3 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h3><p>1.DDL 数据定义语言 * 创建数据库 创建表 创建视图 创建索引 修改数据库 删除数据库 修改表 删除表 * create ‐‐ 创建 alter ‐‐ 修改 drop ‐‐ 删除<br>2.DML 数据操作语言 * 操作数据 插入数据(insert) 修改数据(update) 删除数据(delete) 3.DCL 数据控制语言 * if else while<br>4.DQL 数据查询语言 * 从表中查询数据(select)<br>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><h3 id="CURD创建数据库"><a href="#CURD创建数据库" class="headerlink" title="CURD创建数据库"></a>CURD创建数据库</h3><p>创建一个名称为mydb1的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database mydb1;</span><br></pre></td></tr></table></figure><p>创建一个使用utf8字符集的mydb2数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database mydb2 character <span class="built_in">set</span> <span class="string">'utf8'</span>;</span><br></pre></td></tr></table></figure><p>创建一个使用utf8字符集，并带校对规则的mydb3数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database mydb3 character <span class="built_in">set</span> <span class="string">'utf8'</span> collate <span class="string">'utf8_bin'</span>;</span><br></pre></td></tr></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p> 查看所有的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>使用数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称;</span><br></pre></td></tr></table></figure><p>查询数据库的创建的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database 数据库名称;</span><br></pre></td></tr></table></figure><p>查询当前正在使用的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>删除数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名称;</span><br></pre></td></tr></table></figure><p>查看当前数据库服务器中的所有数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p> 查看前面创建的mydb2数据库的定义信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database mydb2;</span><br></pre></td></tr></table></figure><p>  删除前面创建的mydb1数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database mydb1;</span><br></pre></td></tr></table></figure><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database 数据库名称 character <span class="built_in">set</span> <span class="string">'gbk'</span> collate <span class="string">'校对规则'</span>;</span><br></pre></td></tr></table></figure><h2 id="MySQL数据表结构操作（CURD）"><a href="#MySQL数据表结构操作（CURD）" class="headerlink" title="MySQL数据表结构操作（CURD）"></a>MySQL数据表结构操作（CURD）</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>创建一张表结构（员工表练习）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table employee( </span><br><span class="line">id int primary key, </span><br><span class="line">name varchar(30), </span><br><span class="line">gender char(5), </span><br><span class="line">birthday date, </span><br><span class="line">entry_date date, </span><br><span class="line">job varchar(50), </span><br><span class="line">salary double, </span><br><span class="line">resume text </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="单表的约束"><a href="#单表的约束" class="headerlink" title="单表的约束"></a>单表的约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.约束的好处：保证数据的完整性。 </span><br><span class="line">2.主键约束（重要）代表记录的唯一标识。 * 关键字：primary key 通过该关键字声明某一列为主键。 * 唯一 值就不能相同 * 非空 值也不能为空 * 被引用 （和外键一起来使用） </span><br><span class="line">3.唯一约束 * 声明字段值是唯一的。使用关键字 unique </span><br><span class="line">4.非空约束 * 声明字段的值是不能空的。not null</span><br></pre></td></tr></table></figure><h3 id="删除和查看表"><a href="#删除和查看表" class="headerlink" title="删除和查看表"></a>删除和查看表</h3><p>删除表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure><p>查询表的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><p>查看当前数据库中所有的标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>查看表的创建的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p>在上面员工表的基本上增加一个image列。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employee add image varchar(50);</span><br></pre></td></tr></table></figure><p>修改job列，使其长度为60。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employee modify job varchar(60);</span><br></pre></td></tr></table></figure><p>删除gender列。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employee drop gender;</span><br></pre></td></tr></table></figure><p>表名改为user。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename table employee to user;</span><br></pre></td></tr></table></figure><p>修改表的字符集为utf8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user character <span class="built_in">set</span> utf8;</span><br></pre></td></tr></table></figure><p>列名name修改为username</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user change name username varchar(30);</span><br></pre></td></tr></table></figure><h3 id="数据的操作（CRUD）（重点）"><a href="#数据的操作（CRUD）（重点）" class="headerlink" title="数据的操作（CRUD）（重点）"></a>数据的操作（CRUD）（重点）</h3><p>插入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//选择字段插入</span><br><span class="line">insert into 表名 (字段1,字段2,字段3) values (值1,值2,值3); </span><br><span class="line">//全部插入</span><br><span class="line">insert into 表名 values (值1,值2,值3);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into user values (1,<span class="string">'meimei'</span>,<span class="string">'1956‐1‐1'</span>,<span class="string">'1957‐1‐1'</span>,<span class="string">'HR'</span>,5000,<span class="string">'meimeimei'</span>,<span class="string">'xx'</span>); </span><br><span class="line">insert into user values (2,<span class="string">'小凤'</span>,<span class="string">'1996‐1‐1'</span>,<span class="string">'2013‐1‐1'</span>,<span class="string">'BOSS'</span>,15000,<span class="string">'mei'</span>,<span class="string">'xx'</span>);</span><br></pre></td></tr></table></figure><p>客户端向MySQL服务器端发送内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character_set_client=utf8</span><br></pre></td></tr></table></figure><p>MySQL服务器端向客户端发送内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character_set_results=utf8</span><br></pre></td></tr></table></figure><p>MySQL插入中文数据乱码</p><ol><li>先把MySQL服务停止。</li><li>.找到MySQL安装文件的my.ini的配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[client] </span><br><span class="line">port=3306 </span><br><span class="line">[mysql] </span><br><span class="line">default‐character‐<span class="built_in">set</span>=gbk</span><br></pre></td></tr></table></figure><ol start="3"><li>重启MySQL服务</li></ol><h3 id="修改数据（update）"><a href="#修改数据（update）" class="headerlink" title="修改数据（update）"></a>修改数据（update）</h3><p>将所有员工薪水修改为5000元。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> salary = 5000;</span><br></pre></td></tr></table></figure><p>将姓名为’聪聪’的员工薪水修改为3000元。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> salary = 3000 <span class="built_in">where</span> username = <span class="string">'聪聪'</span>;</span><br></pre></td></tr></table></figure><p>将姓名为’小凤’的员工薪水修改为4000元,job改为ccc。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> salary = 4000,job = <span class="string">'ccc'</span> <span class="built_in">where</span> username = <span class="string">'小凤'</span>;</span><br></pre></td></tr></table></figure><p>将如花的薪水在原有基础上增加1000元。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> salary = salary+1000 <span class="built_in">where</span> username = <span class="string">'如花'</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据（delete）"><a href="#删除数据（delete）" class="headerlink" title="删除数据（delete）"></a>删除数据（delete）</h3><p>删除表中名称为’聪聪’的记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from user <span class="built_in">where</span> username = <span class="string">'聪聪'</span>;</span><br></pre></td></tr></table></figure><p>删除表中所有记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete from user;</span><br><span class="line">//或者</span><br><span class="line">truncate user;</span><br></pre></td></tr></table></figure><h3 id="查询数据（select）（重点）"><a href="#查询数据（select）（重点）" class="headerlink" title="查询数据（select）（重点）"></a>查询数据（select）（重点）</h3><p>查询所有列的记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名;</span><br></pre></td></tr></table></figure><p>查询字段123的记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1,字段2,字段3 from 表名;</span><br></pre></td></tr></table></figure><p>DISTINCT ‐‐ 去除重复的数据（面试）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct english from stu;</span><br></pre></td></tr></table></figure><h4 id="查询语句中使用运算和别名"><a href="#查询语句中使用运算和别名" class="headerlink" title="查询语句中使用运算和别名"></a>查询语句中使用运算和别名</h4><p>在所有学生分数上加10分特长分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,(math+10) m,(english+10) e,(chinese+10) c from stu;</span><br></pre></td></tr></table></figure><p>统计每个学生的总分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,(math+english+chinese) 总分 from stu;</span><br></pre></td></tr></table></figure><h4 id="使用where条件过滤"><a href="#使用where条件过滤" class="headerlink" title="使用where条件过滤"></a>使用where条件过滤</h4><p>查询总分大于200分的所有同学</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,math+english+chinese from stu <span class="built_in">where</span> (math+english+chinese) &gt; 200;</span><br></pre></td></tr></table></figure><h6 id="where子句中出现的运算"><a href="#where子句中出现的运算" class="headerlink" title="where子句中出现的运算"></a>where子句中出现的运算</h6><ol><li><blockquote><p>&lt; &lt;= &gt;= = &lt;&gt; 大于、小于、大于(小于)等于、不等于</p></blockquote></li><li>in 表示范围。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu <span class="built_in">where</span> math = 18;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查询数学分数为78,18,99的同学。</span><br><span class="line">select * from stu <span class="built_in">where</span> math <span class="keyword">in</span> (78,18,99);</span><br></pre></td></tr></table></figure><ol start="3"><li>like 模糊查询 ‐‐ 符合模糊的条件</li></ol><ul><li><input checked="" disabled="" type="checkbox"> 姓张的名称（只有两个字）的记录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu <span class="built_in">where</span> name like <span class="string">'张_'</span>;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 姓张的名称（张飞 张翼德 张是是是冠希）的记录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu <span class="built_in">where</span> name like <span class="string">'张%'</span>;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 末尾是张（聪聪张 XSDF张）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu <span class="built_in">where</span> name like <span class="string">'%张'</span>;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 只要名称中包含张</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu <span class="built_in">where</span> name like <span class="string">'%张%'</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>is null 判断某一个字段记录是否为空</li><li>and与 or或者 not非<ul><li><input checked="" disabled="" type="checkbox"> 查询英语分数在 80－90之间的同学。</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu <span class="built_in">where</span> english &gt;= 10 and english &lt; 19;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 查询数学分&gt;80或者语文分&gt;80的同学。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu <span class="built_in">where</span> math &gt; 80 or chinese &gt; 80;</span><br></pre></td></tr></table></figure><h4 id="order-by-对查询的结果进行排序"><a href="#order-by-对查询的结果进行排序" class="headerlink" title="order by 对查询的结果进行排序"></a>order by 对查询的结果进行排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 <span class="built_in">where</span> 条件 order by 列名 升序/降序</span><br><span class="line">order by 列名 asc;（升序，默认值）</span><br><span class="line">order by 列名 desc;（降序）</span><br></pre></td></tr></table></figure><p>对学生成绩按照英语进行降序排序，英语相同学员按照数学降序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,english,math from stu order by english desc,math desc;</span><br></pre></td></tr></table></figure><p>对姓聪的学生成绩排序输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,(math+english+chinese) as total from stu <span class="built_in">where</span> name like <span class="string">'聪%'</span> order by total desc;</span><br></pre></td></tr></table></figure><h4 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h4><p>聚集函数：总计某一列数据总和。一列的个数。一列的平均数。一列中最大值和最小值。<br>聚集函数来操作列的。</p><blockquote><ul><li>count ‐‐ 计数 </li><li>sum ‐‐ 求和<ul><li>ifnull 判断是否为空：语法：ifnul(xxx,0) 如果xxx为null，替换成0 </li></ul></li><li>avg ‐‐ 平均值 </li><li>max ‐‐ 最大值<ul><li>min ‐‐ 最小值</li></ul></li></ul></blockquote><p>统计总分大于220的人数有多少？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from stu <span class="built_in">where</span> math + english+chinese &gt; 200;</span><br></pre></td></tr></table></figure><p>统计一个班级语文、英语、数学的成绩总和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sum(ifnull(math,0)+english+chinese) from stu; </span><br><span class="line">select sum(math) + sum(english) + sum(chinese) from stu;</span><br></pre></td></tr></table></figure><p>统计一个班级语文成绩平均分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(chinese) from stu;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;MySQL数据库和SQL语言&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;MySQL数据库和SQL语言&quot;&gt;&lt;a href=&quot;#MySQL数据库和SQL语言&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库和SQL语言&quot;&gt;&lt;/a&gt;MyS
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>XML</title>
    <link href="http://yoursite.com/2020/07/06/XML/"/>
    <id>http://yoursite.com/2020/07/06/XML/</id>
    <published>2020-07-06T08:56:15.588Z</published>
    <updated>2020-07-06T08:56:22.775Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="XML学习">TOC</a></p><h2 id="XML的用处"><a href="#XML的用处" class="headerlink" title="XML的用处"></a>XML的用处</h2><p>XML 指可扩展标记语言（eXtensible Markup Language）。<br>XML 被设计用来传输和存储数据。（例如java与php的数据传输）</p><h2 id="XML的使用"><a href="#XML的使用" class="headerlink" title="XML的使用"></a>XML的使用</h2><h3 id="XML的定义"><a href="#XML的定义" class="headerlink" title="XML的定义"></a>XML的定义</h3><p>在抬头第一行第一列声明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br></pre></td></tr></table></figure><p>而后采用标签的形式包装信息，与json的键值对相比，其可以存储结构信息（转为dom后成为dom树）可以在标签内自定义属性，但属性不可以重复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;persons&gt;</span><br><span class="line">    &lt;person id=<span class="string">"person1"</span> gender=<span class="string">"男"</span>&gt;</span><br><span class="line">        &lt;name&gt;鲁智深&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;30&lt;/age&gt;</span><br><span class="line">        &lt;address&gt;五台山&lt;/address&gt;</span><br><span class="line">    &lt;/person&gt;</span><br><span class="line">&lt;/persons&gt;</span><br></pre></td></tr></table></figure><h3 id="XML的约束"><a href="#XML的约束" class="headerlink" title="XML的约束"></a>XML的约束</h3><h4 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h4><p>元素（ELEMENT）</p><p>元素定义  在DTD中出现的第一个元素为根元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称 元素内容声明&gt;</span><br></pre></td></tr></table></figure><p>要点：包含符号和数据类型两部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE users[</span><br><span class="line">        &lt;!ELEMENT users (user+) &gt;</span><br><span class="line">        &lt;!ELEMENT user (name,age,addr) &gt;</span><br><span class="line">        &lt;!ELEMENT name (<span class="comment">#PCDATA) &gt;</span></span><br><span class="line">        &lt;!ELEMENT age (<span class="comment">#PCDATA) &gt;</span></span><br><span class="line">        &lt;!ELEMENT addr (<span class="comment">#PCDATA) &gt;</span></span><br><span class="line">        ]&gt;</span><br><span class="line">&lt;users&gt;</span><br><span class="line">    &lt;user&gt;</span><br><span class="line">        &lt;name&gt;zhangsan&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">        &lt;addr&gt;shanghai&lt;/addr&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">    &lt;user&gt;</span><br><span class="line">        &lt;name&gt;lisi&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;24&lt;/age&gt;</span><br><span class="line">        &lt;addr&gt;beijing&lt;/addr&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">&lt;/users&gt;</span><br></pre></td></tr></table></figure><h4 id="shema约束"><a href="#shema约束" class="headerlink" title="shema约束"></a>shema约束</h4><p>要定义一个Schema文件，这时它的扩展名必须是.xsd。在这个文件中根元素必须是schema。<br>在定义Schema文件的时候，由于这个Schema文件本身就是xml，它也要受到别的约束。而这个约束是W3C组织提前定义好的，<br>在Schema文件中需要提前引入进来在根标签中使用属性进行进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;schema  xmlns=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>   引入W3C定义的schema书写的约束</span><br><span class="line">targetNamespace=<span class="string">"http://www.itcast.org/book"</span> 给当前的Schema文件起名字（命名空间）</span><br><span class="line">作用是当哪个xml要引入这个schema约束的时候，必须通过当前targetNamespace 后面书写的uri地址来引入</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;schema xmlns=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> </span><br><span class="line">    targetNamespace=<span class="string">"http://www.itcast.org/book"</span> </span><br><span class="line">    elementFormDefault=<span class="string">"qualified"</span>&gt;</span><br><span class="line">    &lt;element name=<span class="string">"books"</span>&gt;</span><br><span class="line">        &lt;complexType&gt;</span><br><span class="line">            &lt;sequence&gt;</span><br><span class="line">                &lt;element name=<span class="string">"book"</span>&gt;</span><br><span class="line">                    &lt;complexType&gt;</span><br><span class="line">                        &lt;sequence&gt;</span><br><span class="line">                            &lt;element name=<span class="string">"name"</span>&gt;&lt;/element&gt;</span><br><span class="line">                            &lt;element name=<span class="string">"author"</span>&gt;&lt;/element&gt;</span><br><span class="line">                            &lt;element name=<span class="string">"price"</span>&gt;&lt;/element&gt;</span><br><span class="line">                        &lt;/sequence&gt;</span><br><span class="line">                    &lt;/complexType&gt;</span><br><span class="line">                &lt;/element&gt;</span><br><span class="line">            &lt;/sequence&gt;</span><br><span class="line">        &lt;/complexType&gt;</span><br><span class="line">    &lt;/element&gt;</span><br><span class="line">&lt;/schema&gt;</span><br></pre></td></tr></table></figure><h3 id="XML的解析"><a href="#XML的解析" class="headerlink" title="XML的解析"></a>XML的解析</h3><p>举个栗子，此时的XML信息为如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;persons&gt;</span><br><span class="line">    &lt;person id=<span class="string">"person1"</span> gender=<span class="string">"男"</span>&gt;</span><br><span class="line">        &lt;name&gt;鲁智深&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;30&lt;/age&gt;</span><br><span class="line">        &lt;address&gt;五台山&lt;/address&gt;</span><br><span class="line">    &lt;/person&gt;</span><br><span class="line"></span><br><span class="line">    &lt;person id=<span class="string">"person2"</span> gender=<span class="string">"女"</span>&gt;</span><br><span class="line">        &lt;name&gt;扈三娘&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;30&lt;/age&gt;</span><br><span class="line">        &lt;address&gt;祝家庄&lt;/address&gt;</span><br><span class="line">    &lt;/person&gt;</span><br><span class="line"></span><br><span class="line">    &lt;person id=<span class="string">"person3"</span> gender=<span class="string">"男"</span>&gt;</span><br><span class="line">        &lt;name&gt;宋江&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;30&lt;/age&gt;</span><br><span class="line">        &lt;address&gt;山东君诚&lt;/address&gt;</span><br><span class="line">    &lt;/person&gt;</span><br><span class="line">&lt;/persons&gt;</span><br></pre></td></tr></table></figure><ol><li>第一步 创建sax的解析器对象    `</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAXReader reader = new SAXReader();`</span><br></pre></td></tr></table></figure><ol start="2"><li>读取xml文件，生成document对象</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document document = reader.read(<span class="string">"D:\\BaiduNetdiskDownload\\06xml\\src\\person1"</span>);</span><br></pre></td></tr></table></figure><p>此时生成dom树，生成的dom树的示意图如下所示：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706164432788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>获得根结点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Element root = document.getRootElement();</span><br><span class="line">//获取到当前结点的名称</span><br><span class="line">   System.out.println(root.getName());</span><br></pre></td></tr></table></figure><ol start="4"><li>获取persons下的所有perison节点  没有参数就是全部子节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Element&gt; persons =  root.elements(<span class="string">"person"</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>循环读取内部结点的内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//增强<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span> (Element person : persons) &#123;</span><br><span class="line">//获取到属性的值</span><br><span class="line">String id = person.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">System.out.println(id);</span><br><span class="line">String gender = person.attributeValue(<span class="string">"gender"</span>);</span><br><span class="line">System.out.println(gender);</span><br><span class="line"></span><br><span class="line">//获取到person下的子节点</span><br><span class="line">List&lt;Element&gt; names = person.elements(<span class="string">"name"</span>);</span><br><span class="line">//遍历</span><br><span class="line"><span class="keyword">for</span> (Element name : names) &#123;</span><br><span class="line">String text = name.getText();</span><br><span class="line">System.out.println(<span class="string">"name的标签内容"</span>+text);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用XPATH方式读取</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//使用xpath方式</span><br><span class="line">List&lt;Element&gt; list = root.selectNodes(<span class="string">"/persons/person/name"</span>);</span><br><span class="line"><span class="keyword">for</span> (Element element : list) &#123;</span><br><span class="line">//打印内容</span><br><span class="line">System.out.println(element.getText());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取到所有的name节点</span><br><span class="line">List&lt;Element&gt; list1 = root.selectNodes(<span class="string">"//name"</span>);</span><br><span class="line"><span class="keyword">for</span> (Element element : list1) &#123;</span><br><span class="line">//打印内容</span><br><span class="line">System.out.println(element.getText());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过属性的方式来获取</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root.selectNodes(<span class="string">"//person[@id]"</span>);</span><br><span class="line">root.selectNodes(<span class="string">"//person[@id]='person2'"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;XML学习&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;XML的用处&quot;&gt;&lt;a href=&quot;#XML的用处&quot; class=&quot;headerlink&quot; title=&quot;XML的用处&quot;&gt;&lt;/a&gt;XML的用处&lt;/h2&gt;&lt;p&gt;XML 指可扩展标记语言（eXtensibl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JQUREY</title>
    <link href="http://yoursite.com/2020/07/05/JQUREY/"/>
    <id>http://yoursite.com/2020/07/05/JQUREY/</id>
    <published>2020-07-05T08:43:20.018Z</published>
    <updated>2020-07-05T08:43:27.187Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JQUREY学习文档">TOC</a></p><h2 id="1-JQuery是什么"><a href="#1-JQuery是什么" class="headerlink" title="1. JQuery是什么"></a>1. JQuery是什么</h2><p>jQuery是一个快速的，简洁的javaScript库，使用户能更方便地处理HTML documents、events、实现动画效果，并且方便地为网站提供AJAX交互。<br>jQuery还有一个比较大的优势是，它的文档说明很全，而且各种应用也说得很详细，同时还有许多成熟的插件可供选择。</p><h2 id="2-引入Jquery"><a href="#2-引入Jquery" class="headerlink" title="2. 引入Jquery"></a>2. 引入Jquery</h2><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.8.3.js&quot;&gt;&lt;/script&gt;&lt;script language=&quot;JavaScript&quot;&gt;  $(document).ready(function(){//等待dom元素加载完毕,类似window.onload;      alert(&quot;您好,我是张三丰&quot;);  });  //或者   $(function () {        alert(&quot;hello&quot;)   })&lt;/script&gt;</code></pre><h2 id="3-jQuery对象与DOM对象"><a href="#3-jQuery对象与DOM对象" class="headerlink" title="3. jQuery对象与DOM对象"></a>3. jQuery对象与DOM对象</h2><p>jQuery 对象就是通过jQuery包装DOM对象后产生的对象。<br>jQuery 对象是 jQuery 独有的. 如果一个对象是 jQuery 对象, 那么它就可以使用 jQuery 里的方法。<br>虽然jQuery对象是包装DOM对象后产生的，但是jQuery无法使用DOM对象的任何方法，同理DOM对象也不能使用jQuery里的方法.乱使用会报错。</p><h3 id="3-1-DOM对象与jQuery对象互转"><a href="#3-1-DOM对象与jQuery对象互转" class="headerlink" title="3.1 DOM对象与jQuery对象互转"></a>3.1 DOM对象与jQuery对象互转</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//jquery写法  这个是文档加载完 才运行的</span><br><span class="line">$(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    //获取 dom对象 </span><br><span class="line">    var uname = document.getElementById(<span class="string">"username"</span>);;</span><br><span class="line">    alert(uname.value);</span><br><span class="line"></span><br><span class="line">    //把dom转换为 jquery对象</span><br><span class="line">    var unameJq =$(uname);</span><br><span class="line">    var unameVal = unameJq.val();</span><br><span class="line">    alert(unameVal);</span><br><span class="line"></span><br><span class="line">    //把jquery对象 转回dom对象   jQuery对象是一个数组对象，可以通过[index]的方法，来得到相应的DOM对象</span><br><span class="line">    var unameDom = unameJq[0];</span><br><span class="line">    //或者</span><br><span class="line">    // var unameDom = unameJq.get(0);</span><br><span class="line">    alert(unameDom.value);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-jQuery-选择器"><a href="#4-jQuery-选择器" class="headerlink" title="4. jQuery 选择器"></a>4. jQuery 选择器</h2><h3 id="4-1-基本选择器"><a href="#4-1-基本选择器" class="headerlink" title="4.1 基本选择器"></a>4.1 基本选择器</h3><h4 id="4-1-1-id选择器"><a href="#4-1-1-id选择器" class="headerlink" title="4.1.1 id选择器"></a>4.1.1 id选择器</h4><p>#id     用法: $(”#myDiv”);    返回值  单个元素的组成的集合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取 dom对象  id选择器</span><br><span class="line">var unameJq = $(<span class="string">"#username"</span>);</span><br></pre></td></tr></table></figure><h4 id="4-1-2-元素选择器"><a href="#4-1-2-元素选择器" class="headerlink" title="4.1.2 元素选择器"></a>4.1.2 元素选择器</h4><p>Element       用法: $(”div”)     返回值  集合元素<br>       说明: element的英文翻译过来是”元素”,所以element其实就是html已经定义的标签元素,例如 div, input, a 等等.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//元素 选择器</span><br><span class="line">var inputArray = $(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">for</span>(var i=0;i&lt;inputArray.length;i++)&#123;</span><br><span class="line">     var ip = inputArray[i];</span><br><span class="line">     alert($(ip).val());</span><br><span class="line">&#125;</span><br><span class="line">//推荐使用的遍历方法</span><br><span class="line">inputArray.each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    alert($(this).val());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-1-3-类选择器"><a href="#4-1-3-类选择器" class="headerlink" title="4.1.3 类选择器"></a>4.1.3 类选择器</h4><p>用法: $(”.myClass”)      返回值  集合元素<br>说明: 这个标签是直接选择html代码中class=”myClass”的元素或元素组(因为在同一html页面中class是可以存在多个同样值的).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"mydiv"</span>&gt;我是div1&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"mydiv"</span>&gt;我是div2&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"mydiv1"</span>&gt;我是div3&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//js</span><br><span class="line">var divobj = $(<span class="string">".mydiv"</span>);     </span><br><span class="line">divobj.each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).text())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-2-层次选择器"><a href="#4-2-层次选择器" class="headerlink" title="4.2 层次选择器"></a>4.2 层次选择器</h3><p>如果想通过 DOM 元素之间的层次关系来获取特定元素, 例如后代元素, 子元素, 相邻元素, 兄弟元素等, 则需要使用层次选择器.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;label&gt;Name:&lt;/label&gt;</span><br><span class="line">    &lt;input name=<span class="string">"name"</span>/&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">        &lt;label&gt;Newsletter:&lt;/label&gt;</span><br><span class="line">        &lt;input name=<span class="string">"newsletter"</span>/&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="4-2-1-祖先后代型-ancestor-descendant"><a href="#4-2-1-祖先后代型-ancestor-descendant" class="headerlink" title="4.2.1 祖先后代型 ancestor descendant"></a>4.2.1 祖先后代型 ancestor descendant</h4><p>用法: $(”form input”) ;   返回值  集合元素<br>说明: 在给定的祖先元素下匹配所有后代元素.这个要下面讲的”parent &gt; child”区分开.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   //ancestor descendant</span><br><span class="line">   var inputs = $(<span class="string">"form input"</span>);</span><br><span class="line">inputs.each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).attr(<span class="string">"name"</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-2-2-父子元素型-parent-gt-child"><a href="#4-2-2-父子元素型-parent-gt-child" class="headerlink" title="4.2.2 父子元素型 parent &gt; child"></a>4.2.2 父子元素型 parent &gt; child</h4><p>用法: $(”form &gt; input”) ;    返回值  集合元素<br>说明: 在给定的父元素下匹配所有子元素.注意:要区分好后代元素与子元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//只拿儿子</span><br><span class="line">var input = $(<span class="string">"form &gt; input"</span>);</span><br><span class="line">input.each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).attr(<span class="string">"name"</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-2-3-紧跟型-prev-next"><a href="#4-2-3-紧跟型-prev-next" class="headerlink" title="4.2.3 紧跟型 prev + next"></a>4.2.3 紧跟型 prev + next</h4><p>用法: $(”label + input”) ;   返回值  集合元素<br>说明: 匹配所有紧接在 prev 元素后的 next 元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//prev + next</span><br><span class="line">var inpu = $(<span class="string">"label + input"</span>);</span><br><span class="line">inpu.each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).attr(<span class="string">"name"</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-3-过滤选择器"><a href="#4-3-过滤选择器" class="headerlink" title="4.3 过滤选择器"></a>4.3 过滤选择器</h3><p>过滤选择器主要是通过特定的过滤规则来筛选出所需的 DOM 元素, 该选择器都以<kbd>：</kbd>开头<br>按照不同的过滤规则, 过滤选择器可以分为基本过滤, 内容过滤, 可见性过滤, 属性过滤, 子元素过滤和表单对象属性过滤选择器.</p><h4 id="4-3-1-基本过滤器"><a href="#4-3-1-基本过滤器" class="headerlink" title="4.3.1 基本过滤器"></a>4.3.1 基本过滤器</h4><blockquote><ol><li>:first<br>用法: $(”tr:first”) ;   返回值  单个元素的组成的集合<br>说明: 匹配找到的第一个元素</li><li>:last<br>用法: $(”tr:last”)   返回值  集合元素<br>说明: 匹配找到的最后一个元素.与 :first 相对应.<ol start="3"><li>:not(selector)<br>用法: $(”input:not(:checked)”)返回值  集合元素<br>说明: 去除所有与给定选择器匹配的元素.有点类似于”非”,意思是没有被选中的input(当input的type=”checkbox”).</li><li>:even<br>用法: $(”tr:even”)   返回值  集合元素<br>说明: 匹配所有索引值为偶数的元素，从 0 开始计数.js的数组都是从0开始计数的.例如要选择table中的行,因为是从0开始计数,所以table中的第一个tr就为偶数0.</li><li>: odd<br>用法: $(”tr:odd”) 返回值  集合元素<br>说明: 匹配所有索引值为奇数的元素,和:even对应,从 0 开始计数.</li></ol></li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;一只柴犬&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;狗子&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;一只柴犬&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;狗子&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;一只柴犬&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;狗子&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;一只柴犬&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;狗子&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;一只柴犬&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;狗子&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//过滤选择器</span><br><span class="line">alert($(<span class="string">"li:first"</span>).text());</span><br><span class="line">alert($(<span class="string">"li:last"</span>).text());</span><br><span class="line"></span><br><span class="line">alert($(<span class="string">"li:odd"</span>).text());</span><br><span class="line">alert($(<span class="string">"li:even"</span>).text());</span><br><span class="line"></span><br><span class="line">//1 3 5 7   even 其实是偶数  其实是从0 开始的</span><br><span class="line">$(<span class="string">"tr:even"</span>).css(&#123;background:<span class="string">"yellow"</span>&#125;);</span><br><span class="line">//2 4 6 8 odd 其实是奇数  其实是从0 开始的</span><br><span class="line">$(<span class="string">"tr:odd"</span>).css(&#123;background:<span class="string">"blue"</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-3-2-属性过滤选择器"><a href="#4-3-2-属性过滤选择器" class="headerlink" title="4.3.2 属性过滤选择器"></a>4.3.2 属性过滤选择器</h4><blockquote><ol><li>[attribute]<br>用法: $(”div[id]“) ;  返回值  集合元素<br>说明: 匹配包含给定属性的元素. 例子中是选取了所有带”id”属性的div标签.</li><li>[attribute=value]<br>用法: $(”input[name=’newsletter’]“).attr(”checked”, true);    返回值  集合元素<br>说明: 匹配给定的属性是某个特定值的元素.例子中选取了所有 name 属性是 newsletter 的 input 元素.<ol start="3"><li>[attributeFilter1][attributeFilter2][attributeFilterN]<br>用法: $(”input[id][name=‘man’]“)  返回值  集合元素<br>说明: 复合属性选择器,需要同时满足多个条件时使用.又是一个组合,这种情况我们实际使用的时候很常用.这个例子中选择的是所有含有 id 属性,并且它的 name 属性是以 man 结尾的元素.</li></ol></li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> name=<span class="string">"newsletter"</span> checked=<span class="string">"checked"</span> value=<span class="string">"Daily"</span>/&gt;天</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> name=<span class="string">"newsletter"</span> value=<span class="string">"Weekly"</span>/&gt;星期</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> name=<span class="string">"newsletter"</span> checked=<span class="string">"checked"</span> value=<span class="string">"Monthly"</span>/&gt;月</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myclick</span></span>() &#123;</span><br><span class="line">$(<span class="string">"input:checked"</span>).each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).val());</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"input:not(:checked)"</span>).each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).val());</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"input[type='checkbox']"</span>).each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).attr(<span class="string">"value"</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"input[type='checkbox'][name]"</span>).each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">alert($(this).attr(<span class="string">"value"</span>));</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-JQuery-中的-DOM-操作"><a href="#5-JQuery-中的-DOM-操作" class="headerlink" title="5 . JQuery 中的 DOM 操作"></a>5 . JQuery 中的 DOM 操作</h2><h3 id="5-1-append与appendTo"><a href="#5-1-append与appendTo" class="headerlink" title="5.1 append与appendTo"></a>5.1 append与appendTo</h3><p>DOM(Document Object Model—文档对象模型)：一种与浏览器, 平台, 语言无关的接口, 使用该接口可以轻松地访问页面中所有的标准组件</p><ul><li>append(content) :向每个匹配的元素的内部的结尾处追加内容</li><li>appendTo(content) :将每个匹配的元素追加到指定的元素中的内部结尾处</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myclick</span></span>() &#123;</span><br><span class="line">//编程了jqurey对象的dom元素</span><br><span class="line">var jqP = $(<span class="string">"&lt;p&gt;白日依山尽，黄河入海流&lt;/p&gt;"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).append(jqP);</span><br><span class="line">//或者</span><br><span class="line">// jqP.appendTo($(<span class="string">"div"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-综合案例（左右选框）"><a href="#5-2-综合案例（左右选框）" class="headerlink" title="5.2 综合案例（左右选框）"></a>5.2 综合案例（左右选框）</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020070515521381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    select&#123;</span><br><span class="line">        width: 120px;</span><br><span class="line">        height: 150px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!--引入jquery文件--&gt;</span><br><span class="line">&lt;script src=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script  <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">moveRight</span></span>() &#123;</span><br><span class="line">            // $(<span class="string">"#select1 option"</span>).each(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            //     var status = $(this).attr(<span class="string">"selected"</span>);</span><br><span class="line">            //     <span class="keyword">if</span>(status == <span class="string">"selected"</span>)&#123;</span><br><span class="line">            //         $(<span class="string">"#select2"</span>).append($(this));</span><br><span class="line">            //     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            //         console.log(123);</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;)</span><br><span class="line">            $(<span class="string">"#select1 option:selected"</span>).appendTo($(<span class="string">"select2"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">moveLeft</span></span>() &#123;</span><br><span class="line">            $(<span class="string">"#select2 option:selected"</span>).appendTo($(<span class="string">"select1"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">moveRightAll</span></span>() &#123;</span><br><span class="line">            $(<span class="string">"#select1 option"</span>).appendTo($(<span class="string">"#select2"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">moveLeftAll</span></span>() &#123;</span><br><span class="line">            $(<span class="string">"#select2 option"</span>).appendTo($(<span class="string">"#select1"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;select id=<span class="string">"select1"</span> multiple=<span class="string">"multiple"</span>&gt;</span><br><span class="line">                &lt;option&gt;菜单管理&lt;/option&gt;</span><br><span class="line">                &lt;option &gt;部门管理&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;员工管理&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;库存管理&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;button onclick=<span class="string">"moveRight()"</span>&gt;&gt;&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">            &lt;button onclick=<span class="string">"moveRightAll()"</span>&gt;全右&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">            &lt;button onclick=<span class="string">"moveLeft()"</span>&gt;&lt;&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">            &lt;button onclick=<span class="string">"moveLeftAll()"</span>&gt;全左&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;select id=<span class="string">"select2"</span> multiple=<span class="string">"multiple"</span>&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3-外部插入节点（以及正则表达）"><a href="#5-3-外部插入节点（以及正则表达）" class="headerlink" title="5.3 外部插入节点（以及正则表达）"></a>5.3 外部插入节点（以及正则表达）</h3><pre><code>*  after(content) :在每个匹配的元素之后插入内容 *  before(content):在每个匹配的元素之前插入内容 </code></pre><p>以上方法不但能将新创建的 DOM 元素插入到文档中, 也能对原有的 DOM 元素进行移动.<br>如下面的 判断手机号正确与否</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">手机号:&lt;input id=<span class="string">"username"</span> <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">密码:&lt;input id=<span class="string">"password"</span> <span class="built_in">type</span>=<span class="string">"password"</span> value=<span class="string">"jks88990041"</span>/&gt;&lt;br/&gt;</span><br><span class="line">验证码:&lt;input id=<span class="string">"cap"</span> <span class="built_in">type</span>=<span class="string">"text"</span> value=<span class="string">"验证码"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"myclick()"</span>&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myclick</span></span>() &#123;</span><br><span class="line">var uname = $(<span class="string">"#username"</span>);</span><br><span class="line">//获得的文本框的值</span><br><span class="line">       var val = uname.val();</span><br><span class="line">       <span class="keyword">if</span>(!(/^1[3456789]\d&#123;9&#125;$/.<span class="built_in">test</span>(val))) &#123;</span><br><span class="line">       //创建一个节点</span><br><span class="line">       // var tip = $(<span class="string">"&lt;font color='#7fffd4'&gt;请输入正确格式手机号码&lt;/font&gt;"</span>);</span><br><span class="line">       // uname.after(tip);</span><br><span class="line">       //或者 这要在后面放一个span之类的标签</span><br><span class="line">       uname.next().html(<span class="string">"&lt;font color='#7fffd4'&gt;请输入正确格式手机号码&lt;/font&gt;"</span>);</span><br><span class="line">       //对应的有放前面</span><br><span class="line">       // uname.before(tip);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         var tip = $(<span class="string">"&lt;font color='#7fffd4'&gt;可用&lt;/font&gt;"</span>);</span><br><span class="line">         uname.after(tip);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-创建与删除节点"><a href="#5-4-创建与删除节点" class="headerlink" title="5.4 创建与删除节点"></a>5.4 创建与删除节点</h3><p>创建节点: 使用 jQuery 的工厂函数 $(): $(html); 会根据传入的 html 标记字符串创建一个 DOM 对象, 并把这个 DOM 对象包装成一个 jQuery 对象返回.</p><h4 id="5-4-1-创建节点"><a href="#5-4-1-创建节点" class="headerlink" title="5.4.1 创建节点"></a>5.4.1 创建节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var jqP = $(<span class="string">"&lt;p&gt;白日依山尽，黄河入海流&lt;/p&gt;"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).append(jqP);</span><br></pre></td></tr></table></figure><h4 id="5-4-2-删除节点"><a href="#5-4-2-删除节点" class="headerlink" title="5.4.2 删除节点"></a>5.4.2 删除节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除节点</span><br><span class="line">$(<span class="string">"#div2"</span>).remove();</span><br></pre></td></tr></table></figure><h4 id="5-4-3-删除内部元素"><a href="#5-4-3-删除内部元素" class="headerlink" title="5.4.3 删除内部元素"></a>5.4.3 删除内部元素</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除内部所有 子元素</span><br><span class="line">$(<span class="string">"#div1"</span>).empty();</span><br></pre></td></tr></table></figure><h4 id="5-4-4-复制节点"><a href="#5-4-4-复制节点" class="headerlink" title="5.4.4 复制节点"></a>5.4.4 复制节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var firstDiv = $(<span class="string">"#div1"</span>);</span><br><span class="line">var copy= firstDiv.clone()</span><br><span class="line">firstDiv.after(copy);</span><br></pre></td></tr></table></figure><h3 id="5-5-综合案例（添加用户）"><a href="#5-5-综合案例（添加用户）" class="headerlink" title="5.5 综合案例（添加用户）"></a>5.5 综合案例（添加用户）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;姓名:&lt;input id=<span class="string">"name"</span> <span class="built_in">type</span>=<span class="string">"text"</span> &gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;邮箱:&lt;input id=<span class="string">"email"</span> <span class="built_in">type</span>=<span class="string">"text"</span> &gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;年龄:&lt;input id=<span class="string">"age"</span> <span class="built_in">type</span>=<span class="string">"text"</span> &gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;button onclick=<span class="string">"add()"</span>&gt;添加&lt;/button&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;邮箱&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tbody  id=<span class="string">"tb"</span>&gt;</span><br><span class="line">        &lt;td&gt;一只柴犬&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;yu@qq.com&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;button value=<span class="string">"一只柴犬"</span> onclick=<span class="string">"shanchu(this)"</span>&gt;删除&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">     div&#123;</span><br><span class="line">         width: 200px;</span><br><span class="line">         height: 200px;</span><br><span class="line">         border: 1px solid blue;</span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"> &lt;!--引入jquery文件--&gt;</span><br><span class="line"> &lt;script src=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script  <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"> //添加用户</span><br><span class="line">     <span class="keyword">function</span> <span class="function"><span class="title">add</span></span>() &#123;</span><br><span class="line">         var name = $(<span class="string">"#name"</span>).val();</span><br><span class="line">         var email = $(<span class="string">"#email"</span>).val();</span><br><span class="line">         var age = $(<span class="string">"#age"</span>).val();</span><br><span class="line">//这边的格式复制过来就行</span><br><span class="line">         var tr = $(<span class="string">"&lt;tr&gt;\n"</span>+</span><br><span class="line">                     <span class="string">"&lt;td&gt;"</span>+name+<span class="string">"&lt;/td&gt;\n"</span>+</span><br><span class="line">                     <span class="string">"&lt;td&gt;"</span>+email+<span class="string">"&lt;/td&gt;\n"</span>+</span><br><span class="line">                     <span class="string">"&lt;td&gt;"</span>+age+<span class="string">"&lt;/td&gt;\n"</span>+</span><br><span class="line">                     <span class="string">"&lt;td&gt;&lt;button value=\"一只柴犬\" onclick=\"shanchu(this)\"&gt;删除&lt;/button&gt;&lt;/td&gt;\n"</span>+</span><br><span class="line">                     <span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line"></span><br><span class="line">         $(<span class="string">"#tb"</span>).append(tr);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">function</span> shanchu(aobj) &#123;</span><br><span class="line">         //可以通过id定位</span><br><span class="line">         // console.log($(<span class="string">"#button1"</span>).val());</span><br><span class="line">         // $(<span class="string">"#button1"</span>).parent().parent().remove();</span><br><span class="line">         console.log($(aobj).val());</span><br><span class="line">         $(aobj).parent().parent().remove();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"> &lt;style&gt;</span><br><span class="line">     table&#123;</span><br><span class="line">         width: 800px;</span><br><span class="line">         border-collapse: collapse;</span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="6-属性操作"><a href="#6-属性操作" class="headerlink" title="6. 属性操作"></a>6. 属性操作</h2><h3 id="6-1-获取属性和设置属性-attr（）"><a href="#6-1-获取属性和设置属性-attr（）" class="headerlink" title="6.1 获取属性和设置属性 attr（）"></a>6.1 获取属性和设置属性 attr（）</h3><p>attr(): 获取属性和设置属性<br>当为该方法传递一个参数时, 即为某元素的获取指定属性<br>当为该方法传递两个参数时, 即为某元素设置指定属性的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当为该方法传递一个参数时，即为某元素到的获取指定属性</span><br><span class="line">$(<span class="string">"#myImg"</span>).attr(<span class="string">"src"</span>);</span><br><span class="line">//当为该方法传递两个参数时，即为某元素设置指定属性的值</span><br><span class="line">$(<span class="string">"#myImg"</span>).attr(<span class="string">"height"</span>,<span class="string">"200"</span>);</span><br></pre></td></tr></table></figure><h3 id="6-2-html内容操作-html（）"><a href="#6-2-html内容操作-html（）" class="headerlink" title="6.2 html内容操作  html（）"></a>6.2 html内容操作  html（）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取一个html的所有元素</span><br><span class="line">   $(<span class="string">"#myDiv"</span>).html()</span><br><span class="line">   //是直接替换 不是追加</span><br><span class="line">   $(<span class="string">"#myDiv"</span>).html(<span class="string">"&lt;input name='username'/&gt;"</span>)</span><br></pre></td></tr></table></figure><h3 id="6-3-input内容操作-val（）"><a href="#6-3-input内容操作-val（）" class="headerlink" title="6.3 input内容操作  val（）"></a>6.3 input内容操作  val（）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取内容值</span><br><span class="line">$(<span class="string">"#username"</span>).val()</span><br><span class="line">//设置input中的内容为你好</span><br><span class="line">   $(<span class="string">"#username"</span>).val(<span class="string">"你好"</span>);</span><br></pre></td></tr></table></figure><h3 id="6-4-CSS内容操作-css（）"><a href="#6-4-CSS内容操作-css（）" class="headerlink" title="6.4 CSS内容操作  css（）"></a>6.4 CSS内容操作  css（）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查询css内容 必须有属性</span><br><span class="line">$(<span class="string">"#myDiv"</span>).css(<span class="string">"width"</span>)</span><br><span class="line">//设置css内容 </span><br><span class="line">   $(<span class="string">"#myDiv"</span>).css(<span class="string">"width"</span>,<span class="string">"300px"</span>);</span><br></pre></td></tr></table></figure><h2 id="7-样式操作"><a href="#7-样式操作" class="headerlink" title="7. 样式操作"></a>7. 样式操作</h2><h3 id="7-1-类操作-class（）"><a href="#7-1-类操作-class（）" class="headerlink" title="7.1 类操作  class（）"></a>7.1 类操作  class（）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//添加class</span><br><span class="line">$(<span class="string">"#myDiv2"</span>).addClass(<span class="string">"div2"</span>);</span><br><span class="line">//移除class</span><br><span class="line">   $(<span class="string">"#myDiv2"</span>).removeClass();</span><br><span class="line">   //没有就加上，有就删掉</span><br><span class="line">   $(<span class="string">"#myDiv2"</span>).toggleClass(<span class="string">"div2"</span>);</span><br><span class="line">   //判断元素中是否含有某个 class, 如果有, 则返回 <span class="literal">true</span>; 否则返回 <span class="literal">false</span></span><br><span class="line">   $(<span class="string">"#myDiv2"</span>).hasClass(<span class="string">"div2"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;JQUREY学习文档&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-JQuery是什么&quot;&gt;&lt;a href=&quot;#1-JQuery是什么&quot; class=&quot;headerlink&quot; title=&quot;1. JQuery是什么&quot;&gt;&lt;/a&gt;1. JQuery是什么&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo_fortest</title>
    <link href="http://yoursite.com/2020/06/23/hexo_fortest/"/>
    <id>http://yoursite.com/2020/06/23/hexo_fortest/</id>
    <published>2020-06-23T10:19:24.453Z</published>
    <updated>2020-06-23T10:19:31.648Z</updated>
    
    <content type="html"><![CDATA[<p>hexo默认主题是landscape，如果只是修改theme参数下的文件地址，给我出了这么个玩意</p><blockquote><p>extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</p></blockquote><p>说一下解决办法<br>1、在hexo目录下打开git bash，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200623171509235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2、清除缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>3、生成静态文件，查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>之后就可以在 </p><blockquote><p><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p></blockquote><p>本地地址 即可查看到 配置成功的主题网页</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo默认主题是landscape，如果只是修改theme参数下的文件地址，给我出了这么个玩意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;extends includes/layout.pug block content include ./includes/mixins/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/23/hello-world/"/>
    <id>http://yoursite.com/2020/06/23/hello-world/</id>
    <published>2020-06-23T07:48:27.221Z</published>
    <updated>2020-06-23T07:48:27.221Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
