<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只柴犬</title>
  
  <subtitle>一只柴犬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-21T07:54:57.414Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凯凯超人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSM架构的整合与实现以及三个部分各自实现的汇总</title>
    <link href="http://yoursite.com/2021/02/21/SSM%E6%9E%B6%E6%9E%84%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E4%B8%89%E4%B8%AA%E9%83%A8%E5%88%86%E5%90%84%E8%87%AA%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2021/02/21/SSM%E6%9E%B6%E6%9E%84%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E4%B8%89%E4%B8%AA%E9%83%A8%E5%88%86%E5%90%84%E8%87%AA%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B1%87%E6%80%BB/</id>
    <published>2021-02-21T07:54:50.143Z</published>
    <updated>2021-02-21T07:54:57.414Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="SSM架构的整合与实现以及三个部分各自实现的汇总">TOC</a></p><h1 id="搭建整合环境"><a href="#搭建整合环境" class="headerlink" title="搭建整合环境"></a>搭建整合环境</h1><ol><li>整合说明：SSM整合可以使用多种方式，这边选择的是XML+注解的方式。一般都用这种混合的方式。</li><li>整合思路<ol><li>先搭建整合的环境</li><li>先把Spring的配置搭建完成</li><li>再使用Spring整合SpringMVC框架</li><li>最后使用Spring’整合MyBatis框架</li></ol></li><li>创建数据库和表结构</li><li>创建maven的工程，引入坐标依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--版本锁定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    log start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  log end--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="先写Spring，确保Spring是通的"><a href="#先写Spring，确保Spring是通的" class="headerlink" title="先写Spring，确保Spring是通的"></a>先写Spring，确保Spring是通的</h2><ol><li>建立domain文件夹，先编写数据表实体类 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: domain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1923:11</span></span><br><span class="line"><span class="comment"> * 账户类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建service文件夹，编写接口和实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1923:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1923:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有的账号"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在resources配置文件 applicationContext.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--把类交给IOC容器去管理 就是开启注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"service"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建test文件夹，编写测试类代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1923:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试Spring是不是好使</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建工厂,加载配置文件</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取service，对象，调用方法</span></span><br><span class="line">        AccountService service = applicationContext.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        service.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring整合SpringMVC框架"><a href="#Spring整合SpringMVC框架" class="headerlink" title="Spring整合SpringMVC框架"></a>Spring整合SpringMVC框架</h1><h2 id="搭建和测试SpringMVC的开发环境"><a href="#搭建和测试SpringMVC的开发环境" class="headerlink" title="搭建和测试SpringMVC的开发环境"></a>搭建和测试SpringMVC的开发环境</h2><ol><li>在web.xml中配置DispatcherServlet前端控制器<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载springmvc.xml配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--启动就加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在web.xml中配置DispatcherServlet过滤器<strong>解决中文乱码</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决post请求中文乱码的过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置springmvc.xml中的内容。开启springmvc的注解，配置视图解析器等</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.alibaba.com/schema/stat"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/tx/spring-tx.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--把类交给IOC容器去管理 就是开启注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"service"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--跳转的页面的路径--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/pages/"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--跳转的页面的后缀名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--异常处理器、文件上传解析器，拦截器、哪些资源--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mvc注解支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建controller的文件夹作为表现层，编写控制器代码做测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/2012:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有的账号"</span>);</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//suc为pages页面下的一个jsp页面 </span></span><br><span class="line">        mv.setViewName(<span class="string">"suc"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合SpringMVC的框架"><a href="#Spring整合SpringMVC的框架" class="headerlink" title="Spring整合SpringMVC的框架"></a>Spring整合SpringMVC的框架</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210220124330201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>目的：在controller中能成功的调用service对象中的方法</li><li>在项目启动的时候，<strong>前端配置器</strong> 就会去加载applicationContext.xml的配置文件，<strong>在web.xml中配置ContextLoaderListner监听器</strong>（该监听器智能加载WEB-INF目录下的applicationContext.xml的配置文件），即用监听器去加载applicationContext.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听器，监听器会默认加载/WEB-INF目录下的配置文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--因为有默认加载的路径，我们的文件在resources下 第一种方法是用全局初始化参数</span></span><br><span class="line"><span class="comment">  第二种就是在WEB-INF下复制一个--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>将service对象注入到controller IOC容器中。 然后controller类方法就可以调用service类的方法了。</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入service对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有的账号"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用service对象的方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"suc"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring整合MyBatis框架"><a href="#Spring整合MyBatis框架" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h1><h2 id="搭建和测试MyBatis的环境"><a href="#搭建和测试MyBatis的环境" class="headerlink" title="搭建和测试MyBatis的环境"></a>搭建和测试MyBatis的环境</h2><ol><li>在web项目中的resources下编写sqlMapConfig.xml的配置文件，编写核心配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> &gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    是否使用连接池，内置的连接池</span></span><br><span class="line"><span class="comment">                    type一共有三种取值</span></span><br><span class="line"><span class="comment">                        POOLED  使用内置连接池（原理），对应类 PooledDataSource</span></span><br><span class="line"><span class="comment">                        UNPOOLED 不适用连接池，对应类 UnPooledDataSource</span></span><br><span class="line"><span class="comment">                        JNDI 使用JNDI方式使用连接池（非常麻烦）</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"jksroot"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    引入映射的配置文件,采用注解的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个dao文件夹，编写AccountDao接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(value = <span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建test文件夹，编写测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建工厂</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//创建session</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        AccountDao mapper = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(mapper);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        List&lt;Account&gt; list = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : list)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBatis的框架（有问题出不来）"><a href="#Spring整合MyBatis的框架（有问题出不来）" class="headerlink" title="Spring整合MyBatis的框架（有问题出不来）"></a>Spring整合MyBatis的框架（有问题出不来）</h2><p>把Dao生成的代理对象，存入到IOC容器中就行。即将Dao的代理对象注入到上层的service对象中。<br><strong>将SqlSessionFactory类交给IOC容器进行管理</strong>。</p><ol><li><p>目的：把<strong>SqlMapConfig.xml配置文件中的内容</strong>配置到applicationContext.xml配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置开源连接池Druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"jksroot"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring整合MyBatis框架,SqlSessionFactoryBean创建工厂对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置扫描dao接口所在包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在AccountDao接口中添加@Repository</p></li><li><p>在service中注入dao对象，即AccountService类内注入AccountDao的对象。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Service 将类放到IOC容器中</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有的账号"</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外需要配置事务以及增强的话，在applicationContext.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>  <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务的增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public * service.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;SSM架构的整合与实现以及三个部分各自实现的汇总&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;搭建整合环境&quot;&gt;&lt;a href=&quot;#搭建整合环境&quot; class=&quot;headerlink&quot; title=&quot;搭建整合环境&quot;&gt;&lt;/a&gt;搭建整合环境&lt;/h1&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringMVC（二）响应数据、实现文件上传、异常处理与拦截器</title>
    <link href="http://yoursite.com/2021/02/19/SpringMVC%EF%BC%88%E4%BA%8C%EF%BC%89%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E3%80%81%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2021/02/19/SpringMVC%EF%BC%88%E4%BA%8C%EF%BC%89%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E3%80%81%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2021-02-19T13:40:50.938Z</published>
    <updated>2021-02-19T13:40:58.267Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="SpringMVC（二）响应数据、实现文件上传、异常处理与拦截器">TOC</a></p><h1 id="响应数据和结果视图"><a href="#响应数据和结果视图" class="headerlink" title="响应数据和结果视图"></a>响应数据和结果视图</h1><h2 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h2><p>返回String</p><ol><li>Controller方法返回字符串可以指定逻辑视图的名称，根据视图解析器为物理视图的地址。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save1.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>返回值void</li><li>如果控制器的方法返回值编写成void，执行程序报404异常，默认查找JSP页面没有找到。<ol><li>默认会跳转到@RequestMapping(“/save2.do”)对应的/pages/save2.do.jsp的页面</li></ol></li><li>可以通过获取Servlet的API ，使用请求转发或者重定向跳转到指定的页面<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回void</span></span><br><span class="line"><span class="comment"> * 默认会查询 /pages/save2.do.jsp的页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save2.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/pages/suc.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC框架提供的转发与重定向"><a href="#SpringMVC框架提供的转发与重定向" class="headerlink" title="SpringMVC框架提供的转发与重定向"></a>SpringMVC框架提供的转发与重定向</h2>ModelAndView<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回ModelAndView对象的方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ModelAndView对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save3.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了"</span>);</span><br><span class="line">    <span class="comment">//创建mv对象</span></span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//把一些数据，存储到modelAndView对象中</span></span><br><span class="line">    modelAndView.addObject(<span class="string">"msg"</span>,<span class="string">"用户名或者密码已经存在"</span>);</span><br><span class="line">    <span class="comment">//设置逻辑视图名称 就是跳转的页面</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">"suc"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>重定向路径String（<strong>测试不对</strong>）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 请求转发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save4.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/pages/suc.jsp"</span>;</span><br><span class="line">    <span class="comment">//重定向</span></span><br><span class="line">    <span class="comment">//return "redirect:/pages/suc.jsp";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以通过获取Servlet的API ，使用请求转发或者重定向跳转到指定的页面<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回void</span></span><br><span class="line"><span class="comment"> * 默认会查询 /pages/save2.do.jsp的页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save2.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/pages/suc.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="ResponseBody响应json数据（有问题没弄出来）"><a href="#ResponseBody响应json数据（有问题没弄出来）" class="headerlink" title="ResponseBody响应json数据（有问题没弄出来）"></a>ResponseBody响应json数据（有问题没弄出来）</h2><p>json字符串和javaBean对象相互转换的过程中，需要使用jackson的jar包   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外DispatcherServlet如果配置的是 <strong>/</strong> 会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而无法使用。所以uYao配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置<br>标签配置不过滤</p><ol><li>location元素表示webapp目录下的包下的所有文件</li><li>mapping元素表示以 /static 开头的所有请求路径，如 /static/a 或者 /static/a/b</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    设置静态资源不过滤--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h1><p>实现文件上传的总体流程如下图所示<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210219143513869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="文件上传的准备"><a href="#文件上传的准备" class="headerlink" title="文件上传的准备"></a>文件上传的准备</h2><ol><li><p>导入文件上传的jar包，pom.xml配置相关依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实现文件上传的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写文件上传的JSP页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/fileupload.do"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC传统方式文件上传"><a href="#SpringMVC传统方式文件上传" class="headerlink" title="SpringMVC传统方式文件上传"></a>SpringMVC传统方式文件上传</h2></li><li><p>在springmvc.xml中配置文件解析器对象。</p><blockquote><pre><code>SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的name属性名称相同</code></pre></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传的解析器组件。id的名称是固定的，不能乱写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置上传文件的总大小唯 8M=8×1024×1024=8388608        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"8388608"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>功能实现控制器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1813:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultipartFile upload 文件上传解析器对象解析request后，文件上传对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> upload 指的是上传那个的name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fileupload.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile upload,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">//把文件上传到哪个文职</span></span><br><span class="line">        String realPath = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads"</span>);</span><br><span class="line">        <span class="comment">//创建该文件夹</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">        <span class="comment">//判断该文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            <span class="comment">//不存在该文件夹则创建一个</span></span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取到上传文件的名称</span></span><br><span class="line">        String filename = upload.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把文件的名称修改成为唯一的值 sdfs-csdf-fwer-sdfw</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>).toUpperCase();</span><br><span class="line">        <span class="comment">//唯一的值</span></span><br><span class="line">        filename = uuid+<span class="string">"_"</span>+filename;</span><br><span class="line">        System.out.println(<span class="string">"文件名称："</span>+filename);</span><br><span class="line">        <span class="comment">//上传文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            upload.transferTo(<span class="keyword">new</span> File(file,filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC的异常处理"><a href="#SpringMVC的异常处理" class="headerlink" title="SpringMVC的异常处理"></a>SpringMVC的异常处理</h1><h2 id="异常处理思路"><a href="#异常处理思路" class="headerlink" title="异常处理思路"></a>异常处理思路</h2>Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进行异常的处理。具体流程如下：</li></ol><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210219160924559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="SpringMVC的异常处理-1"><a href="#SpringMVC的异常处理-1" class="headerlink" title="SpringMVC的异常处理"></a>SpringMVC的异常处理</h2><ol><li><p>自定义异常类  SysException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1916:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">//提示消息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义异常处理器  SysExceptionResolver</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1916:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序出现了异常，调用异常处理器中的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在控制台打印异常的信息</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//做强转</span></span><br><span class="line">        SysException exception = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断 e是否是SysException的一个实例</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SysException)&#123;</span><br><span class="line">            exception = (SysException)e;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            exception = <span class="keyword">new</span> SysException(<span class="string">"系统正在维护，请联系管理员"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存入异常提示信息</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"errorMsg"</span>,e.getMessage());</span><br><span class="line">        <span class="comment">//设置跳转的页面</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        System.out.println(<span class="string">"这是resolveException"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在springmvc.xml下 注册异常处理器组件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册异常处理器组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"SysExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"demo1.SysExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>写一个异常测试代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1916:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了"</span>);</span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="keyword">int</span> a =<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对应error页面的代码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>错误提示页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>错误提示的页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">$&#123;errorMsg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SpringMVC框架中的拦截器"><a href="#SpringMVC框架中的拦截器" class="headerlink" title="SpringMVC框架中的拦截器"></a>SpringMVC框架中的拦截器</h1><h2 id="拦截器的描述"><a href="#拦截器的描述" class="headerlink" title="拦截器的描述"></a>拦截器的描述</h2><ol><li>SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术</li><li>可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行</li><li>拦截器和过滤器的功能比较类似，有区别<ol><li>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术</li><li>拦截器是SpringMVC框架独有的</li><li>过滤器配置了 /* ，可以拦截任何资源</li><li>拦截器只会对控制器中的方法进行拦截</li></ol></li><li>拦截器 也是AOP思想的一种实现方式</li><li>想要自定义拦截器，需要实现HandlerInterceptor 接口</li></ol><h2 id="自定义拦截器步骤"><a href="#自定义拦截器步骤" class="headerlink" title="自定义拦截器步骤"></a>自定义拦截器步骤</h2><ol><li>创建类，实现HandlerInterceptor 接口，重写需要的方法。这边需要ctrl+o 找到重写方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1919:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截Controller中方法，若放行了，执行controller中的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle拦截器"</span>);</span><br><span class="line">        <span class="comment">//我可以手动跳转页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(request,response);</span><br><span class="line">        <span class="comment">//false就是拦截但不放行  true就是拦截但是放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * controller方法执行完后，要拦截的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * controller跳转的jsp页面都执行完成了，最后执行该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在springmvc.xml中拦截器类配置bean </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置拦截器们--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该拦截器拦截哪些资源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/role/**"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--哪些资源不想被拦截--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;mvc:exclude-mapping path=""/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--拦截器对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"demo1.MyInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置多个拦截器"><a href="#配置多个拦截器" class="headerlink" title="配置多个拦截器"></a>配置多个拦截器</h2><p>在springmvc.xml中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置拦截器们--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该拦截器拦截哪些资源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/role/**"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--哪些资源不想被拦截--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;mvc:exclude-mapping path=""/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--拦截器对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"demo1.MyInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该拦截器拦截哪些资源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--拦截器对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"demo1.MyInterceptor2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;SpringMVC（二）响应数据、实现文件上传、异常处理与拦截器&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;响应数据和结果视图&quot;&gt;&lt;a href=&quot;#响应数据和结果视图&quot; class=&quot;headerlink&quot; title=&quot;响应数据和结果视图&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringMVC（一）框架实现、请求参数绑定与常用注解</title>
    <link href="http://yoursite.com/2021/02/17/SpringMVC%EF%BC%88%E4%B8%80%EF%BC%89%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E3%80%81%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2021/02/17/SpringMVC%EF%BC%88%E4%B8%80%EF%BC%89%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E3%80%81%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-02-17T09:54:12.764Z</published>
    <updated>2021-02-17T09:54:20.126Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="SpringMVC（一）框架实现、请求参数绑定与常用注解">TOC</a></p><h1 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h1><p>SpringMVC用于表现层，与客户端进行数据交互。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210215135202613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>SpringMVC是一种基于java实现的MVC设计模型的请求驱动类型的轻量级WEB框架</li><li>SpringMVC是Spring的产品之一，用于表现层框架</li><li>表现层框架还有之前的Struts2，两种的区别在SpringMVC是单例模式</li><li>SSM架构指的是 Spring + Spring MVC + MyBatis</li></ol><h1 id="SpringMVC框架实现"><a href="#SpringMVC框架实现" class="headerlink" title="SpringMVC框架实现"></a>SpringMVC框架实现</h1><blockquote><p>入门案例需求：编写JSP的页面，编写超链接，点击链接，发送请求，SpringMVC框架处理请求，转发到成功页面。</p></blockquote><ol><li>创建maven的web项目，pom.xml 引入坐标依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--版本锁定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写index.jsp和suc.jsp   suc.jsp为跳转页面<br>index.jsp<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>入门程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--超链接--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>入门<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/hello.do"</span>&gt;</span>入门程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>suc.jsp</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>成功了哦<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>编写Controller（控制器类），方法就可以去执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring_demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1522:09</span></span><br><span class="line"><span class="comment"> * 控制类，处理用户的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//把当前类交给IOC容器进行管理</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理点击超链接发送过来的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置映射的配置，请求路径和方法进行映射的配置</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/hello.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"入门方法执行了"</span>);</span><br><span class="line"><span class="comment">//        //跳转的JSP页面的路径，默认使用的为请求的转发</span></span><br><span class="line"><span class="comment">//        return "/WEB-INF/pages/suc.jsp";</span></span><br><span class="line">        <span class="comment">//配置了视图解析器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置前端控制器（Servlet类，SpringMVC框架提供）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载springmvc.xml配置文件，配置的为Spring的参数配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置启动就加载，即TomCat启动就自动初始化这个servlet,按顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写SpringMVC.xml配置文件（配置Spring的一些配置，开启注解扫描）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web.xml中配置了内容，启动TomCat服务器时，就会被加载。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"Spring_demo1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器，进行页面的跳转--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--跳转的页面的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--跳转的页面的后缀名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动Tomcat，测试</p><p>整个系统的流程可以概括为如图所示<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210215230433924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>客户端点了超链接 向前端控制器（DispatcherServlet，SpringMVC框架） 发送Request请求</p></li><li><p>控制器请求查找，解析请求（*.do）</p></li><li><p>返回应该找哪个带有（.do的）Controller的执行链</p></li><li><p>找到对应的Controller</p></li><li><p>执行Controller代码内容</p></li><li><p>返回ModelAndView，即跳转页面封装等给处理器适配器</p></li><li><p>返回ModelAndView给 前端控制器（DispatcherServlet）</p></li><li><p>如果采用了视图解析器，则整合一下得到完全路径</p></li><li><p>返回对应的视图地址给 前端控制器（DispatcherServlet）</p></li><li><p>进行视图渲染，将模型数据填充到request域中。显示页面</p></li></ol><p>如上我们并没有配置处理器映射器、Handler处理器以及处理器适配器，因为我们采用的是注解的形式。他全部都是封装的，自带这三个端。我们只要写前端控制器以及视图解析器即可。他是默认开启的，如果要用代码的话就是，springmvc配置文件中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--让映射器、配置器和处理器生效（默认不配置也是可以的）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h2><ol><li>@RequestMapping注解的作用是建立请求URL和处理类或者方法之间的对应关系</li><li>@RequestMapping注解可以作用在方法和类上<ol><li>作用在类上：第一级访问目录</li><li>做用在方法上：第二级的访问目录</li><li>细节：路径可以不编写，/表示应用的根目录开始</li></ol></li><li>@RequestMapping的属性<ol><li>path  指定请求路径的url</li><li>value value属性与path效果一致，但是默认的 不写就是value</li><li>method 指定该方法的请求方式</li><li>params 指定限制请求参数的条件   </li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * /role/save.do</span></span><br><span class="line"><span class="comment">     * method 当前允许请求方式的访问 get、put、post啥的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save.do"</span>,method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存角色"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"delete.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除角色"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="请求参数绑定"><a href="#请求参数绑定" class="headerlink" title="请求参数绑定"></a>请求参数绑定</h1><h2 id="绑定离散参数"><a href="#绑定离散参数" class="headerlink" title="绑定离散参数"></a>绑定离散参数</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>请求参数绑定入门<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/save1.do"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数的绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save1.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(String username,Integer age)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名: "</span>+username);</span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点</p><ol><li>要保证JSP内name的值，与控制器参数的值一致。框架内部这边采用的是反射的方式，来封装相同名称的数据</li><li>另外，input框得到的其实都是字符串数据，他这边也会自动帮你做类型的转化，转化成Intger型</li></ol><h2 id="封装实体类来绑定参数（顺便带有-尸体类成员、集合list以及Map）"><a href="#封装实体类来绑定参数（顺便带有-尸体类成员、集合list以及Map）" class="headerlink" title="封装实体类来绑定参数（顺便带有 尸体类成员、集合list以及Map）"></a>封装实体类来绑定参数（顺便带有 尸体类成员、集合list以及Map）</h2><p>首先先写一个实体类（javaBean），用于封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String username;</span><br><span class="line">    Integer age;</span><br><span class="line">    <span class="comment">//这是一个实体类成员</span></span><br><span class="line">    Address address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Address 类型的集合list</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Address&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Address&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Address&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对应的JSP实现功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>请求参数绑定用实体类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/save2.do"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--</span>        <span class="attr">address</span>对象内的<span class="attr">address</span>属性赋值<span class="attr">--</span>%&gt;</span></span><br><span class="line">        地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.address"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        集合：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[0].address"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        集合：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[1].address"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应实现功能的控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数的绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save1.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(String username,Integer age)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名: "</span>+username);</span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save2.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(<span class="string">"姓名: "</span>+user.getUsername());</span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>+user.getAge());</span><br><span class="line">        System.out.println(<span class="string">"地址："</span>+user.getAddress().address);</span><br><span class="line">        System.out.println(<span class="string">"集合第一个元素："</span>+user.getList().get(<span class="number">0</span>).address);</span><br><span class="line">        System.out.println(<span class="string">"map现在没做"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决中文会乱码的问题"><a href="#解决中文会乱码的问题" class="headerlink" title="解决中文会乱码的问题"></a>解决中文会乱码的问题</h2><p>配置解决中文乱码问题的过滤器。使用Spring自带的。在web.xml进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置解决中文乱码问题的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指定使用编码集--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个是过滤器里的成员名字就是encoding--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现字符串转日期（自定义类型转换器）-一般不用这种"><a href="#实现字符串转日期（自定义类型转换器）-一般不用这种" class="headerlink" title="实现字符串转日期（自定义类型转换器） 一般不用这种"></a>实现字符串转日期（自定义类型转换器） 一般不用这种</h2><p>先构建一个类型转换类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringtoDate</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请输入内容"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行转换</span></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//进行转换</span></span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(s);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在springMVC.xml中配置 类型转换器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置日期类型转换器，类型转换器的组件，把日期类型转换注入到组件对象中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"demo.Spring_demo2.StringtoDate"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--让映射器、配置器和处理器生效（默认不配置也是可以的）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取Servlet原生API"><a href="#获取Servlet原生API" class="headerlink" title="获取Servlet原生API"></a>获取Servlet原生API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"save3.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save3</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span></span>&#123;</span><br><span class="line">    System.out.println(httpServletRequest);</span><br><span class="line">    <span class="comment">//获取到HttpSession对象</span></span><br><span class="line">    HttpSession session = httpServletRequest.getSession();</span><br><span class="line">    </span><br><span class="line">    System.out.println(httpServletResponse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><ol><li><p>RequestParam注解</p><ol><li>作用：把请求中的指定名称的参数传递给控制器中的形参赋值</li><li>属性<ol><li>value：请求参数中的名称</li><li>required：请求参数中是否必须提供此参数，默认为true，必须提供</li><li>defaultValue：是请求的参数没提供值，给定的默认值</li></ol></li><li>实现代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dept"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数的绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save1.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestParam(value = <span class="string">"username"</span>,required = <span class="keyword">true</span>,defaultValue = <span class="string">"abv"</span>)</span> String username)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名: "</span>+username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>RequestBody注解</p><ol><li>作用：用于获取请求体的内容（注意：get方法不可以）</li><li>属性<ol><li>required：是否必须有请求体，默认值为true  </li></ol></li><li>代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dept"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数的绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save2.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求体内容 "</span>+body);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>PathVaribable注解</p><ol><li><p>作用：拥有绑定url中的占位符的。例如：url中有 /delete/{id},{id}就是占位符</p></li><li><p>属性</p><ol><li>value：指定url中的占位符名称</li></ol></li><li><p>Restful风格的URL<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210217171146865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>请求路径一样，可以根据不同的请求方式去执行后台的不同方法</li><li><strong>restful风格</strong>的URL优点<ol><li>结构清晰</li><li>符合标准</li><li>易于理解</li><li>扩展方便    </li></ol></li></ol></li><li><p>实现代码如下：      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数的绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/emp/&#123;id&#125;"</span>,method =RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过id查询员工。。。 "</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>RequestHeader注解</p><ol><li>作用：获取指定请求头的值</li><li>属性： value：请求头的名称</li><li>实现代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dept"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RequestHeader value为一个请求头的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestHeader(value = <span class="string">"Accept"</span>)</span>String header)</span>&#123;</span><br><span class="line">        System.out.println(header);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>CookieValue注解</p><ol><li>作用：用于获取指定cookie中参数的值</li><li>属性： value：cookie中参数的名称</li><li>实现代码如下</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dept"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取cookie中的JSESSIONID的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"save.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@CookieValue(value = <span class="string">"JSESSIONID"</span>)</span>String cookieValue)</span>&#123;</span><br><span class="line">        System.out.println(cookieValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"suc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;SpringMVC（一）框架实现、请求参数绑定与常用注解&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;SpringMVC概述&quot;&gt;&lt;a href=&quot;#SpringMVC概述&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC概述&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring（四）JDBC模板技术与Spring自带事务管理</title>
    <link href="http://yoursite.com/2021/02/13/Spring%EF%BC%88%E5%9B%9B%EF%BC%89JDBC%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E4%B8%8ESpring%E8%87%AA%E5%B8%A6%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2021/02/13/Spring%EF%BC%88%E5%9B%9B%EF%BC%89JDBC%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E4%B8%8ESpring%E8%87%AA%E5%B8%A6%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</id>
    <published>2021-02-13T15:21:47.302Z</published>
    <updated>2021-02-13T15:21:54.573Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Spring（四）JDBC模板技术与Spring自带事务管理">TOC</a></p><h1 id="Spring框架的JDBC模板技术（一般不用，实际还是MyBatis用的多）"><a href="#Spring框架的JDBC模板技术（一般不用，实际还是MyBatis用的多）" class="headerlink" title="Spring框架的JDBC模板技术（一般不用，实际还是MyBatis用的多）"></a>Spring框架的JDBC模板技术（一般不用，实际还是MyBatis用的多）</h1><h2 id="JDBC模板技术概述"><a href="#JDBC模板技术概述" class="headerlink" title="JDBC模板技术概述"></a>JDBC模板技术概述</h2><p>什么模板技术：Spring框架中<strong>提供了很多持久层的模板类来简化编程</strong>，使用模板类编写程序会变的简单</p><ul><li>template    模板</li><li>都是Spring框架提供XxxTemplate</li></ul><p>提供了JDBC模板，Spring框架提供的</p><ul><li>JdbcTemplate类，Connection 表示连接，管理事务    Statement    ResultSet</li></ul><h2 id="JDBC的模板类的使用（new方法-一般不用）"><a href="#JDBC的模板类的使用（new方法-一般不用）" class="headerlink" title="JDBC的模板类的使用（new方法 一般不用）"></a>JDBC的模板类的使用（new方法 一般不用）</h2><ol><li><p>创建maven工程，pom.xml 引入坐标依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试代码（自己来new对象的方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCdemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接池对象，Spring框架内置了连接池对象</span></span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        <span class="comment">// 设置4个参数</span></span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/springjdbc?useUnicode=true&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"jksroot"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 提供模板，创建对象</span></span><br><span class="line"><span class="comment">//        JdbcTemplate template = new JdbcTemplate(dataSource);</span></span><br><span class="line">        <span class="comment">//这步可以分开来做</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        template.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 完成数据的增删改查</span></span><br><span class="line">        template.update(<span class="string">"insert into account values (null,?,?)"</span>,<span class="string">"熊大"</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC的模板类的使用（使用Spring框架来管理模板类）用这个"><a href="#JDBC的模板类的使用（使用Spring框架来管理模板类）用这个" class="headerlink" title="JDBC的模板类的使用（使用Spring框架来管理模板类）用这个"></a>JDBC的模板类的使用（使用Spring框架来管理模板类）用这个</h2><p>刚才编写的代码使用的是new的方式，应该把这些类交给Spring框架来管理。</p></li><li><p>Spring管理内置的连接池。配置application.xml 的总配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/springjdbc?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"jksroot"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置jdbc模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试方法</p><ol><li>使用注释方式，单元整合<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">value</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCdemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into account values (null,?,?)"</span>,<span class="string">"柴犬啦啦啦啦"</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用普通的工厂代理方式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建工厂，加载配置文件</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//从工厂中获取到模板对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into account values (null,?,?)"</span>,<span class="string">"柴犬234"</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Spring框架使用开源的连接池"><a href="#Spring框架使用开源的连接池" class="headerlink" title="Spring框架使用开源的连接池"></a>Spring框架使用开源的连接池</h2><ol><li>配置开源的连接池，使用Druid开源的连接池，引入坐标如下</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>将数据库连接的信息配置到属性文件（db.properties）中。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/springjdbc?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=jksroot</span><br></pre></td></tr></table></figure></li><li>完成核心主配置文件（applicationContext.xml）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;开源配置连接池&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/springjdbc?useUnicode=true&amp;amp;characterEncoding=utf8" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="username" value="root" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="password" value="jksroot" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载属性文件</span></span><br><span class="line"><span class="comment">&lt;bean id="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="location" value="classpath:jdbc.properties" /&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种写法：使用提供标签的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载属性的文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置jdbc模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试用例（用的原本的工厂代理模式）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建工厂，加载配置文件</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//从工厂中获取到模板对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into account values (null,?,?)"</span>,<span class="string">"柴犬234"</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring框架的JDBC模板的增删改查"><a href="#Spring框架的JDBC模板的增删改查" class="headerlink" title="Spring框架的JDBC模板的增删改查"></a>Spring框架的JDBC模板的增删改查</h2>测试用例（用的原本的工厂代理模式），查询需要构建一个mapper封装类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: SpringJDBC_demo2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1314:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是一行一行进行数据封装的 .就是一条记录调用一次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(resultSet.getDouble(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建工厂，加载配置文件</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//从工厂中获取到模板对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update("insert into account values (null,?,?)","柴犬234",500);</span></span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update("update account set name = ?,money = ? where id = ?","七月",5000,9);</span></span><br><span class="line">        <span class="comment">//删除数据</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update("delete from account where id = ?",10);</span></span><br><span class="line">        <span class="comment">//查询数据比较麻烦，需要自己手动去封装。但是mybatis不需要考虑这个</span></span><br><span class="line"></span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanMapper());</span><br><span class="line">        <span class="keyword">for</span>(Account account :list)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="模拟转账开发"><a href="#模拟转账开发" class="headerlink" title="模拟转账开发"></a>模拟转账开发</h1><ol><li>完成转账代码 Service 代码的编写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Service接口文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out   付款人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in    收款人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(String out, String in, <span class="keyword">double</span> money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用set方法 结合配置文件 将AccountDao对象注入AccountServiceImpl中</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out       付款人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in        收款人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money     金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(String out, String in, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用dao方法</span></span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>完成转账代码 Dao 代码的编写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dao接口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 付款</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outMoney</span><span class="params">(String out,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收款</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inMoney</span><span class="params">(String in,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JdbcTemplate注入AccountDaoImpl中</span></span><br><span class="line"><span class="comment">     * 使用的是set方法结合配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outMoney</span><span class="params">(String out, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//money和out表示out转出多少money</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set money = money - ? where name = ?"</span>,money,out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inMoney</span><span class="params">(String in, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//money和in表示in转入多少money</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set money = money + ? where name = ?"</span>,money,in);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置文件，使得以上变为各自的容器内对象。将模板注入给Dao容器，我们才能在Dao实现类下，获取模板对象，通过JDBC模板对数据库进行操作。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种写法：使用提供标签的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载属性的文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置jdbc模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"demo3.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"demo3.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>测试用例（用的注解方式，因为测试类没法注入对象）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1321:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">value</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试的方式</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@org</span>.junit.Test</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            accountService.pay(<span class="string">"熊大"</span>,<span class="string">"七月"</span>,<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Dao编写的方式（第二种方式）"><a href="#Dao编写的方式（第二种方式）" class="headerlink" title="Dao编写的方式（第二种方式）"></a>Dao编写的方式（第二种方式）</h2><p>这种方式就是让AccountDaoImpl类去继承JdbcDaoSupport类，然后就可以减少注入代码的编写。只需将DataSource类注入到AccountDaoImpl类中即可。父类JdbcDaoSupport类，会帮助使用set方法注入对象再创建JDBC模板对象。<br>所以需要改变的有：<br>AccountDaoImpl实现类：继承JdbcDaoSupport类，用this.getJdbcTemplate()获取JDBC模板对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JdbcTemplate注入AccountDaoImpl中</span></span><br><span class="line"><span class="comment">     * 使用的是set方法结合配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outMoney</span><span class="params">(String out, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//money和out表示out转出多少money</span></span><br><span class="line">        <span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money - ? where name = ?"</span>,money,out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inMoney</span><span class="params">(String in, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//money和in表示in转入多少money</span></span><br><span class="line">        <span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">"update account set money = money + ? where name = ?"</span>,money,in);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件编写：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><span class="line">    &lt;!--第二种写法：使用提供标签的方式--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--加载属性的文件--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"accountDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.tx.demo3.AccountDaoImpl"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h1 id="Spring框架的事务管理"><a href="#Spring框架的事务管理" class="headerlink" title="Spring框架的事务管理"></a>Spring框架的事务管理</h1><h2 id="Spring框架的事务管理相关的类和API"><a href="#Spring框架的事务管理相关的类和API" class="headerlink" title="Spring框架的事务管理相关的类和API"></a>Spring框架的事务管理相关的类和API</h2><p> PlatformTransactionManager接口<br>     平台事务管理器。该接口有具体的实现类，根据不同的持久层框架，需要选择不同的实现类！</p><ul><li><p>​接口方法如下：</p><ul><li>void commit(TransactionStatus status)</li><li>​ void rollback(TransactionStatus status)</li></ul></li><li><p>​<strong>如果使用的Spring的JDBC模板或者MyBatis框架，需要选择DataSourceTransactionManager实现类</strong></p></li><li><p>如果使用的是Hibernate的框架，需要选择HibernateTransactionManager实现类</p></li></ul><p>TransactionDefinition接口，事务定义信息接口</p><ul><li>定义了事务隔离级别</li><li>​ 定义了事务传播行为</li></ul><h2 id="Spring框架声明式事务管理"><a href="#Spring框架声明式事务管理" class="headerlink" title="Spring框架声明式事务管理"></a>Spring框架声明式事务管理</h2><h3 id="用配置文件的方式"><a href="#用配置文件的方式" class="headerlink" title="用配置文件的方式"></a>用配置文件的方式</h3><p>用配置文件的方式，主需要用配置文件就可以实现AOP增强的效果进行事务管理，使用的事务管理是 Spring内部的。不需要自己写切面类与通知。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种写法：使用提供标签的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载属性的文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置jdbc模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"demo4.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"demo4.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--===================事务管理======================--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置平台事物管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知（Spring的事务 自己不编写切面类，通知方法也不是自己编写，Spring框架提供的）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置的为Service类中的方法名称管理--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对pay进行增强，设置隔离级别（用来防止脏读啊、幻读啥的），传播行为（业务层代码调用的问题），超时的时间--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"pay"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置AOP的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring框架提供系统通知，使用advisor标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public * cn.tx.demo4.AccountServiceImpl.pay(..))"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用配置文件-注解的方式（推荐，就是把之前的注入都采用注解方式）"><a href="#用配置文件-注解的方式（推荐，就是把之前的注入都采用注解方式）" class="headerlink" title="用配置文件+注解的方式（推荐，就是把之前的注入都采用注解方式）"></a>用配置文件+注解的方式（推荐，就是把之前的注入都采用注解方式）</h3><p>其次的话就是 在类之前添加@Transactional 表明类中所有方法都会进行事务管理。放在方法上就是该方法会事务管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>另外在主配置文件中要 保留配置平台事务管理器这一部分，其他两个部分配置可以不要。并且要开启事务注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--===================事务管理======================--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置平台事物管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用纯注解的方式（不推荐）"><a href="#用纯注解的方式（不推荐）" class="headerlink" title="用纯注解的方式（不推荐）"></a>用纯注解的方式（不推荐）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> cn.tx.demo6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"cn.tx.demo6"</span>)</span><br><span class="line"><span class="comment">//用来替代    &lt;!--开启事务注解--&gt;</span></span><br><span class="line"><span class="comment">//&lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>        <span class="comment">// 开启事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接池对象，Spring框架内置了连接池对象</span></span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        <span class="comment">// 设置4个参数</span></span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring_db"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建模板对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"dataSource"</span>)        <span class="comment">// 不仅可以作用在属性上，也可以作用方法上。</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"jdbcTemplate"</span>)          <span class="comment">// 把JdbcTemplate保存到IOC容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建平台事务管理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="comment">//这句话用来替代 &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;</span></span><br><span class="line">    <span class="comment">//&lt;property name="dataSource" ref="dataSource" /&gt;</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager manager = <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Spring（四）JDBC模板技术与Spring自带事务管理&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spring框架的JDBC模板技术（一般不用，实际还是MyBatis用的多）&quot;&gt;&lt;a href=&quot;#Spring框架的JDBC模板技术（一般不用，实际
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring（三）AOP配置文件方式以及注解方式实现</title>
    <link href="http://yoursite.com/2021/02/10/Spring%EF%BC%88%E4%B8%89%EF%BC%89AOP%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2021/02/10/Spring%EF%BC%88%E4%B8%89%EF%BC%89AOP%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-02-10T08:37:03.732Z</published>
    <updated>2021-02-10T08:37:11.203Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Spring（三）AOP配置文件方式以及注解方式实现">TOC</a></p><h1 id="AOP相关的概念"><a href="#AOP相关的概念" class="headerlink" title="AOP相关的概念"></a>AOP相关的概念</h1><h2 id="什么是AOP技术"><a href="#什么是AOP技术" class="headerlink" title="什么是AOP技术"></a>什么是AOP技术</h2><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程。<strong>其可以在不修改源代码的前提下，对程序进行增强。</strong></p><blockquote><p>AOP是一种编程范式，隶属于软工范畴，指导开发者如何组织程序结构<br>AOP最早由AOP联盟的组织提出的,制定了一套规范.Spring将AOP思想引入到框架中,必须遵守AOP联盟的规范<br><strong>通过预编译方式或者运行期动态代理实现程序功能的统一维护的一种技术</strong> AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型<br><strong>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</strong><br>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码（性能监视、事务管理、安全检查、缓存）</p></blockquote><h2 id="AOP的优势"><a href="#AOP的优势" class="headerlink" title="AOP的优势"></a>AOP的优势</h2><p>运行期间，不修改源代码的情况下对已有的方法进行增强，可以</p><ul><li>减少重复的代码</li><li>提供开发的效率</li><li>维护方便</li></ul><h2 id="AOP的底层原理"><a href="#AOP的底层原理" class="headerlink" title="AOP的底层原理"></a>AOP的底层原理</h2><ol><li>JDK的动态代理技术<ol><li>为接口创建代理类的字节码文件</li><li>使用ClassLoader将字节码文件加载到JVM</li><li>创建代理类实例对象，执行对象的目标方法</li></ol></li><li>cglib代理技术</li></ol><h1 id="Spring的AOP技术-配置文件方式"><a href="#Spring的AOP技术-配置文件方式" class="headerlink" title="Spring的AOP技术-配置文件方式"></a>Spring的AOP技术-配置文件方式</h1><h2 id="AOP相关的术语"><a href="#AOP相关的术语" class="headerlink" title="AOP相关的术语"></a>AOP相关的术语</h2><ul><li>Joinpoint(连接点) 所谓连接点是指那些被拦截到的点。在spring中,这些点指的是<strong>方法</strong>,因为spring只支持方法类型的连接点。<strong>简单的说就是，被增强类里的所有方法就叫做连接点。</strong></li><li>Pointcut(切入点) – 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。<strong>简单的说就是，被增强类中那些准备增强的方法叫做切入点，通过配置文件设定哪些方法为切入点。</strong></li><li>Advice(通知/增强)– 所谓通知是指拦截到Joinpoint之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)。<strong>简单的说就是，比如我现在要增强sava()方法，希望其之前先判断用户权限，在不改变源代码的情况下，这个功能的实现代码叫做通知或者增强，其表现为方法。</strong></li><li>Target(目标对象)– 代理的目标对象</li><li>Weaving(织入)– 是指把增强应用到目标对象来创建新的代理对象的过程。<strong>简单的说，就是整个动态执行增强，再回来的过程。</strong></li><li>Proxy（代理）– 一个类被AOP织入增强后，就产生一个结果代理类</li><li>Aspect(切面)– 是切入点和通知的结合，以后咱们自己来编写和配置的。<strong>简单的说，在要增强的类执行到哪一步的时候，我要执行增强的功能操作。这转折的一步叫做切面。其表现为一个切面类，其中包含叫做通知的方法</strong></li></ul><h2 id="AOP配置文件方式的实现"><a href="#AOP配置文件方式的实现" class="headerlink" title="AOP配置文件方式的实现"></a>AOP配置文件方式的实现</h2><ol><li>创建maven项目，pomx.xml 引入需要的坐标依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- AOP联盟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Aspects --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aspectj --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建Spring的配置文件（在main的resources文件下创建applicationContext.xml），引入具体的AOP的schema约束<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建包结构，编写具体的接口和实现类<br>接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>实现类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层保护用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将目标类配置到Spring中即applicationContext.xml中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"AOP_demo1.UserServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>定义切面类以及其包含的通知。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: AOP_demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1014:07</span></span><br><span class="line"><span class="comment"> * 编写切面类（写配置文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyXmlAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知 或者 增强 advice</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增强了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在配置文件（applicationContext.xml）中定义切面类<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    先配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myXmlAspect"</span> <span class="attr">class</span>=<span class="string">"AOP_demo1.MyXmlAspect"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>在配置文件（applicationContext.xml）中完成aop的配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置AOP的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        正在配置切面，引入真正切面对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myXmlAspect"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置的是前置通知：目标对象方法在执行前，先增强。</span></span><br><span class="line"><span class="comment">                method表示切面类中的通知方法 pointcut表示切入点的表达式，即要增强的那个方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void AOP_demo1.UserServiceImpl.save())"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>完成测试（这里用了单元整合）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定运行的类</span></span><br><span class="line"><span class="meta">@RunWith</span>(value = SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//加载配置文件</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 按类型注入对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切入点的表达式"><a href="#切入点的表达式" class="headerlink" title="切入点的表达式"></a>切入点的表达式</h2><p>再配置切入点的时候，需要定义表达式，具体展开如下：<br>切入点表达式的格式如下：</p><ul><li>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</li><li>public 修饰符可以省略不写，不是必须要出现的。</li><li>返回值类型是不能省略不写的，根据你的方法来编写返回值。可以使用 * 代替。</li><li>包名例如：com.tx.demo3.BookDaoImpl<ul><li>首先com是不能省略不写的，但是可以使用 * 代替</li><li>中间的包名可以使用 * 号代替</li><li>如果想省略中间的包名可以使用 .. </li><li>类名也可以使用 * 号代替，也有类似的写法：*DaoImpl（推荐写法）<ul><li>方法也可以使用 * 号代替 ，Save* （推荐写法）</li><li>参数如果是一个参数可以使用 * 号代替，如果想代表任意参数使用 ..</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置AOP配置文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    先配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myXmlAspect"</span> <span class="attr">class</span>=<span class="string">"AOP_demo1.MyXmlAspect"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置AOP的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        正在配置切面，引入真正切面对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myXmlAspect"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置的是前置通知：目标对象方法在执行前，先增强。</span></span><br><span class="line"><span class="comment">                method表示切面类中的通知方法 pointcut表示切入点的表达式，即要增强的那个方法--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               切入点的表达式</span></span><br><span class="line"><span class="comment">                    execution() 写法是固定的</span></span><br><span class="line"><span class="comment">                    public 可以省略不写</span></span><br><span class="line"><span class="comment">                    方法返回值  void int String *都可以 但要对应上</span></span><br><span class="line"><span class="comment">                    类名 推荐写法为 *ServiceImpl  因为一般做项目是按模块名称分的，我们需要关注后面部分</span></span><br><span class="line"><span class="comment">                    方法名称 推荐写法：save* 同理我们关注后面部分</span></span><br><span class="line"><span class="comment">                    方法参数列表  .. 可以表示 n多引入的参数，表示有参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"log"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void AOP_demo1.UserServiceImpl.save())"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="AOP的通知类型"><a href="#AOP的通知类型" class="headerlink" title="AOP的通知类型"></a>AOP的通知类型</h2><ul><li>前置通知          目标方法执行前，进行增强。aop:before</li><li>最终通知      目标方法执行成功或者失败，进行增强。aop:after</li><li>后置通知      目标方法<strong>执行成功</strong>后，进行增强。aop:after-returning</li><li>异常通知      目标方法<strong>执行失败</strong>后，进行增强。aop:after-throwing</li><li>环绕通知      目标方法执行前后，都可以进行增强。目标对象的方法需要手动执行。aop:around</li></ul><p>环绕通知可以完美的完成上面四种：<br>接口和实现类不变。<br>切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: AOP_demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1014:07</span></span><br><span class="line"><span class="comment"> * 编写切面类（写配置文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyXmlAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示环绕通知</span></span><br><span class="line"><span class="comment">     * 在通知的方法上添加参数：ProceedingJoinPoint joinPoint Spring框架会把该对象通过参数的方式传递进来</span></span><br><span class="line"><span class="comment">     * joinPoint所代表的就是userServiceImpl类的save方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String msg = joinPoint.getSignature().toString();</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"增强了1"</span>);</span><br><span class="line">        <span class="comment">//手动让save方法去执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">"增强了2"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">"增强了4"</span>);</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"AOP_demo1.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置AOP配置文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    先配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myXmlAspect"</span> <span class="attr">class</span>=<span class="string">"AOP_demo1.MyXmlAspect"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置AOP的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        正在配置切面，引入真正切面对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myXmlAspect"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置的是前置通知：目标对象方法在执行前，先增强。</span></span><br><span class="line"><span class="comment">                method表示切面类中的通知方法 pointcut表示切入点的表达式，即要增强的那个方法--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               切入点的表达式</span></span><br><span class="line"><span class="comment">                    execution() 写法是固定的</span></span><br><span class="line"><span class="comment">                    public 可以省略不写</span></span><br><span class="line"><span class="comment">                    方法返回值  void int String *都可以 但要对应上</span></span><br><span class="line"><span class="comment">                    类名 推荐写法为 *ServiceImpl  因为一般做项目是按模块名称分的，我们需要关注后面部分</span></span><br><span class="line"><span class="comment">                    方法名称 推荐写法：save* 同理我们关注后面部分</span></span><br><span class="line"><span class="comment">                    方法参数列表  .. 可以表示 n多引入的参数，表示有参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"logAround"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void AOP_demo1.UserServiceImpl.save())"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring的AOP技术-注解方式"><a href="#Spring的AOP技术-注解方式" class="headerlink" title="Spring的AOP技术-注解方式"></a>Spring的AOP技术-注解方式</h1><h2 id="AOP注解方式实现"><a href="#AOP注解方式实现" class="headerlink" title="AOP注解方式实现"></a>AOP注解方式实现</h2><ol><li>创建maven工程，导入坐标。编写接口，完成IOC的操作。步骤见IOC文案</li><li>编写切面类。给切面类添加注解 @Aspect，编写增强的方法，使用通知类型注解声明<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: AOP_demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/1014:07</span></span><br><span class="line"><span class="comment"> * 编写切面类（写配置文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 把该类交给IOC去管理</span></span><br><span class="line"><span class="meta">@Aspect</span>     <span class="comment">// 声明是切面类  相当于 &lt;bean id="myXmlAspect" class="AOP_demo1.MyXmlAspect"/&gt; &lt;aop:aspect ref="myXmlAspect"&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyXmlAspect1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// @Before(value = "切入点的表达式")</span></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(public void AOP_demozhushi.DeptService1Impl.update())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增强了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件中开启自动代理<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定运行的类</span></span><br><span class="line"><span class="meta">@RunWith</span>(value = SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//加载配置文件</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext2.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService1 deptService1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        deptService1.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="通知类型的注解"><a href="#通知类型的注解" class="headerlink" title="通知类型的注解"></a>通知类型的注解</h2><p>通知类型注解</p><ul><li>​@Before – 前置通知</li><li>@AfterReturing – 后置通知</li><li>@Around – 环绕通知（目标对象方法默认不执行的，需要手动执行）</li><li>@After – 最终通知</li><li>@AfterThrowing – 异常抛出通知</li></ul><h2 id="纯注解的方式"><a href="#纯注解的方式" class="headerlink" title="纯注解的方式"></a>纯注解的方式</h2><p>纯注解，就要引入一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">package</span> cn.tx.demo3;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line">​</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>      <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"cn.tx.demo3"</span>)   <span class="comment">// 扫描包，开启IOC注解</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>     <span class="comment">// 开启自动代理 相当于配置文件中的 &lt;aop:aspectj-autoproxy /&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Spring（三）AOP配置文件方式以及注解方式实现&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;AOP相关的概念&quot;&gt;&lt;a href=&quot;#AOP相关的概念&quot; class=&quot;headerlink&quot; title=&quot;AOP相关的概念&quot;&gt;&lt;/a&gt;AOP相关的概念&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring（二）IOC注解实现、纯注解以及单元整合</title>
    <link href="http://yoursite.com/2021/02/09/Spring%EF%BC%88%E4%BA%8C%EF%BC%89IOC%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E3%80%81%E7%BA%AF%E6%B3%A8%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%8D%95%E5%85%83%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2021/02/09/Spring%EF%BC%88%E4%BA%8C%EF%BC%89IOC%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E3%80%81%E7%BA%AF%E6%B3%A8%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%8D%95%E5%85%83%E6%95%B4%E5%90%88/</id>
    <published>2021-02-09T15:59:02.519Z</published>
    <updated>2021-02-09T15:59:09.653Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Spring（二）IOC注解实现、纯注解以及单元整合">TOC</a></p><h1 id="IOC注解的方式"><a href="#IOC注解的方式" class="headerlink" title="IOC注解的方式"></a>IOC注解的方式</h1><h2 id="IOC注解实现"><a href="#IOC注解实现" class="headerlink" title="IOC注解实现"></a>IOC注解实现</h2><p>IOC注解的方式依赖没有变化</p><ol><li>编写配置文件，重点是开启注解扫描。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--扫描包路径下的所有类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"Spring_demo4"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写接口和实现类。在需要管理的类上添加@Component注解<br>接口类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>实现接口类  添加@Component注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring_demo4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/916:42</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置文件方式&lt;bean id="userServiceImpl" class="Spring_demo4.UserServiceImpl"/&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span></span></span><br><span class="line"><span class="comment"> *  public class UserServiceImpl implements UserService&#123;</span></span><br><span class="line"><span class="comment"> *与注解方式效果是一致的,只是注解方式没有id 的标识名字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以在<span class="doctag">@Component</span>(value = "userServiceImpl")这样效果就是一致的了</span></span><br><span class="line"><span class="comment"> * 翻译：组件</span></span><br><span class="line"><span class="comment"> * 含义：把当前类存放到IOC容器中，默认id值类名。首字母是小写</span></span><br><span class="line"><span class="comment"> * 如果属性名称是value:而且只写了一个属性，那么value是可以省略不懈的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userServiceImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"demo4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写测试方法，与之前编写方法是一致的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IOCZHUshi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    UserService userService = (UserService) applicationContext.getBean(<span class="string">"userServiceImpl"</span>);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其都有配置文件和注解的方式，不像MyBatis，Spring这两种都得会，经常看哪个方便用哪个，基本都是混着来都有。</p><h2 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h2><p>bean管理类常用的4个注解（<strong>作用相同，推荐使用在不同分层上</strong>）</p><ul><li>​@Component 普通的类</li><li>@Controller 表现层</li><li>@Service 业务层</li><li>@Repository 持久层</li></ul><p><strong>依赖注入常用的注解</strong></p><ul><li><p>@Value 用于注入普通类型（String，int，double等类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息 依赖注入，直接在属性上添加注解即可</span></span><br><span class="line"><span class="comment">//普通类型数据</span></span><br><span class="line"><span class="comment">//@Value(value = "柴犬")</span></span><br><span class="line"><span class="comment">//value可以省略不写</span></span><br><span class="line"><span class="meta">@Value</span>(value = <span class="string">"柴犬"</span>)</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(value = <span class="string">"10"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure></li><li><p>@Autowired 默认按类型进行自动装配（引用类型，就是UserDao这种）</p></li><li><p>​@Qualifier 和@Autowired一起使用，强制使用名称注入</p></li></ul><p>UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value = <span class="string">"userServiceImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入引用类型的对象</span></span><br><span class="line">    <span class="comment">//按类型注入，没有按id的名称来注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//这两个注解必须要一起使用</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"ud"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"demo4"</span>+msg+<span class="string">"--"</span>+age);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"ud"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层保护用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@Resource Java提供的注解，也被支持。使用name属性，按名称注入。 与上面两个一起干效果是一致的</p><p>UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value = <span class="string">"userServiceImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"ud"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"demo4"</span>+msg+<span class="string">"--"</span>+age);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"ud"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层保护用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>对象生命周期（作用范围）注解</strong></p><ul><li>@Scope 生命周期注解，取值singleton（默认值，单实例）和prototype（多例）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(value = <span class="string">"singleton"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC纯注解的方式"><a href="#IOC纯注解的方式" class="headerlink" title="IOC纯注解的方式"></a>IOC纯注解的方式</h2><p>纯注解的方式是微服务架构开发的主要方式，所以也是非常的重要。<strong>纯注解的目的是替换掉所有的配置文件（applicationContext.xml不需要）。但是需要编写配置类</strong>。 <strong>用于SpringBoot</strong></p><ol><li>编写接口以及实现类<br>接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepthService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>实现类 注解@Service(value = “depthService”) 相当于配置文件的bean ID</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value = <span class="string">"depthService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthServiceImpl</span> <span class="keyword">implements</span> <span class="title">DepthService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询所有部门"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置类 <strong>注解@Configuration</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，替换掉配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//声明该类是配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启注解的扫描 这边对应的是配置文件 时的 使得所有该包（全路径）下的都可以使用注解</span></span><br><span class="line"><span class="comment">//下面两种效果是一致的</span></span><br><span class="line"><span class="comment">//@ComponentScan(value = "Spring_demo5")</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"Spring_demo5"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试实现类</li></ol><p> <strong>现在是加载配置类，第一句话有所区别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IOCTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//原来：创建工厂，加载配置文件</span></span><br><span class="line">    <span class="comment">//现在：加载配置类</span></span><br><span class="line">    ApplicationContext applicationContext =<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringDemo2Config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//获取对象</span></span><br><span class="line">    DepthService depthService = (DepthService) applicationContext.getBean(<span class="string">"depthService"</span>);</span><br><span class="line">    depthService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用的注解总结"><a href="#常用的注解总结" class="headerlink" title="常用的注解总结"></a>常用的注解总结</h3><ul><li>@Configuration 声明是配置类</li><li>@ComponentScan 扫描具体包结构的</li><li>@Import注解 Spring的配置文件可以分成多个配置的，<strong>编写多个配置类</strong>。<strong>用于导入其他配置类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明当前类是配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 扫描指定的包结构</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"cn.tx.demo4"</span>)</span><br><span class="line"><span class="comment">// @ComponentScan(value = &#123;"cn.tx.demo4","cn.tx.demo3"&#125;)</span></span><br><span class="line"><span class="comment">// 引入新的配置类</span></span><br><span class="line"><span class="meta">@Import</span>(value = &#123;SpringConfig2<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种引入多个类的方法为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现在：加载配置类</span></span><br><span class="line">        ApplicationContext applicationContext =<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringDemo2Config<span class="class">.<span class="keyword">class</span>,<span class="title">SpringDemo3Config</span>.<span class="title">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>@Bean注解 将别人写的放到自己的IOC容器。只能写在方法上，<strong>表明使用此方法创建一个对象，对象创建完成保存到IOC容器中</strong><br>用配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接池对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring_db"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用配置类的Bean注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">"jdbc:mysql:///spring_db"</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring框架整合JUnit单元测试"><a href="#Spring框架整合JUnit单元测试" class="headerlink" title="Spring框架整合JUnit单元测试"></a>Spring框架整合JUnit单元测试</h1><h2 id="Spring框架整合JUnit单元测试-1"><a href="#Spring框架整合JUnit单元测试-1" class="headerlink" title="Spring框架整合JUnit单元测试"></a>Spring框架整合JUnit单元测试</h2><p><strong>每次进行单元测试的时候，都需要编写创建工厂，加载配置文件等代码，比较繁琐</strong>。Spring提供了整合Junit单元测试的技术，<strong>可以简化测试开发</strong>。</p><ol><li>必须<strong>先有Junit单元测试的环境</strong>，也就是说已经导入Junit单元测试的jar包。<strong>再导入spring-test的坐标依赖</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写类和方法，把该类交给IOC容器进行管理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepthService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类 注解@Service(value = “depthService”) 相当于配置文件的bean ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthServiceImpl</span> <span class="keyword">implements</span> <span class="title">DepthService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询所有部门"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置文件applicationContext_test.xml. <strong>不能用注解，我发现会报错</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"depthService"</span> <span class="attr">class</span>=<span class="string">"Spring_demo5.DepthServiceImpl"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>实现测试方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring_testDemo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/923:39</span></span><br><span class="line"><span class="comment"> * Spring框架整合Junit单元测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//该注解不编写，有默认值。默认值为Junit提供的，如果编写，可以指定其他值。</span></span><br><span class="line"><span class="comment">//SpringJUnit4ClassRunner就是Spring整合JUnit提供类</span></span><br><span class="line"><span class="comment">//再去运行测试方法时候，SpringJUnit4ClassRunner加载Spring配置文件</span></span><br><span class="line"><span class="meta">@RunWith</span>(value = SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//提供配置文件的路径，必须加<span class="title">classpath</span></span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">value</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//你想测试哪一个对象，只需要把这个对象注入即可</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepthService depthService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        depthService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合单元测试（纯注解方式）"><a href="#Spring整合单元测试（纯注解方式）" class="headerlink" title="Spring整合单元测试（纯注解方式）"></a>Spring整合单元测试（纯注解方式）</h2></li><li>必须<strong>先有Junit单元测试的环境</strong>，也就是说已经导入Junit单元测试的jar包。<strong>再导入spring-test的坐标依赖</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写类和方法，把该类交给IOC容器进行管理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepthService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类 注解@Service(value = “depthService”) 相当于配置文件的bean ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthServiceImpl</span> <span class="keyword">implements</span> <span class="title">DepthService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询所有部门"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring_demo5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/921:13</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置类，替换掉配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//声明该类是配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启注解的扫描 这边对应的是配置文件 时的 使得所有该包（全路径）下的都可以使用注解</span></span><br><span class="line"><span class="comment">//下面两种效果是一致的</span></span><br><span class="line"><span class="comment">//@ComponentScan(value = "Spring_demo5")</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"Spring_demo5"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>实现测试方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 3. <span class="doctag">@description</span>: Spring_testDemo1</span></span><br><span class="line"><span class="comment"> 4. <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> 5. <span class="doctag">@date</span>: 2021/2/923:39</span></span><br><span class="line"><span class="comment"> 6. Spring框架整合Junit单元测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//该注解不编写，有默认值。默认值为Junit提供的，如果编写，可以指定其他值。</span></span><br><span class="line"><span class="comment">//SpringJUnit4ClassRunner就是Spring整合JUnit提供类</span></span><br><span class="line"><span class="comment">//再去运行测试方法时候，SpringJUnit4ClassRunner加载Spring配置文件</span></span><br><span class="line"><span class="meta">@RunWith</span>(value = SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// 加载配置类</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= SpringDemo2Config<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//你想测试哪一个对象，只需要把这个对象注入即可</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepthService depthService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        depthService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Spring（二）IOC注解实现、纯注解以及单元整合&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;IOC注解的方式&quot;&gt;&lt;a href=&quot;#IOC注解的方式&quot; class=&quot;headerlink&quot; title=&quot;IOC注解的方式&quot;&gt;&lt;/a&gt;IOC注解的方式&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring（一）IOC与依赖注入</title>
    <link href="http://yoursite.com/2021/02/09/Spring%EF%BC%88%E4%B8%80%EF%BC%89IOC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2021/02/09/Spring%EF%BC%88%E4%B8%80%EF%BC%89IOC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</id>
    <published>2021-02-09T08:17:31.143Z</published>
    <updated>2021-02-09T08:17:38.383Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Spring（一）IOC与依赖注入">TOC</a></p><h1 id="Spring框架的概念"><a href="#Spring框架的概念" class="headerlink" title="Spring框架的概念"></a>Spring框架的概念</h1><p>Spring框架就像航空母舰，可以增加mybatis、SpringMVC等这些干活的战斗机的战斗力。其用于整合这些框架，让他们发挥更大的作用。Spring框架自己单干并没有啥用，其只有偶联其他框架系统干活。其实现整合的核心为：</p><ul><li>IOC：控制反转</li><li>AOP：面向切面编程，可以方便的实现对程序进行权限拦截、运行控制等功能</li></ul><p>其都有配置文件和注解的方式，不像MyBatis，Spring这两种都得会，经常看哪个方便用哪个，基本都是混着来都有。</p><h2 id="Spring框架的优点"><a href="#Spring框架的优点" class="headerlink" title="Spring框架的优点"></a>Spring框架的优点</h2><ol><li>声明式事务（开启事务，回滚事务等）的支持，只需要通过配置就可以完成对事务的管理，而无需手动编程</li><li>方便程序的测试，Spring对junit4支持，可以通过注解方便的测试Spring程序</li><li>低JavaEE API的使用难度，Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低</li></ol><h1 id="Spring的IOC核心技术"><a href="#Spring的IOC核心技术" class="headerlink" title="Spring的IOC核心技术"></a>Spring的IOC核心技术</h1><h2 id="IOC是什么"><a href="#IOC是什么" class="headerlink" title="IOC是什么"></a>IOC是什么</h2><blockquote><p>IOC（Inverse of Control）：控制反转<br>将对象创建的权利反转给Spring框架。是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。<br>解决问题：使用IOC可以解决的程序耦合性高的问题！！Spring的工厂读取配置文件。</p></blockquote><p>相比于之前的之前方式。IOC的具体思路如图所示：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210209130752740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意：</p><ol><li>Spring框架反射生成UserService等的对象，供登录注册等功能用来引用。而不是由登录功能来控制对象的创建。这样的性能更高，如果是按功能来创建对象，则首先需要找合适的内存然后再创建，效率很低。</li><li>登录以及注册的获取都是得到对象的引用地址。而不是直接拿出来，然后再放回去。</li></ol><h2 id="IOC的实现"><a href="#IOC的实现" class="headerlink" title="IOC的实现"></a>IOC的实现</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210209135516375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>不能够让IOC容器与类之间耦合，需要切断关系，通过一个xml配置文件来联通。</p><ol><li>创建Java工程，导入坐标依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写接口和实现类，编写具体的实现方法<br>接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>实现类 实现接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在main的resources下编写Spring核心的配置文件，在src目录下创建applicationContext.xml的配置文件，名称是可以任意的，但是一般都会使用默认名称。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--IOC管理bean  配置实体类 配置组件bean管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标签bean 用来管理类，把类交给IOC容器管理，IOC容器把当前类创建成对象，存入到IOC容器中。</span></span><br><span class="line"><span class="comment">        id="唯一的值，自己定义" 相当于IOC容器中村的Map的 key</span></span><br><span class="line"><span class="comment">        class="管理类的全路径 包名+类名，底层会使用反射代码创建对象" Class.forName("Spring_demo1.UserServiceImpl")</span></span><br><span class="line"><span class="comment">        当于IOC容器中村的Map的 value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"Spring_demo1.UserServiceImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>把log4j.properties的配置文件拷贝到resources目录下，做为log4j的日志配置文件。<br>编写测试方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原始方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">origin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//面向接口的编程 多态</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IOCMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建SpringIOC的工厂（容器），需要加载配置文件</span></span><br><span class="line">        <span class="comment">//工厂的接口可以通过ctrl+alt +左键查看</span></span><br><span class="line">        <span class="comment">//创建IOC容器（工厂），同时加载配置文件，就会把配置文件中类通过反射方式创建成对象</span></span><br><span class="line">        <span class="comment">//把对象存入到容器中，key="userService" value="Spring_demo1.UserServiceImpl"</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从容器中获取到对象是UserServiceImpl 我们向上强制为 UserService接口型</span></span><br><span class="line">        <span class="comment">// 面向接口的编程</span></span><br><span class="line">        UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用对象的方法</span></span><br><span class="line">        userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC技术总结"><a href="#IOC技术总结" class="headerlink" title="IOC技术总结"></a>IOC技术总结</h2><p>ApplicationContext接口，工厂的接口，使用该接口可以获取到具体的Bean对象。该接口下有两个具体的实现类。</p><ol><li>ClassPathXmlApplicationContext，加载类路径下的Spring配置文件。</li><li>FileSystemXmlApplicationContext，加载本地磁盘下的Spring配置文件。</li></ol><h2 id="Spring框架的Bean管理的配置文件方式"><a href="#Spring框架的Bean管理的配置文件方式" class="headerlink" title="Spring框架的Bean管理的配置文件方式"></a>Spring框架的Bean管理的配置文件方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"Spring_demo1.UserServiceImpl"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p>id属性，Bean起个名字，在约束中采用ID的约束，唯一，取值要求：必须以字母开始，可以使用字母、数字、连字符、下划线、句话、冒号 id:不能出现特殊字符。</p><blockquote><p>id=”唯一的值，自己定义” 相当于IOC容器中村的Map的 key<br>class=”管理类的全路径 包名+类名，底层会使用反射代码创建对象”。Class.forName(“Spring_demo1.UserServiceImpl”) 当于IOC容器中村的Map的 value</p></blockquote><p>scope属性，scope属性代表Bean的作用范围。</p><ol><li>​singleton单例（默认值），最常用的方式。</li><li>prototype多例</li><li>两者的区别在  单例就是创建了就不动了；多例是调用一次创建一次。实际来看就是</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建SpringIOC的工厂（容器），需要加载配置文件</span></span><br><span class="line"><span class="comment">//单例：当加载配置文件，UserServiceImpl就会创建成对象，UserServiceImpl构造方法就会执行</span></span><br><span class="line"><span class="comment">//多例：加载配置文件的时候，不会创建对象。UserServiceImpl构造方法不会执行</span></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从容器中获取到对象是UserServiceImpl 我们向上强制为 UserService接口型</span></span><br><span class="line"><span class="comment">// 面向接口的编程</span></span><br><span class="line"><span class="comment">//多例：才会创建对象，返回。 就是要得到IOC容器中的UserServiceImpl对象，就创建一次对象</span></span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用对象的方法</span></span><br><span class="line">userService.sayHello();</span><br></pre></td></tr></table></figure><ol start="4"><li>单例模式的生命周期和IOC容器一样。而多例没有关系</li></ol><p>​ request应用在Web项目中,每次HTTP请求都会创建一个新的Bean</p><p>​ session应用在Web项目中,同一个HTTP Session 共享一个Bean</p><blockquote><p>Bean对象的创建和销毁的两个属性配置</p><p>说明：Spring初始化bean或销毁bean时，有时需要作一些处理工作，因此spring可以在创建和拆卸bean的时候调用bean的两个生命周期方法</p><p>init-method，当bean被载入到容器的时候调用init-method属性指定的方法</p><p>destroy-method，当bean从容器中删除的时候调用destroy-method属性指定的方法</p></blockquote><h1 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h1><h2 id="依赖注入的概述"><a href="#依赖注入的概述" class="headerlink" title="依赖注入的概述"></a>依赖注入的概述</h2><p>IOC和DI的概念</p><blockquote><p>​ IOC：Inverse of Control，控制反转，将对象的创建权反转给Spring！！</p><p>​ DI：Dependency<br>Injection，依赖注入，在Spring框架负责创建Bean对象时，动态的将依赖对象注入到Bean组件中！！</p></blockquote><p>换句话说如图所示：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210209144135442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>就是我们要将持久层变成业务层的一部分，即它的一个属性。同理也可为基础属性成员进行赋值。</p><h2 id="属性的set方法注入值（99-这么干）"><a href="#属性的set方法注入值（99-这么干）" class="headerlink" title="属性的set方法注入值（99%这么干）"></a>属性的set方法注入值（99%这么干）</h2><ol><li>编写属性，提供该属性对应的set方法，编写配置文件完成属性值的注入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeptService</span></span>&#123;</span><br><span class="line">    <span class="comment">//编写dao的成员属性</span></span><br><span class="line">    <span class="keyword">private</span> DeptDao deptDao;</span><br><span class="line">    <span class="comment">//一定要给该属性提供set方法</span></span><br><span class="line">    <span class="comment">//依赖注入通过Set方法传递进来的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptDao</span><span class="params">(DeptDao deptDao)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set方法被调用了"</span>);</span><br><span class="line">        <span class="keyword">this</span>.deptDao = deptDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存部门"</span>);</span><br><span class="line">        deptDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在配置文件中，完成bean 参数配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖注入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用IOC管理DeptServiceImpl类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"deptService"</span> <span class="attr">class</span>=<span class="string">"Spring_demo2.DeptServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖注入  调用set方法 前面的name指的是前面并入类定义的属性名称 ref表示的要合并的那个小的bean的id名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptDao"</span> <span class="attr">ref</span>=<span class="string">"deptDao"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--同理，给普通数据类型注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"msg"</span> <span class="attr">value</span>=<span class="string">"柴犬"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用IOC管理DeptDapImpl类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"deptDao"</span> <span class="attr">class</span>=<span class="string">"Spring_demo2.DeptDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>实现测试方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IOCZhuRu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//获取对象</span></span><br><span class="line">    DeptService deptService = (DeptService) applicationContext.getBean(<span class="string">"deptService"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用对象的方法</span></span><br><span class="line">    deptService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性构造方法方式注入值（1-这么干）"><a href="#属性构造方法方式注入值（1-这么干）" class="headerlink" title="属性构造方法方式注入值（1%这么干）"></a>属性构造方法方式注入值（1%这么干）</h2><ol><li>创建一个Car类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name, Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Car&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件 引入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用构造方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"Spring_demo3.Car"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"奔驰"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"money"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>测试参数赋值效果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IOCGOUzao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Car car = (Car) applicationContext.getBean(<span class="string">"car"</span>);</span><br><span class="line">    System.out.println(car);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数组，集合-List-Set-Map-，Properties等的注入"><a href="#数组，集合-List-Set-Map-，Properties等的注入" class="headerlink" title="数组，集合(List,Set,Map)，Properties等的注入"></a>数组，集合(List,Set,Map)，Properties等的注入</h2><ol><li>创建一个具有数组、集合和Map的类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4Bean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//字符串类的数组</span></span><br><span class="line">    <span class="keyword">private</span> String[] strings;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrings</span><span class="params">(String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strings = strings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; string;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(List&lt;String&gt; string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,String&gt; stringStringMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStringStringMap</span><span class="params">(Map&lt;String, String&gt; stringStringMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringStringMap = stringStringMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Demo4Bean&#123;"</span> +</span><br><span class="line">                <span class="string">"strings="</span> + Arrays.toString(strings) +</span><br><span class="line">                <span class="string">", string="</span> + string +</span><br><span class="line">                <span class="string">", stringStringMap="</span> + stringStringMap +</span><br><span class="line">                <span class="string">", properties="</span> + properties +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件 引入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--给集合类型的属性植入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo4Bean"</span> <span class="attr">class</span>=<span class="string">"Spring_demo3.Demo4Bean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"strings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>肖峰<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>妹妹<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--集合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>柴犬<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>哈士奇<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"stringStringMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"老王"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bbb"</span> <span class="attr">value</span>=<span class="string">"小王"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>测试参数赋值效果，查看对象内容（toString）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IOCJiHe</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Demo4Bean demo4Bean = (Demo4Bean) applicationContext.getBean(<span class="string">"demo4Bean"</span>);</span><br><span class="line">    System.out.println(demo4Bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="多配置文件方式"><a href="#多配置文件方式" class="headerlink" title="多配置文件方式"></a>多配置文件方式</h1><h2 id="多配置文件的加载方式"><a href="#多配置文件的加载方式" class="headerlink" title="多配置文件的加载方式"></a>多配置文件的加载方式</h2><p>在src的目录下又多创建了一个配置文件，现在是两个核心的配置文件，那么加载这两个配置文件的方式有两种！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">主配置文件中包含其他的配置文件:</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext2.xml"</span>/&gt;</span></span><br><span class="line">​</span><br><span class="line">工厂创建的时候直接加载多个配置文件:</span><br><span class="line">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(</span><br><span class="line">"applicationContext.xml","applicationContext2.xml");</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Spring（一）IOC与依赖注入&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spring框架的概念&quot;&gt;&lt;a href=&quot;#Spring框架的概念&quot; class=&quot;headerlink&quot; title=&quot;Spring框架的概念&quot;&gt;&lt;/a&gt;Spring框架的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis进阶(二)延迟与注解</title>
    <link href="http://yoursite.com/2021/02/08/MyBatis%E8%BF%9B%E9%98%B6(%E4%BA%8C)%E5%BB%B6%E8%BF%9F%E4%B8%8E%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2021/02/08/MyBatis%E8%BF%9B%E9%98%B6(%E4%BA%8C)%E5%BB%B6%E8%BF%9F%E4%B8%8E%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-02-08T14:11:26.578Z</published>
    <updated>2021-02-08T14:11:33.896Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="MyBatis进阶2">TOC</a></p><h1 id="MyBatis延迟加载策略"><a href="#MyBatis延迟加载策略" class="headerlink" title="MyBatis延迟加载策略"></a>MyBatis延迟加载策略</h1><h2 id="延迟加载的概念"><a href="#延迟加载的概念" class="headerlink" title="延迟加载的概念"></a>延迟加载的概念</h2><ol><li>立即加载和延迟加载的区别，使用一对多的环境举例子</li><li>立即加载：当前查询用户的时候，默认也把该用户所拥有的账户信息查询出来了</li><li>延迟加载：当前查询用户的时候，没有把该用户所拥有的账户信息查询出来，而且使用账户数据的时候，再去查询账户的数据。</li></ol><h2 id="立即加载和延迟加载的应用场景"><a href="#立即加载和延迟加载的应用场景" class="headerlink" title="立即加载和延迟加载的应用场景"></a>立即加载和延迟加载的应用场景</h2><blockquote><ol><li>例如查询账户的时候，可以直接把用户查询出来，即查询多对一，这个时候可以选择立即加载。 例如：<code>select account.*,user.username,user.sex from account,user whereuser.id=account.uid</code><ol start="2"><li>例如查询账户的时候，可以先不查账号信息，等需要使用账户信息的时候，再去查询，选择延迟加载。  要分为两步: <code>select * from account  然后: select * from user where id=?</code></li></ol></li></ol></blockquote><h2 id="多对一：实现延迟加载"><a href="#多对一：实现延迟加载" class="headerlink" title="多对一：实现延迟加载"></a>多对一：实现延迟加载</h2><p>实现： 要分为两步: <code>select * from account  然后: select * from user where id=?</code></p><ol><li>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。Account类中需要放置User对象</li><li>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//延迟加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAccRelay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>映射配置文件：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace属性，名称空间</span></span><br><span class="line"><span class="comment">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span></span><br><span class="line"><span class="comment">    jks_mybatis_mapper.UserMapper.findAll</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 延迟加载  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAccRelay"</span> <span class="attr">resultMap</span>=<span class="string">"accountRelayMap"</span>&gt;</span></span><br><span class="line">        SELECT account.*,user.address from account,user</span><br><span class="line">WHERE account.uid=user.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置resultMap标签，目的：进行数据封装--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置resultMap，用来进行数据封装 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    id是resultMap唯一的名称，用于引用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    type是进行封装数据的类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountRelayMap"</span> <span class="attr">type</span>=<span class="string">"jks_mybatis_domain.Account"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span></span><br><span class="line"><span class="comment">            column表示数据表中的字段名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对user属性进行数据封装   把uid传给user的id 外键匹配  并调用之前写好的 通过id查找的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"jks_mybatis_domain.User"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">select</span>=<span class="string">"jks_mybatis_mapper.UserMapper.findUserById"</span> <span class="attr">fetchType</span>=<span class="string">"lazy"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>需要配置延迟</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        将积极加载改为消极加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> &gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"jksroot"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    引入映射的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>编写最后实现方法。 推荐使用代理对象的方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    AccountMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(AccountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试延迟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllLazy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        List&lt;Account&gt; list = mapper.findAccRelay();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Account account :list)&#123;</span><br><span class="line">            <span class="comment">//账号的金额</span></span><br><span class="line">            System.out.println(account.getMoney());</span><br><span class="line">            System.out.println(account.getUser().getUsername());</span><br><span class="line">            System.out.println(<span class="string">"============="</span>);</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一对多：实现延迟加载"><a href="#一对多：实现延迟加载" class="headerlink" title="一对多：实现延迟加载"></a>一对多：实现延迟加载</h2><p>实现： 要分为两步: <code>select * from user  然后: select * from account where uid=?</code></p><ol><li>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。User类中需要放置Account对象</li><li>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一对多查询 延迟查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAccDelay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询uid 对应的所有记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findUidRelay</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace属性，名称空间</span></span><br><span class="line"><span class="comment">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span></span><br><span class="line"><span class="comment">    jks_mybatis_mapper.UserMapper.findAll</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    一对多的查询 延迟版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAccDelay"</span> <span class="attr">resultMap</span>=<span class="string">"userRelayMap"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置resultMap 进行数据封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRelayMap"</span> <span class="attr">type</span>=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span></span><br><span class="line"><span class="comment">            column表示数据表中的字段名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户账号信息 发送sql语句查询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"jks_mybatis_domain.Account"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"jks_mybatis_mapper.AccountMapper.findUidRelay"</span> <span class="attr">fetchType</span>=<span class="string">"lazy"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>需要开启延迟加载</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        将积极加载改为消极加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> &gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"jksroot"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    引入映射的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>编写最后实现方法。 推荐使用代理对象的方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试多对一的查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUidRelay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findAccDelay();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1.getUsername());</span><br><span class="line">            <span class="comment">//打印每个人有多少个账户</span></span><br><span class="line">            System.out.println(user1.getAccounts().size());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟加载和立即加载好坏"><a href="#延迟加载和立即加载好坏" class="headerlink" title="延迟加载和立即加载好坏"></a>延迟加载和立即加载好坏</h2><p>延迟加载和立即加载没有好坏之分</p><ol><li><strong>多对一查询：立即加载的方式</strong><br> 先查询账户和用户都一起查询出来<br> 需求：显示账号的信息的时候，基本上都要显示用户的信息。也不会浪费内存空间。</li><li><strong>一对多查询：推荐使用延迟加载的方式</strong><br> 需求：显示用户的信息，查看用户下拥有账号的信息。一个用户对应多个账户的信息，大量的内存浪费。</li></ol><h1 id="MyBatis框架的缓存"><a href="#MyBatis框架的缓存" class="headerlink" title="MyBatis框架的缓存"></a>MyBatis框架的缓存</h1><h2 id="缓存的概念"><a href="#缓存的概念" class="headerlink" title="缓存的概念"></a>缓存的概念</h2><ol><li>在内存中临时存储数据，速度快，可以减少数据库的访问次数。</li><li>经常需要查询，不经常修改的数据，不要特别重要的数据都适合于存储到缓存中。</li></ol><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021020815521165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ol><li>MyBatis的一级缓存也是SqlSession的缓存。</li><li>SqlSession对象中维护了一个Map集合，用于存储相互的缓存数据。</li><li>查询的时候，先从SqlSession的缓存中查找，如果有，直接返回。如果没有，查询数据库。</li><li>一级缓存的原理分析<ol><li>一级缓存底层使用的是Map集合，key存储的是执行的SQL语句，value存放的是查询的对象</li><li>BaseExecutor类的152行源码地方先查询缓存，再查询数据库</li><li>一级缓存的生命周期和SqlSession的生命周期相同，SqlSession对象关闭，一级缓存也会关闭<ol><li>session.clearCache()；调用该方法可以清空缓存</li><li>调用SqlSession的update、insert、delete、commit和close等方法的时候也会清空缓存 </li></ol></li></ol></li></ol><h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ol><li>二级缓存是对一级缓存的增强，因为一级缓存的生命周期非常短暂</li><li>在SqlMapConfig.xml 主配置文件中，开启二级缓存<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;settings&gt;</span><br><span class="line">&lt;!--        开启二级缓存--&gt;</span><br><span class="line">        &lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br></pre></td></tr></table></figure></li><li>在UserMapper.xml 映射配置文件声明使用二级缓存<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    开启二级缓存--&gt;</span><br><span class="line">    &lt;cache/&gt;</span><br></pre></td></tr></table></figure></li><li>在select标签上使用二级缓存 useCache为true</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span> useCache=<span class="string">"true"</span>&gt;</span><br><span class="line">    select * from user</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>二级缓存中存储的是数据，不是对象</li><li>二级缓存的生效必须要调用session.commit()或者session.close()方法才能生效</li><li>javaBean的类需要实现Serializable接口</li></ol><h1 id="Mybatis注解"><a href="#Mybatis注解" class="headerlink" title="Mybatis注解"></a>Mybatis注解</h1><h2 id="MyBatis使用注解方式实现单表CRUD操作"><a href="#MyBatis使用注解方式实现单表CRUD操作" class="headerlink" title="MyBatis使用注解方式实现单表CRUD操作"></a>MyBatis使用注解方式实现单表CRUD操作</h2><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    查询所有的用户</span></span><br><span class="line">    <span class="comment">//@Select(value = &#123;"",""&#125;) 多个值写法</span></span><br><span class="line">    <span class="comment">//@Select(value = "") 只有一个值的写法</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt;  <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：得到user表的所有信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllLazy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.selectAll();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user :list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert  into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOne</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：User表插入一条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版insert</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testinsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"小龙虾"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"海里"</span>);</span><br><span class="line">        <span class="comment">//测试添加</span></span><br><span class="line">        mapper.insertOne(user);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;username&#125;,sex=#&#123;sex&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOne</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：修改对应ID记录的性别和名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版update</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testupdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">7</span>);</span><br><span class="line">        user.setUsername(<span class="string">"柴犬"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//测试添加</span></span><br><span class="line">        mapper.updateOne(user);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：删除对应的ID记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版delete</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testdelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//测试添加</span></span><br><span class="line">        mapper.deleteOne(<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;username&#125;"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectLike</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：查询所有名字中带柴的记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMohu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//测试添加</span></span><br><span class="line">        List&lt;User&gt; users = mapper.selectLike(<span class="string">"%柴%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis使用注解方式实现多表查询"><a href="#MyBatis使用注解方式实现多表查询" class="headerlink" title="MyBatis使用注解方式实现多表查询"></a>MyBatis使用注解方式实现多表查询</h2><h3 id="注解实现多对一查询"><a href="#注解实现多对一查询" class="headerlink" title="注解实现多对一查询"></a>注解实现多对一查询</h3><h4 id="立即加载"><a href="#立即加载" class="headerlink" title="立即加载"></a>立即加载</h4><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//立即加载</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select account.*,user.username from account,user where account.uid=user.id"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id=<span class="string">"userMap1"</span>,value = &#123;</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"uid"</span>,column = <span class="string">"uid"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"money"</span>,column = <span class="string">"money"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"user.username"</span>,column = <span class="string">"username"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：查询user与account表中id匹配的 用户账目信息以及用户姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版多对一立即加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDDY</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account:list)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延迟加载</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line"><span class="meta">@Results</span>(value = &#123;</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"uid"</span>,column = <span class="string">"uid"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"money"</span>,column = <span class="string">"money"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"user"</span>,column = <span class="string">"uid"</span>,one = <span class="meta">@One</span>(select=<span class="string">"jks_mybatis_mapper.UserMapper.findUserById"</span>,fetchType = FetchType.LAZY))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllDelay</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：查询user与account表中id匹配的 用户账目信息以及用户姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版多对一延迟加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDDYDelay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = mapper.findAllDelay();</span><br><span class="line">        <span class="keyword">for</span> (Account account:list)&#123;</span><br><span class="line">            System.out.println(account.getMoney());</span><br><span class="line">            System.out.println(account.getUser().getUsername());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解实现一对多查询"><a href="#注解实现一对多查询" class="headerlink" title="注解实现一对多查询"></a>注解实现一对多查询</h3><p>一对多推荐用延迟加载，如果立即数据太多反而累赘，性能差</p><h4 id="延迟加载-1"><a href="#延迟加载-1" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>接口文件，不需要映射配置文件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延迟加载 一对多</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="meta">@Results</span>(value = &#123;</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"username"</span>,column = <span class="string">"username"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"birthday"</span>,column = <span class="string">"birthday"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"sex"</span>,column = <span class="string">"sex"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"address"</span>,column = <span class="string">"address"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"accounts"</span>,column = <span class="string">"id"</span>,many = <span class="meta">@Many</span>(select=<span class="string">"jks_mybatis_mapper.AccountMapper.findUidRelay"</span>,fetchType = FetchType.LAZY))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findYDDelay</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>全配置文件添加，这个Mapper的全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"jks_mybatis_mapper.TotalMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现：查询user与account表中id匹配的 用户账目信息以及用户姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    TotalMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(TotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试注释版多对一延迟加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testYDDDelay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = mapper.findYDDelay();</span><br><span class="line">        <span class="keyword">for</span> (User user : list)&#123;</span><br><span class="line">            System.out.println(user.getUsername());</span><br><span class="line">            System.out.println(user.getAccounts().size());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;MyBatis进阶2&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;MyBatis延迟加载策略&quot;&gt;&lt;a href=&quot;#MyBatis延迟加载策略&quot; class=&quot;headerlink&quot; title=&quot;MyBatis延迟加载策略&quot;&gt;&lt;/a&gt;MyBatis延迟加
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis进阶</title>
    <link href="http://yoursite.com/2021/02/07/MyBatis%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2021/02/07/MyBatis%E8%BF%9B%E9%98%B6/</id>
    <published>2021-02-07T15:50:14.268Z</published>
    <updated>2021-02-07T15:50:21.606Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="MyBatis进阶">TOC</a></p><h1 id="MyBatis的连接池"><a href="#MyBatis的连接池" class="headerlink" title="MyBatis的连接池"></a>MyBatis的连接池</h1><h2 id="连接池的概念"><a href="#连接池的概念" class="headerlink" title="连接池的概念"></a>连接池的概念</h2><ol><li><p>连接池是 存储连接的容器</p></li><li><p>连接池解决了什么问题？<br>如果没有连接池，那么每次执行SQL语句都会创建connection连接，会浪费时间。</p></li><li><p>提前创建一些连接，存储到连接池中，使用的时候从连接池中获取连接即可</p></li><li><p>常用的连接池</p><ol><li>C3PO连接池</li><li>DBCP连接池</li><li>Druid连接池</li><li>连接池有归还的操作，已经对close方法进行了加强，原本是销毁，现在是规划操作</li></ol></li></ol><h2 id="MyBatis连接池的分类"><a href="#MyBatis连接池的分类" class="headerlink" title="MyBatis连接池的分类"></a>MyBatis连接池的分类</h2><p>MyBatis内置了连接池技术，dataSource标签的type属性有3个取值                 </p><ol><li>POOLED  使用内置连接池（原理），对应类 PooledDataSource</li><li>UNPOOLED 不适用连接池，对应类 UnPooledDataSource</li><li>JNDI 使用JNDI方式使用连接池（非常麻烦）</li></ol><h2 id="MyBatis连接池的实现原理分析"><a href="#MyBatis连接池的实现原理分析" class="headerlink" title="MyBatis连接池的实现原理分析"></a>MyBatis连接池的实现原理分析</h2><ol><li>在解析SqlMapConfig主配置文件的时候，创建dataSource对象，存入到Environment对象中</li><li>当执行SQL语句时，准备从dataSource对象中获取链接</li><li>PooledDataSource源码中的2个方法用来获取连接和归还链接<ol><li>popConnection方法用来获取链接<ol><li>先判断空闲的连接池中是否存在连接，如果存在，则获取一个连接使用</li><li>查看活动状态的PooledConnection池activeConnections是否已满；如果没有满，则创建一个新的PooledConnection对象，然后放到activeConnections池中，然后返回此PooledConnection对象</li><li>看最先进入activeConnection池中的PooledConnection对象是否已经过期；如果已经过期，从activeConnections池中移除此对象，然后创建一个新的PooledConnection对象，添加到activeConnections中，然后将此对象返回。</li></ol></li></ol></li></ol><h1 id="MyBatis事务管理"><a href="#MyBatis事务管理" class="headerlink" title="MyBatis事务管理"></a>MyBatis事务管理</h1><p>就是上节课提到的，增删改需要提交事务才有效果。这个提交事务有自动和手动两种方式，推荐用手动提交的方式（就是我们之前写的）</p><h1 id="MyBatis映射文件SQL深入"><a href="#MyBatis映射文件SQL深入" class="headerlink" title="MyBatis映射文件SQL深入"></a>MyBatis映射文件SQL深入</h1><h2 id="动态SQL语句之if标签：实现按名称和性别来查找记录"><a href="#动态SQL语句之if标签：实现按名称和性别来查找记录" class="headerlink" title="动态SQL语句之if标签：实现按名称和性别来查找记录"></a>动态SQL语句之if标签：实现按名称和性别来查找记录</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210207161507486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实现上面就要实现动态的拼接SQL语句。注意：要固定1=1，以免出现裸and的情况</p><p><strong>实现按模糊名称和性别来查找记录</strong></p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//if拼接查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIf</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        <span class="keyword">if</span>拼接查询</span><br><span class="line">        拼接SQ;语句，判断属性的值是否为<span class="keyword">null</span>，使用<span class="keyword">if</span>标签</span><br><span class="line">        test=<span class="string">"ODNL表达式"</span>，判断条件，如果<span class="keyword">true</span>，则执行<span class="keyword">if</span>里面的sql，反之不执行</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByIf"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"username != null and username != ''"</span>&gt;</span><br><span class="line">            and username like #&#123;username&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"sex != null and sex != ''"</span>&gt;</span><br><span class="line">            and sex= #&#123;sex&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"%柴%"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByIf(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态SQL语句之where标签：用了这个就不用考虑1-1就这技巧"><a href="#动态SQL语句之where标签：用了这个就不用考虑1-1就这技巧" class="headerlink" title="动态SQL语句之where标签：用了这个就不用考虑1=1就这技巧"></a>动态SQL语句之where标签：用了这个就不用考虑1=1就这技巧</h2><p>where标签的目的就是为了去掉之前where 1=1 的拼接的；<br>where标签使用在if标签的外面</p><p><strong>实现按模糊名称和性别来查找记录</strong></p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//if拼接查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIf</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        <span class="keyword">if</span>拼接查询</span><br><span class="line">        拼接SQ;语句，判断属性的值是否为<span class="keyword">null</span>，使用<span class="keyword">if</span>标签</span><br><span class="line">        test=<span class="string">"ODNL表达式"</span>，判断条件，如果<span class="keyword">true</span>，则执行<span class="keyword">if</span>里面的sql，反之不执行</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByIf"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"username != null and username != ''"</span>&gt;</span><br><span class="line">                and username like #&#123;username&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"sex != null and sex != ''"</span>&gt;</span><br><span class="line">                and sex= #&#123;sex&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"%柴%"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByIf(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态SQL语句之foreach标签"><a href="#动态SQL语句之foreach标签" class="headerlink" title="动态SQL语句之foreach标签"></a>动态SQL语句之foreach标签</h2><p> 需求一：需求的SQL语句：<code>SELECT * FROM  user  WHERE id=1 OR id=2 OR id=3</code></p><p><strong>像这种条件一直循环的可以使用&lt; foreach &gt;标签</strong></p><ol><li>准备mysql数据库，创建表结构，添加几条记录</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。这边需要再创建一个存储list集合的集合ids</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储多个id值</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//foreach标签</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    foreach标签</span><br><span class="line">        collection=<span class="string">"要遍历集合"</span> open=<span class="string">"开始"</span> close=<span class="string">"结束"</span> separator=<span class="string">"切割符号"</span> item=<span class="string">"遍历后变量"</span> index=<span class="string">"下标值"</span></span><br><span class="line">--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByForeach"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;foreach collection=<span class="string">"ids"</span> open=<span class="string">"id ="</span>  separator=<span class="string">"or id="</span> item=<span class="string">"i"</span> &gt;</span><br><span class="line">                #&#123;i&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//创建list集合</span></span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//给ids属性</span></span><br><span class="line">        user.setIds(ids);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByForeach(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求二：需求的SQL语句：<code>SELECT * FROM USER WHERE id IN (1,2,3)</code></p><p><strong>像这种条件一直循环的可以使用&lt; foreach &gt;标签</strong></p><ol><li>准备mysql数据库，创建表结构，添加几条记录</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。这边需要再创建一个存储list集合的集合ids</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储多个id值</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//foreach标签</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    foreach标签</span><br><span class="line">        collection=<span class="string">"要遍历集合"</span> open=<span class="string">"开始"</span> close=<span class="string">"结束"</span> separator=<span class="string">"切割符号"</span> item=<span class="string">"遍历后变量"</span> index=<span class="string">"下标值"</span></span><br><span class="line">--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByForeach"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;foreach collection=<span class="string">"ids"</span> open=<span class="string">"id in ("</span>  close=<span class="string">")"</span> separator=<span class="string">","</span> item=<span class="string">"i"</span> &gt;</span><br><span class="line">                #&#123;i&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//创建list集合</span></span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//给ids属性</span></span><br><span class="line">        user.setIds(ids);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByForeach(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取公共的SQL语句"><a href="#提取公共的SQL语句" class="headerlink" title="提取公共的SQL语句"></a>提取公共的SQL语句</h2><p>上面我们 映射配置文件 中SQL语句 <code>select * from user</code>  可以提取出来，然后引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"findAll"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByForeach"</span> <span class="attr">parameterType</span>=<span class="string">"jks_mybatis_domain.User"</span> <span class="attr">resultType</span>=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"findAll"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"id in ("</span>  <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">item</span>=<span class="string">"i"</span> &gt;</span></span><br><span class="line">            #&#123;i&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h2><ol><li>一对一 ： 完全可以设计成一张表结构，实际基本没有</li><li>一对多：比如一个用户对应一堆订单，每个订单都有用户ID这个外键</li><li>多对一：一堆订单对应一个用户</li><li>多对多：订单和商品，一个订单可以有多个商品，一个商品可以在多个订单中</li></ol><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ol><li>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。</li><li>编写映射配置文件（编写SQL语句）。<ol><li>创建两个Mapper接口文件 AccountMapper与UserMapper。</li><li>resources文件下的mappers文件中创建两个映射配置文件AccountMapper.xml与UserMapper.xml </li></ol></li><li>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件。并且记得引入上述两个映射配置文件</li><li>编写核心实现代码</li></ol><h2 id="实现内连接查询：查询User表与Account表匹配的-账户信息以及家庭住址"><a href="#实现内连接查询：查询User表与Account表匹配的-账户信息以及家庭住址" class="headerlink" title="实现内连接查询：查询User表与Account表匹配的 账户信息以及家庭住址"></a>实现内连接查询：查询User表与Account表匹配的 账户信息以及家庭住址</h2><ol><li><p>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装。<strong>考虑到封装的问题，我们要拿到User表里的信息，需要把user对象，加到Account实体类中作为属性。便于封装输出</strong></p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有的账号信息，内连接的查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span><br><span class="line">    &lt;!-- 内连接的查询   --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"accountMap"</span>&gt;</span><br><span class="line">        SELECT account.*,user.address from account,user</span><br><span class="line">WHERE account.uid=user.id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--配置resultMap标签，目的：进行数据封装--&gt;</span><br><span class="line">    &lt;!--    配置resultMap，用来进行数据封装 --&gt;</span><br><span class="line">    &lt;!--    id是resultMap唯一的名称，用于引用--&gt;</span><br><span class="line">    &lt;!--    type是进行封装数据的类型--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"accountMap"</span> type=<span class="string">"jks_mybatis_domain.Account"</span>&gt;</span><br><span class="line">        &lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span><br><span class="line">            column表示数据表中的字段名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"uid"</span> column=<span class="string">"uid"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"money"</span> column=<span class="string">"money"</span>/&gt;</span><br><span class="line">        &lt;!--property实体类中的属性，javaType实体类的类型--&gt;</span><br><span class="line">        &lt;association property=<span class="string">"user"</span> javaType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">            &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    AccountMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(AccountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;Account&gt; list = mapper.findAll();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Account account :list)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一对多查询：实现账户与用户全体信息视图输出"><a href="#一对多查询：实现账户与用户全体信息视图输出" class="headerlink" title="一对多查询：实现账户与用户全体信息视图输出"></a>一对多查询：实现账户与用户全体信息视图输出</h2><p>实现：<code>select user.*,account.* from account,user where user.id=account.uid</code><br>一对多查询的话，写在一处</p><ol><li>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。<strong>考虑到封装的问题，我们要拿到Account表里的信息，User实体类需创建一个集合存储 这个用户的所有账户</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个用户拥有多个账号</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一对多查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span><br><span class="line">&lt;!--    一对多的查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAccount"</span> resultMap=<span class="string">"userMap2"</span>&gt;</span><br><span class="line">        select user.*,account.* from account,user where user.id=account.uid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;!--    配置resultMap 进行数据封装--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userMap2"</span> type=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        &lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span><br><span class="line">            column表示数据表中的字段名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>/&gt;</span><br><span class="line">        &lt;!--对账户信息进行数据的封装  这个看我们在User实体类中添加的 属性名以及类型--&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"accounts"</span> ofType=<span class="string">"jks_mybatis_domain.Account"</span>&gt;</span><br><span class="line">            &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">            &lt;result property=<span class="string">"uid"</span> column=<span class="string">"uid"</span>/&gt;</span><br><span class="line">            &lt;result property=<span class="string">"money"</span> column=<span class="string">"money"</span>/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    AccountMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(AccountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试一对多的查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findAccount();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210207234624733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>准备mysql数据库，创建表结构，添加几条记录。并需要建造一个中间的过渡表。要添加外键。</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。<strong>考虑到封装的问题，需要在Role实体类中加入user的集合</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//角色与人员</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; users;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//多对多查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllDDD</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span><br><span class="line">    &lt;!--    多对多的查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAllDDD"</span> resultMap=<span class="string">"roleMap"</span>&gt;</span><br><span class="line">        select user.username,role.* from user,role,user_role where user.id=user_role.uid and role.id=user_role.rid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--    配置resultMap 进行数据封装--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"roleMap"</span> type=<span class="string">"jks_mybatis_domain.Role"</span>&gt;</span><br><span class="line">        &lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span><br><span class="line">            column表示数据表中的字段名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"rolename"</span> column=<span class="string">"rolename"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"roledesc"</span> column=<span class="string">"roledesc"</span>/&gt;</span><br><span class="line">        &lt;!--对账户信息进行数据的封装  这个看我们在User实体类中添加的 属性名以及类型--&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"users"</span> ofType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">            &lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    RoleMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(RoleMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试多对多</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindDDD</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;Role&gt; list = mapper.findAllDDD();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Role role :list)&#123;</span><br><span class="line">            System.out.println(role);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;MyBatis进阶&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;MyBatis的连接池&quot;&gt;&lt;a href=&quot;#MyBatis的连接池&quot; class=&quot;headerlink&quot; title=&quot;MyBatis的连接池&quot;&gt;&lt;/a&gt;MyBatis的连接池&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="http://yoursite.com/2021/02/06/MyBatis/"/>
    <id>http://yoursite.com/2021/02/06/MyBatis/</id>
    <published>2021-02-06T14:06:17.675Z</published>
    <updated>2021-02-06T14:06:25.234Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="MyBatis">TOC</a></p><h1 id="MyBatis框架的概述"><a href="#MyBatis框架的概述" class="headerlink" title="MyBatis框架的概述"></a>MyBatis框架的概述</h1><ol><li>MyBatis是一个基于Java的持久层框架，内部对JDBC做了封装。因此开发只需关注SQL语句部分，不用关注JDBC的代码。</li><li>MyBatis通过XML或者注解的方式将要执行的各种Statement对象配置起来，通过Java对象和statement中SQL的动态参数进行映射，并最终执行SQL语句。执行SQL后，最终将结果已Java对象返回</li><li>采用了ORM的思想。ORM一般指对象关系映射，用于实现面向对象编程语言里不同类型系统的数据之间的转换。</li></ol><h1 id="MyBatis使用"><a href="#MyBatis使用" class="headerlink" title="MyBatis使用"></a>MyBatis使用</h1><h2 id="案例一：入门程序"><a href="#案例一：入门程序" class="headerlink" title="案例一：入门程序"></a>案例一：入门程序</h2><p>需求：使用MyBatis从mysql数据库中查询数据<br>开发步骤</p><ol><li>准备mysql数据库，创建表结构，添加几条记录</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装</li><li>编写映射配置文件（编写SQL语句）</li><li>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件</li><li>编写入门（MyBatis提供API）</li></ol><h3 id="MyBatis项目的创建"><a href="#MyBatis项目的创建" class="headerlink" title="MyBatis项目的创建"></a>MyBatis项目的创建</h3><ol><li>创建Maven的项目，普通java工程即可</li><li>引入坐标<pre><code>引入MyBatis的3.4.5的版本坐标引入MySQL驱动的jar包  引入Junit单元测试的jar包引入log4j的jar包 </code></pre>将log4j.properties 放在 main的resources文件下</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"> &lt;!--MyBatis--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;!--mysql驱动包--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;!--Junit单元测试--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">         &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;!--log4j日志--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在java文件下 创建一个domain包 编写数据表的实体类文件</li><li>下面要映射数据库文件。 首先编写UserMapper的接口和方法（就是以前的UserDao接口）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在resources目录下，创建mapper文件夹。编写UserMapper.xml的配置文件，导入约束文件。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    id属性 接口中方法的名称，为UserMapper接口中的方法名称。固定的</span><br><span class="line">    resultType属性 表明的是findAll方法返回值类型，全限定路径(包名+类名)</span><br><span class="line">    jks_mybatis_domain.User</span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from  user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>编写主配置文件（配置数据库连接相关的信息）在resources文件内 写入SqlMapConfig.xml </li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:sqlserver://localhost:3306/mybatisdemo"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>写一个测试类 正式开始。在test包内写 别再main包里，main包里就整体正式编译了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/514:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Test</span> 表示标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//调用SqlSession对象的方法 说白了就是根据这个配置xml</span></span><br><span class="line">        <span class="comment">// 通过名称空间，在找到id findAll 定位select标签中的sql语句</span></span><br><span class="line">        List&lt;User&gt; list =  session.selectList(<span class="string">"jks_mybatis_mapper.UserMapper.findAll"</span>);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user :list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 使用代理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//mapper指向的就是代理对象</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user :list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="实现条件查询：按照id查询唯一记录"><a href="#实现条件查询：按照id查询唯一记录" class="headerlink" title="实现条件查询：按照id查询唯一记录"></a>实现条件查询：按照id查询唯一记录</h2><p>项目与上述案例一致。</p></li><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过id主键查询一条数据 select * from user where id=?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">&lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">&lt;!--    #&#123;ODNL表达式&#125; 对象图导航语言，表达式语言。语法和EL表达式非常相似</span><br><span class="line">        EL表达式是只能在JSP页面中使用的，ODNL不仅可以在页面上使用，还可以在配置文件中使用--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"insert"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> &gt;</span><br><span class="line">        <span class="function">insert  into <span class="title">user</span><span class="params">(username,birthday,sex,address)</span> <span class="title">values</span><span class="params">(#&#123;XXX&#125;,#&#123;XXX&#125;,#&#123;XXX&#125;,#&#123;XXX&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//mapper指向的就是代理对象</span></span><br><span class="line">        User user = mapper.findUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="第一种方法-需要自己传入"><a href="#第一种方法-需要自己传入" class="headerlink" title="第一种方法 需要自己传入%"></a>第一种方法 需要自己传入%</h3><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    模糊查询，没有拼接% 调用方法的时候需要自己传入%--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUserByUsername"</span> parameterType=<span class="string">"java.lang.String"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where username like#&#123;username&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = mapper.findUserByUsername(<span class="string">"%柴%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user:list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种方法-不需要自己传入"><a href="#第二种方法-不需要自己传入" class="headerlink" title="第二种方法 不需要自己传入%"></a>第二种方法 不需要自己传入%</h3><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    模糊查询，没有拼接% 调用方法的时候需要自己传入%--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUserByUsername"</span> parameterType=<span class="string">"java.lang.String"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where username like <span class="string">'%$&#123;value&#125;'</span></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = mapper.findUserByUsername(<span class="string">"柴"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user:list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h3><ul><li>第一种采用的是预编译的方式，防止SQL注入问题；第二种是sql语句拼接的方式，不能防止SQL注入的问题</li><li>第二就是两个表达式的区别<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210206143227289.png#pic_center" alt="在这里插入图片描述"><h2 id="聚合函数查询-count、sum等"><a href="#聚合函数查询-count、sum等" class="headerlink" title="聚合函数查询 count、sum等"></a>聚合函数查询 count、sum等</h2></li></ul><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//count sum avg max min 聚合函数查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">findCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    集合函数查询--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findCount"</span> resultType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        <span class="function">select <span class="title">count</span><span class="params">(*)</span> from user</span></span><br><span class="line"><span class="function">    &lt;/select&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合函数查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = mapper.findCount();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增一条记录，并且可以在id自增的情况下，获取id号"><a href="#新增一条记录，并且可以在id自增的情况下，获取id号" class="headerlink" title="新增一条记录，并且可以在id自增的情况下，获取id号"></a>新增一条记录，并且可以在id自增的情况下，获取id号</h2><p>项目与上述案例一致。</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过id主键查询一条数据 select * from user where id=?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">&lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">&lt;!--    #&#123;ODNL表达式&#125; 对象图导航语言，表达式语言。语法和EL表达式非常相似</span><br><span class="line">        EL表达式是只能在JSP页面中使用的，ODNL不仅可以在页面上使用，还可以在配置文件中使用--&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;insert id=<span class="string">"insert"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> &gt;</span><br><span class="line">            <span class="comment">/*查询id值 keyProperty为封装数据使用属性 order=“AFTER数据添加后进行操作 resultType=”返回值类型*/</span></span><br><span class="line">        &lt;selectKey keyProperty=<span class="string">"id"</span> order=<span class="string">"AFTER"</span> resultType=<span class="string">"java.lang.Integer"</span> &gt;</span><br><span class="line">            <span class="function">select <span class="title">last_insert_id</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">        insert  into <span class="title">user</span><span class="params">(username,birthday,sex,address)</span> <span class="title">values</span><span class="params">(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//加载主配置文件</span></span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">    SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"测试"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"北京"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存用户  调用接口 然后映射配置文件 sql语句 执行操作 返回结果（int类型）成功为1</span></span><br><span class="line">    <span class="keyword">int</span> result = mapper.insert(user);</span><br><span class="line">    <span class="comment">//记得要提交事务 不然数据库不会生效的 增删改需要 查不需要提交</span></span><br><span class="line">    session.commit();</span><br><span class="line">    <span class="comment">//打印主键的值</span></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    System.out.println(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新记录：限定id更改地址"><a href="#更新记录：限定id更改地址" class="headerlink" title="更新记录：限定id更改地址"></a>更新记录：限定id更改地址</h2><p>项目与上述案例一致。</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//修改记录，参数太长，我们可以把参数封装成类对象在引入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    修改--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;update id=<span class="string">"update"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        update user set address=#&#123;address&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">7</span>);</span><br><span class="line">        user.setAddress(<span class="string">"柴犬的家乡"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//传递user给接口 返回结果 1为改变行数</span></span><br><span class="line">        <span class="keyword">int</span> result = mapper.update(user);</span><br><span class="line">        <span class="comment">//记得要提交事务 不然数据库不会生效的 增删改需要 查不需要提交</span></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定记录"><a href="#删除指定记录" class="headerlink" title="删除指定记录"></a>删除指定记录</h2><p>项目与上述案例一致。</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    删除--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"delete"</span> parameterType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用mapper写的delete接口 传入id参数</span></span><br><span class="line">        mapper.delete(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//记得要提交事务 不然数据库不会生效的 增删改需要 查不需要提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MyBatis参数详解"><a href="#MyBatis参数详解" class="headerlink" title="MyBatis参数详解"></a>MyBatis参数详解</h1><h2 id="方法参数的类型：parameterType"><a href="#方法参数的类型：parameterType" class="headerlink" title="方法参数的类型：parameterType"></a>方法参数的类型：parameterType</h2><ol><li><p>简单数据类型<br> 如：int、double、String类型<br> 需要写出其完整包路径：如java.lang.Integer<br> 当然其可以简写为：int integer 都可以，其实框架提供简写的方式。其自动帮你还原会完整路径了</p></li><li><p>POJO（JavaBean实体类）对象类型，默认是不能简写的。但可以通过配置来简化长度。<br>如：创建的数据表实体类User对象。写明他在java文件下的完整路径 如：jks_mybatis_domain.User</p></li><li><p>POJO包装对象类型<br> 包含更多的实体类。即一个大类包含其他的实体类。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Total</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自己的属性</span></span><br><span class="line">    <span class="keyword">private</span> String total;</span><br><span class="line">    <span class="comment">//user属性</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="comment">//role属性</span></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(String total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用封装类编写的话，例如我们查询所有User表的数据应该这么做：</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写大实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试包装类查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByTotal</span><span class="params">(Total total)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    包装类测试查询 找user表 要表明其user. --&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByTotal"</span> parameterType=<span class="string">"jks_mybatis_domain.Total"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where username = #&#123;user.username&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包装类的测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Total total = <span class="keyword">new</span> Total();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"柴犬"</span>);</span><br><span class="line">        total.setUser(user);</span><br><span class="line">        <span class="comment">//查询 调用所写接口</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByTotal(total);</span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法返回值类型：resultType"><a href="#方法返回值类型：resultType" class="headerlink" title="方法返回值类型：resultType"></a>方法返回值类型：resultType</h2><ol><li><p>简单数据类型 同上<br> 如：int、double、String类型<br> 需要写出其完整包路径：如java.lang.Integer<br> 当然其可以简写为：int integer 都可以，其实框架提供简写的方式。其自动帮你还原会完整路径了</p></li><li><p>POJO（JavaBean实体类）对象类型，默认是不能简写的。但可以通过配置来简化长度。 同上<br>如：创建的数据表实体类User对象。写明他在java文件下的完整路径 如：jks_mybatis_domain.User</p></li><li><p>resultMap结果类型</p></li></ol><p>我们正常都是实体类与数据表由于字段值一致所以，不需要这个resultMap。但如果不一致，就需要了。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210206163509862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>resultMap可以指定POJO将查询结果映射为POJO，但需要POJO的属性名和sql查询的列名一致方可映射成功。如果sql查询字段名和POJO的属性名不一致，可以通过resultMap将字段名和属性名做一个对应关系。<br>resultMap实质上还需要将查询结果映射到POJO对象中<br>resultMap可以实现将查询结果映射为复杂类型的POJO，比如在查询结果映射对象中包括POJO和list实现一对一查询和一对多查询</p></blockquote><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p><ol start="2"><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写大实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//演示resultMap配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUsers"</span> resultMap=<span class="string">"userMap"</span>&gt;</span><br><span class="line">        select  id as _id,username as _username,address as _address from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--    配置resultMap，用来进行数据封装 --&gt;</span><br><span class="line">    &lt;!--    id是resultMap唯一的名称，用于引用--&gt;</span><br><span class="line">    &lt;!--    type是进行封装数据的类型--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userMap"</span> type=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">    &lt;!--property 是JavaBean中的属性</span><br><span class="line">        column表示数据表中的字段名称</span><br><span class="line">    --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"_id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"username"</span> column=<span class="string">"_username"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"_address"</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询 调用所写接口</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findUsers();</span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主配置文件（配置数据库连接相关的信息）"><a href="#主配置文件（配置数据库连接相关的信息）" class="headerlink" title="主配置文件（配置数据库连接相关的信息）"></a>主配置文件（配置数据库连接相关的信息）</h1><h2 id="外部连接属性"><a href="#外部连接属性" class="headerlink" title="外部连接属性"></a>外部连接属性</h2><p>可以使用EL（${键}）表达式，将数据库连接相关信息，通过读取额外定义的配置文件。来获取，这样可以方便之后的修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--读取属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简化实体类的全路径"><a href="#简化实体类的全路径" class="headerlink" title="简化实体类的全路径"></a>简化实体类的全路径</h2><p>第一种可以，自定义简化名称。但要是简化个数太多，也很麻烦。在主配置文件中（注意配置的全在&lt; configuration &gt;内）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type="实体类的全路径"</span></span><br><span class="line"><span class="comment">         alias="起的别名"，不区分大小写</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"jks_mybatis_domain.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"jks_mybatis_domain.Role"</span> <span class="attr">alias</span>=<span class="string">"role"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种更为简单，直接引入一个包内所有的实体类。在主配置文件中（注意配置的全在&lt; configuration &gt;内）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置别名简单写法</span></span><br><span class="line"><span class="comment">            把该包下所有的实体类，都可以使用别名，别名就是类名（首字母大小写都可以）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"jks_mybatis_domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;MyBatis&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;MyBatis框架的概述&quot;&gt;&lt;a href=&quot;#MyBatis框架的概述&quot; class=&quot;headerlink&quot; title=&quot;MyBatis框架的概述&quot;&gt;&lt;/a&gt;MyBatis框架的概述&lt;/h1
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>框架基础</title>
    <link href="http://yoursite.com/2021/02/04/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/02/04/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/</id>
    <published>2021-02-04T13:31:44.804Z</published>
    <updated>2021-02-04T13:31:52.079Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="框架基础">TOC</a></p><h1 id="JAVA反射的概念"><a href="#JAVA反射的概念" class="headerlink" title="JAVA反射的概念"></a>JAVA反射的概念</h1><blockquote><p>JAVA反射机制是在<strong>运行状</strong>中，<br><strong>对于任意一个类，都能够知道这个类的所有属性和方法</strong>；<br><strong>对于任意一个对象，都能够调用它的任意一个方法和属性</strong>；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></blockquote><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><blockquote><p>我们知道类是具有相同属性或者行为的一类事物，那么<strong>类本身也可以再被抽象</strong>，因为<strong>类们也有共同的属性和行为（比如类都有属性，都有构造器，都有方法，都能调用方法），所以把类们又抽象成了一个类Class。</strong><br>众所周知Java有个Object 类，是所有Java 类的继承根源，其内声明了数个应该在所有Java类中被改写的方法：hashCode()、equals()、clone()、toString()、getClass()等。其中getClass()返回一个Class对象。<br>Class类十分特殊。它和一般类一样继承自Object，其实体用以表达Java程序运行时的classes和interfaces，也用来表达enum、array、primitive Java types（boolean, byte, char, short, int, long, float,double）以及关键词void。<br>当一个class被加载，或当加载器（classloader）的defineClass()被JVM调用，JVM 便自动产生一个Class 对象。</p></blockquote><p>Class中对应的层次还有以下类</p><ul><li>Field类：<strong>类属性</strong>的抽象 </li><li>Method类：<strong>类方法</strong>的抽象 </li><li>Constructor类:<strong>类构造器</strong>的抽象</li></ul><h3 id="Class类中要掌握的方法"><a href="#Class类中要掌握的方法" class="headerlink" title="Class类中要掌握的方法"></a>Class类中要掌握的方法</h3><p>获取类对象的方法有三种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式 通过Class.forName("类的全路径")</span></span><br><span class="line">Class&lt;?&gt; clazz1 = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line"><span class="comment">//第二种方式 通过调用该类的对象调用getClass()方法</span></span><br><span class="line">Class&lt;?&gt; clazz2 = object.getClass();</span><br><span class="line"><span class="comment">//第三种方式 通过类的名字打点class</span></span><br><span class="line">Class&lt;?&gt; clazz3 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><p>通过Class类获取属性、方法、构造器的方法为<br>获取类对象</p><ul><li>forName(String className)  <ul><li>static静态方法 </li><li>返回值为Class&lt;?&gt; </li><li>返回与带有给定字符串名的类或接口相关联的Class对象</li></ul></li></ul><p>获取类属性对象</p><ul><li><p>getDeclaredField(String name)  </p><ul><li>返回值为Field</li><li>返回一个Field对象，该对象反映此Class类对象 参数所对应的类属性对象<ul><li>getDeclaredFields() </li></ul></li><li>返回值为Field[]</li><li>返回一个Field对象的数组，该对象反映此Class类对象 所有的类属性对象</li></ul><p>获取类方法对象</p></li><li><p>getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes) …表示一个Class数组对象实例  可以这么表示 <code>new Class[]{} 大括号里是参数</code></p><ul><li>返回值为Method</li><li>返回一个Method对象，该对象反映此Class类对象 参数所对应的类方法对象<ul><li>getDeclaredMethods() </li></ul></li><li>返回值为Method[]</li><li>返回一个Method对象的数组，该对象反映此Class类对象 所有的类方法对象</li></ul></li></ul><p>获取类构造器对象</p><ul><li>getConstructor(Class&lt;?&gt;… parameterTypes) …表示一个Class数组对象实例  可以这么表示 <code>new Class[]{} 大括号里是参数</code><ul><li>返回值为Constructor&lt;?&gt;</li><li>返回一个Constructor对象，该对象反映此Class类对象 参数所对应的类公共构造方法对象<ul><li>getConstructors() </li></ul></li><li>返回值为Constructor&lt;?&gt;</li><li>返回一个Constructor对象的数组，该对象反映此Class类对象 所有的类公共构造方法对象<ul><li>newInstance() </li></ul></li><li>使用默认构造器创建此Class对象所表示类的一个新的实例 <h3 id="Method反射调用自身"><a href="#Method反射调用自身" class="headerlink" title="Method反射调用自身"></a>Method反射调用自身</h3></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object object,Object... args)</span><span class="comment">//对带有指定参数的指定对象调用 就是把后面的参数值放入第一个参数表示的构造的类实例对象中</span></span></span><br></pre></td></tr></table></figure><p>如果底层方法是实例方法，<strong>第一个参数就是该对象实例，第二个参数是方法的参数列表，invoke的返回值就是实例方法的返回值。</strong><br>如果底层方法是静态的，那么可以忽略指定的 object 参数。该参数可以为 null。<br>如果底层方法所需的形参数为 0，则所提供的 args 数组长度可以为 0 或 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//获得类的所有方法</span></span><br><span class="line">Method[] methods = class1.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line"> m.invoke(instance,<span class="keyword">new</span> Object[]&#123;<span class="string">"北京"</span>&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(<span class="string">"instance"</span>+instance);</span><br></pre></td></tr></table></figure><h3 id="Field类要掌握的方法"><a href="#Field类要掌握的方法" class="headerlink" title="Field类要掌握的方法"></a>Field类要掌握的方法</h3><ul><li>getType()<ul><li>返回类型为Class&lt;?&gt;</li><li>返回一个Class对象，它获取属性的具体类型     </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得方法所对应的属性</span></span><br><span class="line">Field field = class1.getDeclaredField(fieldName);</span><br><span class="line">System.out.println(<span class="string">"filed是"</span>+field);</span><br><span class="line"><span class="comment">//获取属性的具体类型，获得属性对应的类型</span></span><br><span class="line">Class&lt;?&gt; type = field.getType();</span><br></pre></td></tr></table></figure><ul><li>getName() <ul><li>返回类型String</li><li>返回此Field对象表示的字段的名称</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有方法</span></span><br><span class="line">Method[] methods = class1.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line">    <span class="comment">//获取所有方法的名字</span></span><br><span class="line">    String name = m.getName();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>set(Object object,Object value)<ul><li>返回类型void，没有返回值</li><li>返回此Field对象表示的字段设置为指定的新值</li></ul></li></ul><h3 id="Constructor类要掌握的方法"><a href="#Constructor类要掌握的方法" class="headerlink" title="Constructor类要掌握的方法"></a>Constructor类要掌握的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">(Object... initargs)</span> <span class="comment">//使用此Constructor对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例</span></span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Constructor&lt;?&gt; constructor1 = class1.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">String</span>.<span class="title">class</span>&#125;)</span>;</span><br><span class="line">Object instance1 = constructor1.newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"柴犬的家"</span>,<span class="number">1</span>,<span class="string">"柴犬"</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="案例：通过反射来拷贝对象"><a href="#案例：通过反射来拷贝对象" class="headerlink" title="案例：通过反射来拷贝对象"></a>案例：通过反射来拷贝对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setAddress(<span class="string">"长春"</span>);</span><br><span class="line">p.setName(<span class="string">"李四"</span>);</span><br><span class="line">p.setId(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Object object = copyObject(p);</span><br><span class="line">System.out.println(object);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">copyObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//获得传递过来的对象的属性和构造器</span></span><br><span class="line">Class&lt;? extends Object&gt; class1 = obj.getClass();</span><br><span class="line"><span class="comment">//获取该类对象的所有参数</span></span><br><span class="line">Field[] fields = class1.getDeclaredFields();</span><br><span class="line"><span class="comment">//获取该类的无参构造器</span></span><br><span class="line">Constructor&lt;? extends Object&gt; constructor = class1.getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line">Object instance = constructor.newInstance(<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line"><span class="keyword">for</span>(Field f :fields)&#123;</span><br><span class="line"><span class="comment">//获得属性的name</span></span><br><span class="line">String fname = f.getName();</span><br><span class="line"><span class="comment">//获得属性的类型</span></span><br><span class="line">Class&lt;?&gt; type = f.getType();</span><br><span class="line"><span class="comment">//获得属性对应的set方法</span></span><br><span class="line">String setMethodName = <span class="string">"set"</span>+fname.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase()+fname.substring(<span class="number">1</span>);</span><br><span class="line">String getMethodName = <span class="string">"get"</span>+fname.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase()+fname.substring(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//获得get方法</span></span><br><span class="line">Method gmethod = class1.getDeclaredMethod(getMethodName, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//调用get方法获得被拷贝的对象的一个属性值</span></span><br><span class="line">Object gresult = gmethod.invoke(obj, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//获得set方法</span></span><br><span class="line">Method smethod = class1.getDeclaredMethod(setMethodName, <span class="keyword">new</span> Class[]&#123;gmethod.getReturnType()&#125;);</span><br><span class="line">smethod.invoke(instance, <span class="keyword">new</span> Object[]&#123;gresult&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射方式访问私有方法"><a href="#反射方式访问私有方法" class="headerlink" title="反射方式访问私有方法"></a>反射方式访问私有方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;Hello&gt; hClass = Hello<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//获得sayHello方法</span></span><br><span class="line">Method method = hClass.getDeclaredMethod(<span class="string">"sayHello"</span>, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line"><span class="comment">//设置可访问私有方法</span></span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object result = method.invoke(hClass.newInstance(), <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射方式访问私有属性"><a href="#反射方式访问私有属性" class="headerlink" title="反射方式访问私有属性"></a>反射方式访问私有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;Hello&gt; hClass = Hello<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Field f = hClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">f.set(hClass.newInstance(), <span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h1><blockquote><p>代理模式的作用是：为其他对象提供一种以控制对方的访问。<br>在某种情况下，一个客户不想或者不能直接引用另一个对象可以在客户端和目标对象直接起到中介的作用。<br>代理的角色：<br><strong>第一种：抽象角色，声明真实对象和代理对象的共同接口。</strong><br>第二种：代理角色，代理对象角色内部含有对真实对象的引用，从而可以操纵真实的对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象，同时代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。<br><strong>第三种：真实角色，代理所代理的真实角色，是我们要引用的对象</strong></p></blockquote><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul><li>抽象角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HireHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hire</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HireHouseReal</span> <span class="keyword">implements</span> <span class="title">HireHouse</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hire</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"租房子"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HireHouseProxy</span> <span class="keyword">implements</span> <span class="title">HireHouse</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HireHouseReal hr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hire</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hr == <span class="keyword">null</span>)&#123;</span><br><span class="line">hr = <span class="keyword">new</span> HireHouseReal();</span><br><span class="line">System.out.println(<span class="string">"收租金和中介费和押金"</span>);</span><br><span class="line">hr.hire();</span><br><span class="line">System.out.println(<span class="string">"扣押金"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jdk动态代理"><a href="#Jdk动态代理" class="headerlink" title="Jdk动态代理"></a>Jdk动态代理</h2><p>jdk动态代理可以为所有带有接口实现类提供代理。动态代理开发步骤：</p><ol><li>创建一个实现接口InvocationHandler的类，它必须实现invoke方法</li><li>创建被代理的类和接口</li><li>通过Proxy.newProxyInstance来创建代理类</li><li>通过代理调用</li></ol><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">//接口方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterDemoImpl</span> <span class="keyword">implements</span> <span class="title">InterDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"doing"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyImpl</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被代理的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyImpl</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过反射方式来调用被代理的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object arg0, Method method, Object[] arg)</span><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"前置工作"</span>);</span><br><span class="line">Object result = method.invoke(obj, arg);</span><br><span class="line">System.out.println(<span class="string">"后置工作"</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建接口实现类</span></span><br><span class="line">InterDemoImpl idi = <span class="keyword">new</span> InterDemoImpl();</span><br><span class="line"><span class="comment">//创建代理的实现类</span></span><br><span class="line">DynamicProxyImpl dp = <span class="keyword">new</span> DynamicProxyImpl(idi);</span><br><span class="line"><span class="comment">//创建动态代理对象</span></span><br><span class="line">InterDemo id = (InterDemo) Proxy.newProxyInstance(idi.getClass().getClassLoader(), idi.getClass().getInterfaces(), dp);</span><br><span class="line">id.dosomething();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h1><blockquote><p>Annotation工作方式<br>从java1.5以后，jdk提供了注解开发，开发者可以自定义注解。Annotation并不影响代码的语义，但是它能够工作的方式被看做类似程序工具或者类库，它反过来对正在运行的程序语义有所影响，annotation可以从源文件、class文件、或者在运行时反射的多种方式被调用。</p></blockquote><h2 id="常见的标识性注解"><a href="#常见的标识性注解" class="headerlink" title="常见的标识性注解"></a>常见的标识性注解</h2><ul><li>Override：表示是重写的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Deprecated：过期的方法，不建议使用的<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210204160734280.png#pic_center" alt="在这里插入图片描述"><br>SuppressWarning消除警告：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getList</span><span class="params">()</span></span>&#123;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnn &#123;</span><br><span class="line"><span class="comment">//定义注解的属性，必须要加上()</span></span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义注解，当注解的属性名是value时，在对其赋值时可以不指定属性的名字，否则必须指定属性名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnn</span>(value = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><blockquote><p>注解@Retention可以用来修饰注解，是注解的注解，称为元注解。<br><strong>Retention注解有一个属性value，是RetentionPolicy类型的，Enum RetentionPolicy是一个枚举类型，</strong> 这个枚举决定了Retention注解应该如何去保持，也可理解为Rentention 搭配RententionPolicy使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RetentionPolicy有3个值：CLASS  RUNTIME   SOURCE</p><blockquote><p>1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；<br>2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；<br>3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；<br>这3个生命周期分别对应于：Java源文件(.java文件) —&gt; .class文件 —&gt; 内存中的字节码。<br><strong>要明确生命周期长度 SOURCE &lt; CLASS &lt; RUNTIME ，所以前者能作用的地方后者一定也能作用。</strong><br>一般如果需要在运行时去动态获取注解信息，那只能用 RUNTIME 注解，比如@Deprecated使用RUNTIME注解<br>如果要在编译时进行一些预处理操作，比如生成一些辅助代码（如 ButterKnife），就用 CLASS注解；<br>如果只是做一些检查性的操作，比如 @Override 和 @SuppressWarnings，使用SOURCE 注解。</p></blockquote><h3 id="Retention使用步骤"><a href="#Retention使用步骤" class="headerlink" title="@Retention使用步骤"></a>@Retention使用步骤</h3><p>创建自定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义注解的策略</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anndemo &#123;</span><br><span class="line"><span class="comment">//定义注解属性</span></span><br><span class="line">String [] value();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解在方法上必须通过反射的方式才能获得</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@Anndemo</span>(value=&#123;<span class="string">"test, test1"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"注解测试"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获得指定类的对象</span></span><br><span class="line">Class clazz = AnnTest1<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//获得指定类的方法</span></span><br><span class="line">Method method = clazz.getDeclaredMethod(<span class="string">"save"</span>, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line"><span class="comment">//判断某个类上是否存在指定的注解</span></span><br><span class="line"><span class="keyword">if</span>(method.isAnnotationPresent(Anndemo<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line"><span class="comment">//获得指定的注解</span></span><br><span class="line">Anndemo annotation = method.getAnnotation(Anndemo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//获得指定注解的内容</span></span><br><span class="line">String[] values = annotation.value();</span><br><span class="line"><span class="keyword">for</span>(String val : values)&#123;</span><br><span class="line">System.out.println(val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得指定方法上的所有注解</span></span><br><span class="line">Annotation[] declaredAnnotations = method.getDeclaredAnnotations();</span><br><span class="line"><span class="keyword">for</span>(Annotation ann : declaredAnnotations)&#123;</span><br><span class="line">System.out.println(ann.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><p>主要标注在注解上，表示被标注的注解可以标注在哪些域上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anndemo &#123;</span><br><span class="line"><span class="comment">//定义注解属性</span></span><br><span class="line">String [] value();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@target注解源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> @Target用来表示注解作用范围，超过这个作用范围，编译的时候就会报错。<br> java.lang.annotation.ElementType<br> Target通过ElementType来指定注解可使用范围的枚举集合，枚举集合如下：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210204212801165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;框架基础&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;JAVA反射的概念&quot;&gt;&lt;a href=&quot;#JAVA反射的概念&quot; class=&quot;headerlink&quot; title=&quot;JAVA反射的概念&quot;&gt;&lt;/a&gt;JAVA反射的概念&lt;/h1&gt;&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="http://yoursite.com/2021/02/03/Maven/"/>
    <id>http://yoursite.com/2021/02/03/Maven/</id>
    <published>2021-02-03T15:54:20.839Z</published>
    <updated>2021-02-03T15:54:24.644Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Maven">TOC</a></p><h1 id="Maven的概念"><a href="#Maven的概念" class="headerlink" title="Maven的概念"></a>Maven的概念</h1><h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><ul><li>Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。</li><li>理想的项目构建：高度自动化，跨平台，可重用的组件，标准化的</li><li>对于包依赖管理：自动下载，统一依赖管理</li><li>项目信息：项目名称描述等，开发人员信息，开发者信息等</li></ul><h2 id="项目构建的步骤"><a href="#项目构建的步骤" class="headerlink" title="项目构建的步骤"></a>项目构建的步骤</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201155940982.png#pic_center" alt="在这里插入图片描述"></p><h2 id="Maven的应用场景"><a href="#Maven的应用场景" class="headerlink" title="Maven的应用场景"></a>Maven的应用场景</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021020116002912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Maven模型"><a href="#Maven模型" class="headerlink" title="Maven模型"></a>Maven模型</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201163911794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>右边的三个仓库分别为  Maven官网中心仓库、私服仓库以及本地库 。 中间橙色的表示会自动下载一些插件jar包</p><h2 id="为什么使用Maven"><a href="#为什么使用Maven" class="headerlink" title="为什么使用Maven"></a>为什么使用Maven</h2><p>IDE？Eclipse？IDEA？</p><ul><li>手工操作较多，编译、测试、部署等工作都是独立的，很难一步完成</li><li><strong>每个人的IDE配置都不同，很容易出现本地代码换个地方编译就出错的情况</strong><br>Maven？</li><li>拥有约定，知道你的代码在哪里，放到哪里去</li><li>拥有一个生命周期，例如执行 mvn install 就可以自动执行编译，测试，打包等构建过程</li><li>只需要定义一个pom.xml,然后把源码放到默认的目录，Maven帮你处理其他事情<br>安装git</li><li>拥有依赖管理，仓库管理<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2></li><li>对第三方依赖包的管理<ul><li>可以连接互联网下载项目所需第三方jar包<ul><li>对自己开发的模块的管理</li><li>可以像引用第三方依赖包一样引用自己项目的依赖包</li></ul></li></ul></li></ul><h1 id="Maven操作"><a href="#Maven操作" class="headerlink" title="Maven操作"></a>Maven操作</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><blockquote><p>安装jdk1.8或以上版本<br>下载Maven 地址：<a href="http://maven.apache.org/download.html" target="_blank" rel="noopener">http://maven.apache.org/download.html</a><br>解压到相应目录即可(无中文路径)</p></blockquote><h2 id="Maven安装目录分析"><a href="#Maven安装目录分析" class="headerlink" title="Maven安装目录分析"></a>Maven安装目录分析</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201165642175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>bin：含有mvn运行的脚本</li><li>boot：含有plexus-classworlds类加载器框架</li><li>conf：含有settings.xml配置文件</li><li>lib：含有Maven运行时所需要的java类库</li><li>LICENSE.txt, NOTICE.txt, README.txt针对Maven版本，第三方软件等简要介绍</li></ul><h2 id="Maven的环境变量"><a href="#Maven的环境变量" class="headerlink" title="Maven的环境变量"></a>Maven的环境变量</h2><ul><li><p>设置MAVEN_HOME环境变量</p><ul><li>升级时只需要下载最新版本，解压缩重新设置MAVEN_HOME环境变量即可<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170048235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170310743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul></li><li><p>设置MAVEN_OPTS环境变量(可省略)</p><ul><li>-Xms128m -Xmx512m<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170511957.png#pic_center" alt="在这里插入图片描述"></li></ul></li><li><p>查看CMD 输入<code>mvn -version</code> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170724563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Maven-Demo"><a href="#Maven-Demo" class="headerlink" title="Maven Demo"></a>Maven Demo</h2><h3 id="Maven项目目录"><a href="#Maven项目目录" class="headerlink" title="Maven项目目录"></a>Maven项目目录</h3></li><li><p>src/main/java —— 存放项目的.java文件</p></li><li><p>src/main/resources —— 存放项目资源文件，如spring, hibernate配置文件 </p></li><li><p>src/test/java —— 存放所有测试.java文件，如JUnit测试类 </p></li><li><p>src/test/resources —— 测试资源文件 </p></li><li><p>target —— 项目输出位置 </p></li><li><p>pom.xml </p></li></ul><h3 id="项目操作"><a href="#项目操作" class="headerlink" title="项目操作"></a>项目操作</h3><p>打开cmd命令行，进入项目根目录</p><blockquote><p>mvn compile ： 编译<br>mvn test ： 运行测试<br>mvn package ：打包<br>mvn clean ： 清除编译后的项目文件<br>mvn install ： 本地安装,到本地库</p></blockquote><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>如果这个项目需要依赖其他项目的话,依赖的那个项目首先要在本地库里。否则这个项目没法编译。</p><h2 id="Maven仓库配置"><a href="#Maven仓库配置" class="headerlink" title="Maven仓库配置"></a>Maven仓库配置</h2><h3 id="Maven仓库概念"><a href="#Maven仓库概念" class="headerlink" title="Maven仓库概念"></a>Maven仓库概念</h3><blockquote><p>用来<strong>统一存储所有Maven共享构建</strong>的位置就是仓库<br>根据Maven坐标定义每个构建在仓库中唯一存储路径</p></blockquote><p>仓库的分类</p><ul><li>本地仓库 <ul><li><code>•~/.m2/repository/ 可修改</code></li><li>•每个用户只有一个本地仓库<ul><li>远程仓库</li><li>中央仓库：Maven默认的远程仓库<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a></li><li>私服：是一种特殊的远程仓库，它是架设在局域网内的仓库<h3 id="Maven本地仓库配置"><a href="#Maven本地仓库配置" class="headerlink" title="Maven本地仓库配置"></a>Maven本地仓库配置</h3>全局本地仓库(所有操作系统用户均影响)<br>%MAVEN_HOME%\conf\settings.xml文件,修改该文件会影响所有使用该Maven的用户的本地仓库,例如:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201211656290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将框内的注释取消，内容改成我们需要存放的库位置<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201211845385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="IDEA整合Maven项目"><a href="#IDEA整合Maven项目" class="headerlink" title="IDEA整合Maven项目"></a>IDEA整合Maven项目</h2><h3 id="IDEA的Maven全局配置"><a href="#IDEA的Maven全局配置" class="headerlink" title="IDEA的Maven全局配置"></a>IDEA的Maven全局配置</h3>配置之前，我们需要先将Settings中访问的库改为阿里云镜像 这样更快。</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动IDEA后找到Settings<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201214313363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201215128721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>以上设置完成表示在本idea上,所有项目如未对Maven的配置进行单独配置,则默认均使用该Maven版本和本地库设置;</p><h3 id="IDEA创建Maven的Java项目"><a href="#IDEA创建Maven的Java项目" class="headerlink" title="IDEA创建Maven的Java项目"></a>IDEA创建Maven的Java项目</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201215328290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例如我们引入Maven官网库的一个jar包 例如fastjson包<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201220532425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载 下载量最多的那个包 <strong>点左边的数字</strong>不是点central<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201220637477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201220944683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>复制Maven中的代码到 IDEA项目中<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201234946106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果出现标红，我们尝试右上角的如图所示 刷新一下maven<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201235016212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="IDEA创建Maven的Java-web项目"><a href="#IDEA创建Maven的Java-web项目" class="headerlink" title="IDEA创建Maven的Java web项目"></a>IDEA创建Maven的Java web项目</h3><ol><li><p>勾选后，选择下面的webapp项点击下一步<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202131700253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>备注好项目名字等信息<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202132355892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>查看与自己的Maven库地址，以及下载存入本地库地址是否正确<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202132527185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>web项目则创建成功,接下来需要进行一些配置来确定web项目可以正常运行（仅仅是检查查看，可以忽略的）<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202140912849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202140928213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加war包的方法:<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141001234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021020214101517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>配置Tomcat服务器 与以前的操作一致<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141102705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021020214111712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141134293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141148321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141211448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141241819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>至此,在IDEA上使用Maven配置的Java web工程已经完成配置</p></li></ol><h2 id="IDEA导入既有Maven项目"><a href="#IDEA导入既有Maven项目" class="headerlink" title="IDEA导入既有Maven项目"></a>IDEA导入既有Maven项目</h2><ol><li>以导入刚才的MavenDemo项目的例子做示范:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141435515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择以项目格式打开<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202143112831.png#pic_center" alt="在这里插入图片描述"></li><li>构建build 刷新maven即可</li><li><strong>如果是导入需要依赖这个项目的项目？  该怎么做</strong><br> 首先我们一定要将要依赖的那个mvn install一下 就是右边生命周期那点一下（可以先clean一下） 放到本地库以后，我们才能够依赖这个项目包。</li></ol><h2 id="Maven项目视图"><a href="#Maven项目视图" class="headerlink" title="Maven项目视图"></a>Maven项目视图</h2><p>Maven项目视图主要用于查看该maven项目的各项属性,同时也可以进行一些常见的maven的操作,比如打包,清理,测试等等;<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202145450167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Maven进阶"><a href="#Maven进阶" class="headerlink" title="Maven进阶"></a>Maven进阶</h1><h2 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h2><p>就像 Make 的 MakeFile、Ant 的 build.xml 一样，<strong>Maven 项目的核心是 pom.xml</strong>。POM( Project Object Model，项目对象模型 ) 定义了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><h3 id="坐标的概念"><a href="#坐标的概念" class="headerlink" title="坐标的概念"></a>坐标的概念</h3><p>在 Maven 中坐标是构件的唯一标识，<strong>Maven 坐标的元素包括 groupId、artifactId、version、packaging、classifier</strong>。上述5个元素中，<strong>groupId、artifactId、version 是必须定义的</strong>，packaging 是可选的 ( 默认为 jar )。</p><h3 id="坐标的意义"><a href="#坐标的意义" class="headerlink" title="坐标的意义"></a>坐标的意义</h3><ul><li>Maven世界拥有大量构建，我们需要找一个用来唯一标识一个构建的统一规范</li><li>拥有了统一规范，就可以把查找工作交给机器</li><li>说白了就是 根据坐标的信息找到那个依赖包 然后装进本地库<h3 id="坐标的含义"><a href="#坐标的含义" class="headerlink" title="坐标的含义"></a>坐标的含义</h3></li><li>groupId：组织标识，一般为：公司网址的反写+项目名</li><li>artifactId：项目名称，一般为：项目名-模块名</li><li>version：版本号 形式为0.0.1-SNAPSHOT：<ul><li>第一个 0 表示大版本号，第二个 0 表示分支版本号，第三个 0 表示小版本号</li><li>SNAPSHOT – 快照版本，ALPHA – 内侧版本，BETA – 公测版本，RELEASE – 稳定版本，GA – 正式发布<ul><li>packaging：打包的方式，如：pom, jar, maven-plugin, ejb, war, …</li><li>clissifier：用来帮助定义构件输出的一些附属构件。<h3 id="自己项目的坐标"><a href="#自己项目的坐标" class="headerlink" title="自己项目的坐标"></a>自己项目的坐标</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202153058568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="第三方项目坐标"><a href="#第三方项目坐标" class="headerlink" title="第三方项目坐标"></a>第三方项目坐标</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202153139203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="依赖的意义"><a href="#依赖的意义" class="headerlink" title="依赖的意义"></a>依赖的意义</h3></li></ul></li></ul></li></ul><blockquote><p>当编写Java代码时，我们总是需要一些库，例如，做单元测试我们需要JUnit库。<strong>对于更大的项目，我们可能需要创建自己的库并在不同的部分使用它的项目。不同的项目需要不同版本的库。</strong><br>保持项目最新的库JAR文件的正确版本不是一个容易的任务。<br>每个外部JAR可能还依赖于其他外部JAR文件等。以<strong>递归方式</strong>下载所有这些外部依赖JAR文件并确保下载正确的版本是一项巨大的任务。<br><strong>当项目越来越大，我们将需要越来越多的外部依赖。 Maven将下载它们并将它们放在您的<em>本地Maven存储库</em>中。</strong><br>我们可以在<strong>POM文件中的dependencies元素内指定依赖关系。</strong></p></blockquote><h3 id="依赖的使用"><a href="#依赖的使用" class="headerlink" title="依赖的使用"></a>依赖的使用</h3><p>例如我们的项目需要进行单元测试,则需要使用到junit-4.9.jar包,使用maven引用该依赖的方式如下:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154312798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>属性说明:</p><ul><li>三维坐标:引用依赖包的三维坐标,用来定位该依赖包;</li><li>scope: 控制该依赖包<strong>在什么情况下</strong>（即Maven的生命周期）会被加到 classpath 中;<h3 id="第三方依赖的查找方法"><a href="#第三方依赖的查找方法" class="headerlink" title="第三方依赖的查找方法"></a>第三方依赖的查找方法</h3>我们在不确定所需引用的第三方依赖包的坐标时,通过maven的中央仓库进行查找,网址: <a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a>;<br>以mybatis举例:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154457492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154512968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154530286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154544649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2>Maven项目在开发工程中有三套classpath</li><li>主代码：main下面的都是主代码在编译的时候的依赖</li><li>测试代码：test下是测试代码编译的时候的依赖  junit</li><li>运行时：main代码在运行的时候对包的依赖  驱动程序</li></ul><p>依赖范围的使用,通过在引用第三方依赖时的<scope></scope>标签进行设置,例如:<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202160859515.png#pic_center" alt="在这里插入图片描述"><br>共 6 种 scope，包括：<strong>compile、provided、runtime、test、system、import</strong>。例如上图的junit,只在测试中使用,则选择test即可,<strong>默认为compile</strong></p><ul><li>Compile：编译依赖范围。默认使用此依赖范围，其下的maven依赖，对于编译，测试，运行classpath都有效。</li><li>Test：测试依赖范围。只对测试classpath有效，编译主代码或运行项目时无法使用此依赖。<strong>典型例子如junit。</strong></li><li>Provided：已提供依赖范围。其对于编译与测试classpath有效，运行时无效。如在web开发时，只有在编译和测试时才用到servlet-api，将其设置为此范围，在运行时servlet-api由web容器提供，无须依赖。并且在打war包时，此范围的依赖不会打在WEB-INF/lib下。</li><li>Runtime：运行时依赖范围。与provided相对，运行时classpath有效。<strong>典型例子如jdbc。</strong><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161106807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="依赖传递和可选依赖（不太重要）"><a href="#依赖传递和可选依赖（不太重要）" class="headerlink" title="依赖传递和可选依赖（不太重要）"></a>依赖传递和可选依赖（不太重要）</h2><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3>应用场景:</li><li>第一直接依赖:        HelloFriend项目依赖Hello项目    </li><li>第二直接依赖:        MakeFriend项目依赖HelloFriend项目<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161444939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="依赖范围对传递依赖的影响"><a href="#依赖范围对传递依赖的影响" class="headerlink" title="依赖范围对传递依赖的影响"></a>依赖范围对传递依赖的影响</h3>传递依赖是会受到依赖范围的影响的,具体来看结果如下:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161522391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><h3 id="依赖阻断"><a href="#依赖阻断" class="headerlink" title="依赖阻断"></a>依赖阻断</h3><p>我们使用<br>例如我们在HelloFriend项目里面的Hello依赖处添加该配置<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161616267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161634693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><p>如果我们需要在依赖中明确的排除掉某一依赖,则可以使用exclusion属性,排除掉引用的依赖,如图:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161900854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="仓库的概念"><a href="#仓库的概念" class="headerlink" title="仓库的概念"></a>仓库的概念</h3><blockquote><p>在 Maven 的术语中，仓库是一个位置（place）。 Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。 在 Maven中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。<br><strong>Maven仓库能帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR，ZIP，POM等等）的地方。</strong></p></blockquote><p>仓库的类型有:</p><ul><li>本地（local）</li><li>中央（central）</li><li>远程（remote） 即私服 一般只有大公司才有</li></ul><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><blockquote><p>Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。<br>运行Maven的时候，<strong>Maven所需要的任何构件都是直接从本地仓库获取的</strong>。<br>如果本地仓库没有，它会首先<strong>尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件</strong>。<br>默认情况下，不管Linux还是 Windows，每个用户在自己的用户目录下都有一个路径名为 .m2/respository/ 的仓库目录<br>Maven 本地仓库默认被创建在 %USER_HOME% 目录下。要修改默认位置，在 %Maven_HOME%\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。</p></blockquote><p>即设置Maven包内的settings文件 上面也提到过。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201211845385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h3><blockquote><p>Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。<br>中央仓库包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。一般来说，简单的Java项目依赖的构件都可以在这里下载到。</p></blockquote><p>中央仓库的关键概念：</p><ul><li>这个仓库由 Maven 社区管理。</li><li>不需要配置。</li><li>需要通过网络才能访问。<h3 id="依赖搜索顺序"><a href="#依赖搜索顺序" class="headerlink" title="依赖搜索顺序"></a>依赖搜索顺序</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202171627741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期的概念"><a href="#生命周期的概念" class="headerlink" title="生命周期的概念"></a>生命周期的概念</h3></li></ul><blockquote><p>Maven的生命周期是对所有的构建过程进行抽象和统一。Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际的工作，生命周期只是定义了一系列的阶段，并确定这些阶段的执行顺序。而在执行这些阶段时，实际的工作还是由插件来完成的。这种思想与设计模式中的模板方法非常相似。</p></blockquote><p>Maven有三套相互独立的生命周期:</p><ul><li>Clean  clean生命周期的目的是清理项目</li><li>Default  default生命周期的目的是构建项目</li><li>site  site生命周期的目的是建立项目站点。<h3 id="完整生命周期"><a href="#完整生命周期" class="headerlink" title="完整生命周期"></a>完整生命周期</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202171836790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202171902957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><blockquote><p>用户在mvn命令后可以指定三个生命周期中的任何阶段，则Maven会按以下逻辑执行：<strong>首先会得到该阶段所属生命周期，从该生命周期中的第一个阶段开始按顺序执行，直至该阶段本身</strong>。例如执行mvn clean命令会依次执行clean生命周期中的pre-clean阶段及clean阶段。mvn命令后可以指定多个阶段，Maven会按照输入的顺序依次执行，每次执行都会按照之前描述的逻辑执行。<br>之前提到实际的工作还是由插件来完成的，这意味着插件需要和阶段绑定起来。Maven已经事先将很多核心插件绑定到对应的阶段，这样用户几乎不用配置就有构建Maven项目。Maven的内置绑定如下：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172010381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><h2 id="Maven继承和聚合"><a href="#Maven继承和聚合" class="headerlink" title="Maven继承和聚合"></a>Maven继承和聚合</h2><h3 id="继承的意义"><a href="#继承的意义" class="headerlink" title="继承的意义"></a>继承的意义</h3><blockquote><p>继承就是避免重复，maven的继承也是这样，它还有一个好处就是让项目更加安全。比如我们在项目开发的过程中，可能多个模块独立开发，但是多个模块可能依赖相同的公共模块，比如说每个模块都需要javaseo-utils，在编译的时候，maven-compiler-plugin插件也要被引入，maven仓库地址以及发布目录都是相同的配置。我们可以使用Maven的继承功能，把公共的配置信息写到父模块中，子模块只要继承了该父模块，也会继承父模块的配置信息。</p></blockquote><h3 id="可继承的POM元素"><a href="#可继承的POM元素" class="headerlink" title="可继承的POM元素"></a>可继承的POM元素</h3><blockquote><p><strong>groupId</strong> ：项目组 ID ，项目坐标的核心元素；<br><strong>version</strong> ：项目版本，项目坐标的核心元素；<br>description：项目的描述信息；<br>organization ：项目的组织信息；<br>inceptionYear ：项目的创始年份；<br>url ：项目的 url地址<br>develoers ：项目的开发者信息；<br>contributors ：项目的贡献者信息；<br>distributionManagerment ：项目的部署信息；<br>issueManagement ：缺陷跟踪系统信息；<br>ciManagement ：项目的持续继承信息；<br>scm ：项目的版本控制信息；<br>mailingListserv ：项目的邮件列表信息；<br><strong>properties</strong> ：自定义的 Maven 属性；<br><strong>dependencies</strong> ：项目的依赖配置；<br><strong>dependencyManagement</strong> ：醒目的依赖管理配置；<br>repositories ：项目的仓库配置；<br>build：包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等；<br>reporting ：包括项目的报告输出目录配置、报告插件配置等</p></blockquote><h3 id="IDEA实现Maven的继承"><a href="#IDEA实现Maven的继承" class="headerlink" title="IDEA实现Maven的继承"></a>IDEA实现Maven的继承</h3><ol><li>创建父类项目随意 然后创建三个子类项目<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172408553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172424963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172437996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>至此,一个由parent统一管理core,manage和portal的mavan项目就创建好了;<br>观察父子项目的pom文件配置<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172516132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172531708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="继承的依赖管理"><a href="#继承的依赖管理" class="headerlink" title="继承的依赖管理"></a>继承的依赖管理</h3>父类直接引用依赖,如果在父类的dependencies内直接引用依赖,则子类都会继承该依赖,父类写下。 则子类都会继承该依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>第二种是在父类内放入 依赖包但父类不依赖但规定版本设置，由子类自己调用</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   父类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   子类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="聚合管理"><a href="#聚合管理" class="headerlink" title="聚合管理"></a>聚合管理</h3><blockquote><p>我们在平时的开发中，项目往往会被划分为好几个模块，比如common公共模块、system系统模块、log日志模块、reports统计模块、monitor监控模块等等。这时我们肯定会出现这么一个需要，我们需要一次构件多个模块，而不用每个模块都去mvn;<br>————<br>以上面得父子项目为例,<strong>当我们对parent进行mvn install时,会对core,manage和portal项目均进行install操作</strong>:</p></blockquote><h3 id="properties属性的使用"><a href="#properties属性的使用" class="headerlink" title="properties属性的使用"></a>properties属性的使用</h3><p><strong>通过 properties元素用户可以定义一个或多个 maven 属性</strong>，然后在 maven 的其他地方使用 <strong>${属性名称}</strong> 的方式引用该属性，这种做法的意义在于消除重复和统一管理。比如，需要在多个地方重复声明同样的 SpringFramework 版本，现在只需要在一个地方声明就可以。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   父类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson-version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">fastjson-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Maven&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Maven的概念&quot;&gt;&lt;a href=&quot;#Maven的概念&quot; class=&quot;headerlink&quot; title=&quot;Maven的概念&quot;&gt;&lt;/a&gt;Maven的概念&lt;/h1&gt;&lt;h2 id=&quot;什么是Maven&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2021/01/31/Git/"/>
    <id>http://yoursite.com/2021/01/31/Git/</id>
    <published>2021-01-31T15:12:38.072Z</published>
    <updated>2021-01-31T15:12:45.242Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Git用于分布式管理">TOC</a></p><h1 id="Git安装与介绍"><a href="#Git安装与介绍" class="headerlink" title="Git安装与介绍"></a>Git安装与介绍</h1><h2 id="Git优势"><a href="#Git优势" class="headerlink" title="Git优势"></a>Git优势</h2><ul><li>大部分操作在本地完成，不需要联网</li><li>能够保证项目的完整性</li><li>尽可能的添加 而不是删除或者修改数据</li><li>分支操作非常快捷流畅</li><li>与Linux 全面兼容<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><h3 id="本地Windows"><a href="#本地Windows" class="headerlink" title="本地Windows"></a>本地Windows</h3>在git官网下下载 安装即可。<h3 id="虚拟机或者购买服务器上安装git"><a href="#虚拟机或者购买服务器上安装git" class="headerlink" title="虚拟机或者购买服务器上安装git"></a>虚拟机或者购买服务器上安装git</h3>安装git<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>测试git 是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130163355973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130163709805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="常见Git代码托管中心"><a href="#常见Git代码托管中心" class="headerlink" title="常见Git代码托管中心"></a>常见Git代码托管中心</h2><p>Git代码托管中心的任务：维护远程库</p><ul><li>局域网托管中心：<ul><li>GitLab服务器</li></ul></li><li>外网托管中心：<ul><li>GitHub</li><li>码元</li></ul></li></ul><h2 id="本地库和远程库"><a href="#本地库和远程库" class="headerlink" title="本地库和远程库"></a>本地库和远程库</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131143206481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="跨团队合作"><a href="#跨团队合作" class="headerlink" title="跨团队合作"></a>跨团队合作</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131143226978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h1><h2 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h2><blockquote><p>作用：区分不同开发人员的身份<br>辨析：这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关系。</p></blockquote><p>项目级别/仓库级别：仅在当前本地库范围内有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name user.name jks</span><br><span class="line">git config user.email 963561243@qq.com</span><br><span class="line">信息保存位置：./.git/config 文件</span><br></pre></td></tr></table></figure><p>系统用户级别：登录当前操作系统的用户范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name jks</span><br><span class="line">git config --global user.email 963561243@qq.com</span><br><span class="line">信息保存位置：~/.gitconfig 文件</span><br></pre></td></tr></table></figure><p>级别优先级</p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="上传增加文件"><a href="#上传增加文件" class="headerlink" title="上传增加文件"></a>上传增加文件</h2><ol><li>新建一个java文件，并写好内容保存<code>vi hello.java</code>  此时本地目录会有这个文件</li><li><strong>查看工作区、暂存区状态 <code>git status</code></strong></li><li>将文件创建映射到<strong>暂存区</strong><code>git add hello.java</code> </li><li>最终提交文件到<strong>本地库</strong> <code>git commit -m firstcommit</code>  firstcommit为自定义该阶段版本名字</li></ol><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><ol><li>删除hello.java文件  <code>vi hello.java</code>  本地目录这个文件会直接没有</li><li>查看此时状态 <code>git status</code>   </li><li>将文件删除映射到<strong>暂存区</strong><code>git add hello.java</code> </li><li>最终文件删除映射到<strong>本地库</strong> <code>git commit -m worldcommit</code>  worldcommit为自定义的该阶段版本名字</li></ol><h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2><p>查看历史记录 <code>git reflog</code>   例如：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130204330500.png#pic_center" alt="在这里插入图片描述"><br>前面的序号，是这步的一个唯一标识索引值 可用于恢复等操作。</p><h2 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h2><p>恢复特定的步骤 如恢复 第二步 b98594c。 也可以恢复回来，即文件的版本切换<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130232958686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>基于索引值操作[推荐]  <code>git reset --hard b98594c</code></li><li>使用^符号：只能后退  <code>git reset --hard HEAD^      注：一个^表示后退一步，n 个表示后退 n 步</code></li><li>使用<del>符号：只能后退  `git reset –hard HEAD</del>n    注：表示后退 n 步`</li><li>reset 命令的三个参数对比<ul><li>–soft 参数   仅仅在本地库移动 HEAD 指针</li><li>–mixed 参数  在本地库移动 HEAD 指针  重置暂存区</li><li>–hard 参数  在本地库移动 HEAD 指针  重置暂存区   重置工作区</li></ul></li></ul><h2 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h2><p>文件的不同版本之间的对比，可以看出来哪里改了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff [文件名]   将工作区中的文件和暂存区进行比较</span><br><span class="line">git diff [本地库中历史版本] [文件名]  将工作区中的文件和本地库历史记录比较</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130211723289.png#pic_center" alt="在这里插入图片描述"></p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="分支的意义"><a href="#分支的意义" class="headerlink" title="分支的意义"></a>分支的意义</h2><p>在版本控制过程中，使用多条线同时推进多个任务。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130233247454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ol><li><p>创建分支   <code>git branch [分支名]</code></p></li><li><p>查看分支   <code>git branch -v</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013111185671.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>切换分支   <code>git checkout [分支名]</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131111954703.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>合并分支</p><ul><li>第一步：切换到接受修改的分支（被合并，增加新内容）上 <code>git checkout [被合并分支名]</code></li><li>第二步：执行 merge 命令  <code>git merge [有新内容分支名]</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131141035876.png#pic_center" alt="在这里插入图片描述"><br>冲突的表现<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131142250714.png#pic_center" alt="在这里插入图片描述"><br>冲突的解决</li></ul></li><li><p>第一步：编辑文件，删除特殊符号</p></li><li><p>第二步：把文件修改到满意的程度，保存退出</p></li><li><p>第三步：git add [文件名]</p></li><li><p>第四步：git commit -m “日志信息”</p><pre><code>注意：此时 commit 一定不能带具体文件名</code></pre></li></ol><h1 id="Git-基本原理"><a href="#Git-基本原理" class="headerlink" title="Git 基本原理"></a>Git 基本原理</h1><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144239775.png#pic_center" alt="在这里插入图片描述"><br>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下  几个共同点：</p><ul><li>不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。</li><li>哈希算法确定，输入数据确定，输出数据能够保证不变</li><li>哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大</li><li>哈希算法不可逆<br>Git 底层采用的是 SHA-1 算法。<br>哈希算法可以被用来验证文件。原理如下图所示：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144357250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Git 就是靠这种机制来从根本上保证数据完整性的。<h2 id="Git-保存版本的机制"><a href="#Git-保存版本的机制" class="headerlink" title="Git 保存版本的机制"></a>Git 保存版本的机制</h2><h3 id="集中式版本控制工具的文件管理机制"><a href="#集中式版本控制工具的文件管理机制" class="headerlink" title="集中式版本控制工具的文件管理机制"></a>集中式版本控制工具的文件管理机制</h3>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144513151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="Git-的文件管理机制"><a href="#Git-的文件管理机制" class="headerlink" title="Git 的文件管理机制"></a>Git 的文件管理机制</h3>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，  Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的工作方式可以称之为快照流。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144822807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="Git-文件管理机制细节"><a href="#Git-文件管理机制细节" class="headerlink" title="Git 文件管理机制细节"></a>Git 文件管理机制细节</h3>Git 的“提交对象”<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131145348484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>提交对象及其父对象形成的链条<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114541689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="Git-分支管理机制"><a href="#Git-分支管理机制" class="headerlink" title="Git 分支管理机制"></a>Git 分支管理机制</h2><h3 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114545371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131145517638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114554015.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114555062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131145609197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h1 id="GitHub实战"><a href="#GitHub实战" class="headerlink" title="GitHub实战"></a>GitHub实战</h1><h2 id="账号信息"><a href="#账号信息" class="headerlink" title="账号信息"></a>账号信息</h2>注册呗 GitHub 首页就是注册页面：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>比如我的叫</li><li>Email地址：<a href="mailto:963561243@qq.com">963561243@qq.com</a></li><li>Github账号：jks88990041</li></ul><h2 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h2><ol><li>创建一个Github库，点击<strong>new</strong><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131151137433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>填上仓库的名字，选择public，其他不填</li></ol><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131152045534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>打开后上端，为这个库需要git的地址<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131152323683.png#pic_center" alt="在这里插入图片描述"></p><ol start="3"><li>创建一个文件夹，作为我们项目目录文件，然后再这个文件夹下进行git操作</li><li>首先，先初始化库 <code>git init</code></li><li>可以创建一个初始的README.md文件 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br><span class="line">vi README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure><ul><li>连接github远程库 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//连接远程库</span><br><span class="line">git remote add origin https://github.com/jks88990041/jksFortest.git</span><br><span class="line">//可以查看连接的所有库的别名等</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li>推送  <code>git push [别名] [分支名]</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013115362575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131153802723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>出现如下表示 本地库连接成功<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131153934649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>打开该github库 可以看到 README.md文件<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013115472993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="团队成员多人开发"><a href="#团队成员多人开发" class="headerlink" title="团队成员多人开发"></a>团队成员多人开发</h2></li><li>点击settings 左侧栏的Manage access 然后 邀请</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131162923322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>别的成员开发需要 拉取全部项目库内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jks88990041/jksFortest.git</span><br></pre></td></tr></table></figure><ul><li>做了n多操作修改后，需要上传效果。 即</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>远程库看到效果后，本地库不会有所改动的。因此本地库需要拉取远程库的内容。但不是克隆，因为我已经初始化整个包了，我只是更新。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pull=fetch+merge</span><br><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br><span class="line">//用pull即可</span><br><span class="line">git pull [远程库地址别名] [远程分支名]</span><br></pre></td></tr></table></figure><p>注：可能的冲突<br>冲突原因：</p><ul><li>程序员甲在A文件的第三行写了代码并提交到远程库</li><li>程序员乙在未更新代码的情况向下，也对A文件的第三行写了代码</li><li>git没法区别应该保留哪行代码，需要人为的干预</li></ul><p>解决冲突：</p><ul><li>程序员乙拉取远程库代码</li><li>程序员乙打开A文件，删除无用的头信息（git添加）</li><li>程序员乙保存A文件并添加到<strong>暂存区</strong></li><li>程序员乙提交更改到本地库（提交时不要加文件名）</li><li>程序员乙提交本地库<strong>到远程库</strong><br>注意事项：</li><li>项目管理人员就应该分块写，不然这样冲突不是很麻烦么</li></ul><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><p>以项目本人的身份进行fork 复制<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131170658162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="SSH-登录"><a href="#SSH-登录" class="headerlink" title="SSH 登录"></a>SSH 登录</h2><p>进入当前用户的家目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>删除.ssh 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rvf .ssh</span><br></pre></td></tr></table></figure><p>运行命令生成.ssh 密钥目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C 963561243@qq.com [注意：这里-C 这个参数是大写的 C]</span><br></pre></td></tr></table></figure><p>进入.ssh 目录查看文件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh</span><br><span class="line">$ ls -lF</span><br></pre></td></tr></table></figure><p>查看 id_rsa.pub 文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><blockquote><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys New SSH<br>Key 输入复制的密钥信息<br>回到 Git bash 创建远程地址别名 例如 git remote add origin_ssh <a href="mailto:git@github.com">git@github.com</a>:atguigu2018ybuq/huashan.git 推送文件进行测试</p></blockquote><h1 id="IDEA连接Github"><a href="#IDEA连接Github" class="headerlink" title="IDEA连接Github"></a>IDEA连接Github</h1><p>注意：第一次提交的时候，得新建一个库，不初始化。这个库最好和这个项目是对应的名字。你用其他初始化的库，就不对了。</p><ol><li>打开idea将配置Git</li></ol><blockquote><p>下面的git.exe是Idea自动检测到的，一般只要你安装了，idea会自动监测到，如果你的没有自动监测到，找到安装git路径，找到bin目录下的git.exe，导入即可，然后点击右边的Test测试，测试成功的话会显示你的git版本号，如下图<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131211938643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 2. 而后配置Github<br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131213855547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 3. 然后输入自己的用户名和密码，之后你会看到一条红色的报错信息，需要去你的github找token,这里就不说token怎么找了，附上别人的链接（<a href="https://blog.csdn.net/weixin_41637749/article/details/83791464" target="_blank" rel="noopener">点我！点我</a>）<br> 4. 配置好token 后 <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214031750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 5. 将当前项目纳入git版本控制体系中<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214205788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 看到项目文件文字颜色发生变化即正确<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214742120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>6. 将工作区内容添加到暂存区<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214841998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>项目文件的文字颜色再次发生变化<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214932705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 7. 将暂存区的内容提交到git本地库<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215135247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215238597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><ol start="8"><li><p>将本地库的内容push到远程仓库<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215354221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215535915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击ok之后就会看到Idea右下角由pushing的进度条，中间会弹出一个github登录框（不同版本的框可能不一样哈），登上即可<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215732976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>右下角出现成功即可 <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131224627868.png#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131224851738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Git用于分布式管理&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Git安装与介绍&quot;&gt;&lt;a href=&quot;#Git安装与介绍&quot; class=&quot;headerlink&quot; title=&quot;Git安装与介绍&quot;&gt;&lt;/a&gt;Git安装与介绍&lt;/h1&gt;&lt;h2 id=&quot;Git优
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git精髓简略版</title>
    <link href="http://yoursite.com/2021/01/30/Git%E7%B2%BE%E9%AB%93%E7%AE%80%E7%95%A5%E7%89%88/"/>
    <id>http://yoursite.com/2021/01/30/Git%E7%B2%BE%E9%AB%93%E7%AE%80%E7%95%A5%E7%89%88/</id>
    <published>2021-01-30T15:11:23.225Z</published>
    <updated>2021-01-30T13:23:27.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="协同修改、数据备份、可将本地文件恢复到某一个历史状态"><a href="#协同修改、数据备份、可将本地文件恢复到某一个历史状态" class="headerlink" title="协同修改、数据备份、可将本地文件恢复到某一个历史状态"></a>协同修改、数据备份、可将本地文件恢复到某一个历史状态</h3><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><ul><li>SVN 集中式  增量式管理方式 就是每有增量保存状态叠加</li><li>Git 分布式 文件快照的方式  优势为 避免端点故障</li></ul><h3 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h3><ul><li>工作区:写代码  通过git add -&gt;暂存区:临时存储代码  git  commit -&gt; 本地库:历史版本</li></ul><h3 id="代码托管中心-维护远程库"><a href="#代码托管中心-维护远程库" class="headerlink" title="代码托管中心:维护远程库"></a>代码托管中心:维护远程库</h3><ul><li><p>局域网环境下</p><ul><li>GitLab服务器</li></ul></li><li><p>外网环境下</p><ul><li>GitHub</li><li>码云</li></ul></li></ul><h3 id="本地库与远程库"><a href="#本地库与远程库" class="headerlink" title="本地库与远程库"></a>本地库与远程库</h3><ul><li>团队内部协作</li><li>跨团队协作</li></ul><h2 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h2><h3 id="本地库操作"><a href="#本地库操作" class="headerlink" title="本地库操作"></a>本地库操作</h3><ul><li><p>本地库初始化</p><ul><li>git初始化： git init</li><li>命令：git add</li><li>.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改</li></ul></li><li><p>设置签名</p><ul><li><p>形式</p><ul><li><p>如: 用户名:tom Email地址: <a href="mailto:goodMorning@163.com">goodMorning@163.com</a></p></li><li><p>作用为:区分不同开发人员的身份</p></li><li><p>注意:  这里的签名形式和 登录远程库(代码托管中心)的账号密码  没有关系</p></li><li><p>命令</p><ul><li><p>项目级别/仓库级别：仅在当前本地库范围内有效</p><ul><li>git config user.name tom_pro</li><li>git config user.email <a href="mailto:goodMorning_pro@atguigu.com">goodMorning_pro@atguigu.com</a></li><li>信息保存位置：./.git/config 文件</li></ul></li><li><p>系统用户级别：登录当前操作系统的用户范围</p><ul><li>git config –global user.name tom_glb</li><li>git config –global <a href="mailto:goodMorning_pro@atguigu.com">goodMorning_pro@atguigu.com</a></li><li>信息保存位置：~/.gitconfig 文件</li></ul></li><li><p>级别优先级</p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别 的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul></li></ul></li></ul></li></ul></li><li><p>基本操作</p><ul><li><p>git status 查看工作区、暂存区状态</p></li><li><p>git add [file name] 将工作区的“新建/修改”添加到暂存区</p></li><li><p>git commit -m “commit message” [file name] 将暂存区的内容提交到本地库</p></li><li><p>查看历史记录 git log</p><ul><li><p>多屏显示控制方式： 空格向下翻页 b 向上翻页 q 退出</p></li><li><p>git log –pretty=oneline</p></li><li><p>git log –oneline</p></li><li><p>git reflog</p><ul><li>HEAD@{移动到当前版本需要多少步}</li></ul></li></ul></li><li><p>版本前进后退</p><ul><li><p>基于索引值操作[推荐]</p><ul><li>git reset –hard a6ace91</li></ul></li><li><p>使用^符号：只能后退</p><ul><li>git reset –hard HEAD^      注：一个^表示后退一步，n 个表示后退 n 步</li></ul></li><li><p>使用~符号：只能后退</p><ul><li>git reset –hard HEAD~n    注：表示后退 n 步</li></ul></li><li><p>reset 命令的三个参数对比</p><ul><li>–soft 参数   仅仅在本地库移动 HEAD 指针</li><li>–mixed 参数  在本地库移动 HEAD 指针  重置暂存区</li><li>–hard 参数  在本地库移动 HEAD 指针  重置暂存区   重置工作区</li></ul></li></ul></li><li><p>比较文件差异</p><ul><li>git diff [文件名]   将工作区中的文件和暂存区进行比较</li><li>git diff [本地库中历史版本] [文件名]  将工作区中的文件和本地库历史记录比较</li></ul></li><li><p>分支管理</p><ul><li><p>创建分支   git branch [分支名]</p></li><li><p>查看分支   git branch -v</p></li><li><p>切换分支   git checkout [分支名]</p></li><li><p>合并分支</p><ul><li><p>第一步：切换到接受修改的分支（被合并，增加新内容）上 git checkout [被合并分支名]</p></li><li><p>第二步：执行 merge 命令 git merge [有新内容分支名]</p></li><li><p>解决冲突</p><ul><li>第一步：编辑文件，删除特殊符号</li><li>第二步：把文件修改到满意的程度，保存退出</li><li>第三步：git add [文件名]</li><li>第四步：git commit -m “日志信息”     注意：此时 commit 一定不能带具体文件名</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h3><ul><li><p>创建远程库地址别名</p><ul><li>git remote -v 查看当前所有远程地址别名 git remote add [别名] [远程地址]</li></ul></li><li><p>克隆(非团队成员操作)</p><ul><li><p>命令: git clone [地址]</p><ul><li>完整的把远程库下载到本地</li><li>创建 origin 远程地址别名</li><li>初始化本地库</li></ul></li></ul></li><li><p>成为团队成员</p></li><li><p>拉取</p><ul><li><p>pull = fetch+merge</p><ul><li><p>git fetch [远程库地址别名][远程分支名]</p></li><li><p>git merge  [远程库地址别名/远程分支名]</p><ul><li>git merge jks123/master</li></ul></li></ul></li><li><p>单用 git pull jks123 master 也可以  不过容易产生冲突</p></li></ul></li><li><p>解决冲突</p><ul><li><p>如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉 取。</p></li><li><p>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</p></li><li><p>类比</p><ul><li>老王和老王媳妇</li></ul></li></ul></li><li><p>跨团队合作</p><ul><li>第三方人  fork</li><li>正常 clone  编辑 push 到远程一套 记得去掉凭证</li><li>Pull Request</li><li>审核人本人出 conmmit  那确认</li><li>本人 从远程库 pull 到本地即可</li></ul></li><li><p>SSH 替换HTTPS 登录</p><ul><li><p>好处：可以不用登录  缺点：只能有一个人</p></li><li><p>进入当前用户的家目录 $ cd ~</p></li><li><p>删除原有的ssh  rm -r .ssh/</p></li><li><p>运行命令生成.ssh 密钥目录 $ ssh-keygen -t rsa -C <a href="mailto:atguigu2018ybuq@aliyun.com">atguigu2018ybuq@aliyun.com</a></p></li><li><p>进入.ssh 目录查看文件列表  $ cd .ssh   $ ls -lF</p></li><li><p>查看 id_rsa.pub 文件内容  $ cat id_rsa.pub</p></li><li><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys</p></li><li><p>New SSH Key</p><ul><li>输入复制的密钥信息</li></ul></li><li><p>回到 Git bash 创建远程地址别名</p><ul><li>git remote add origin_ssh <a href="mailto:git@github.com">git@github.com</a>:atguigu2018ybuq/huashan.git</li></ul></li></ul></li></ul><h2 id="分支主题-3"><a href="#分支主题-3" class="headerlink" title="分支主题 3"></a>分支主题 3</h2><p><em>XMind - Trial Version</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;版本控制&quot;&gt;&lt;a href=&quot;#版本控制&quot; class=&quot;headerlink&quot; title=&quot;版本控制&quot;&gt;&lt;/a&gt;版本控
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2021/01/29/Linux/"/>
    <id>http://yoursite.com/2021/01/29/Linux/</id>
    <published>2021-01-29T15:30:52.504Z</published>
    <updated>2021-01-29T15:30:59.764Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Linux">TOC</a></p><h1 id="linux的文件规则"><a href="#linux的文件规则" class="headerlink" title="linux的文件规则"></a>linux的文件规则</h1><ul><li>除了/所有的字符都是合法的</li><li>有些字符不建议使用，如空格符，制表符，退格符和字符@#$()-等</li><li>避免使用.作为普通文件名作为第一个字符，因为第一个点的作为字符代表隐藏的文件</li><li>Linux的大小写是区分的</li></ul><h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><blockquote><p>蓝色：表示目录 青色：表示链接 黑色：表示文件</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129144832375.png#pic_center" alt="在这里插入图片描述"><br>根目录下，包括如下的几种目录<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129145021166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>/- 根<br>每一个文件和目录从根目录开始。<br>只有root用户具有该目录下的写权限。请注意，/root是root用户的主目录</li><li>/bin中 - 用户二进制文件<br>包含二进制可执行文件。<br>在单用户模式下，你需要使用的常见Linux命令都位于此目录下。系统的所有用户使用的命令都设在这里。<br>例如：ps、ls、ping、grep、cp<br>第一种方式:    只有a匹配的上 其他不合法</li><li>/sbin目录 - 系统二进制文件<br>就像/bin，/sbin同样也包含二进制可执行文件。<br>但是，在这个目录下的linux命令通常由系统管理员使用，对系统进行维护。例如：iptables、reboot、fdisk、ifconfig、swapon命令</li><li>/etc - 配置文件<br>包含所有程序所需的配置文件。<br>也包含了用于启动/停止单个程序的启动和关闭shell脚本。例如：/etc/resolv.conf、/etc/logrotate.conf</li><li>/dev - 设备文件<br>包含设备文件。<br>这些包括终端设备、USB或连接到系统的任何设备。例如：/dev/tty1、/dev/usbmon0</li><li>/proc - 进程信息<br>包含系统进程的相关信息。<br>这是一个虚拟的文件系统，包含有关正在运行的进程的信息。例如：/proc/{pid}目录中包含的与特定pid相关的信息。<br>这是一个虚拟的文件系统，系统资源以文本信息形式存在。例如：/proc/uptime</li><li>/var - 变量文件<br>var代表变量文件。<br>这个目录下可以找到内容可能增长的文件。<br>这包括 - 系统日志文件（/var/log）;包和数据库文件（/var/lib）;电子邮件（/var/mail）;打印队列（/var/spool）;锁文件（/var/lock）;多次重新启动需要的临时文件（/var/tmp）;</li><li>/tmp - 临时文件<br>包含系统和用户创建的临时文件。<br>当系统重新启动时，这个目录下的文件都将被删除。</li><li>/usr - 用户程序<br>包含二进制文件、库文件、文档和二级程序的源代码。<br>/usr/bin中包含用户程序的二进制文件。如果你在/bin中找不到用户二进制文件，到/usr/bin目录看看。例如：at、awk、cc、less、scp。<br>/usr/sbin中包含系统管理员的二进制文件。如果你在/sbin中找不到系统二进制文件，到/usr/sbin目录看看。例如：atd、cron、sshd、useradd、userdel。<br>/usr/lib中包含了/usr/bin和/usr/sbin用到的库。<br>/usr/local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在/usr/local/apache2中。</li><li>/home - HOME目录<br>所有用户用home目录来存储他们的个人档案。<br>例如：/home/john、/home/nikita</li><li>/boot - 引导加载程序文件<br>包含引导加载程序相关的文件。<br>内核的initrd、vmlinux、grub文件位于/boot下。<br>例如：initrd.img-2.6.32-24-generic、vmlinuz-2.6.32-24-generic</li><li>/lib - 系统库<br>包含支持位于/bin和/sbin下的二进制文件的库文件.<br>库文件名为 ld<em>或lib</em>.so.*<br>例如：ld-2.11.1.so，libncurses.so.5.7</li><li>/opt - 可选的附加应用程序<br>opt代表可选的。<br>包含从个别厂商的附加应用程序。<br>附加应用程序应该安装在/opt/或者/opt/的子目录下。</li><li>/mnt - 挂载目录<br>临时安装目录，系统管理员可以挂载文件系统。</li><li>/media - 可移动媒体设备<br>用于挂载可移动设备的临时目录。<br>举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器的/media/floppy;</li><li>/srv - 服务数据<br>srv代表服务。<br>包含服务器特定服务相关的数据。<br>例如，/srv/cvs包含cvs相关的数据。</li></ol><h1 id="Linux的常用命令"><a href="#Linux的常用命令" class="headerlink" title="Linux的常用命令"></a>Linux的常用命令</h1><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>命令格式：命令-选项参数<br>例：ls  -la /etc<br>说明： 1）当有多个选项时，可以写在一起。<br>          2）两个特殊的目录. 和.. ，分别代表当前<br>                目录和当前目录的父目录。<br>本节的要点</p><ul><li>文件处理命令</li><li>权限管理命令</li><li>文件搜索命令</li><li>帮助命令</li><li>压缩解压命令</li><li>网络通信命令</li><li>系统关机命令</li><li>Shell应用技巧<br><strong>/sbin和/usr/sbin下的命令是root执行的命令<br>/bin和/usr/bin下的命令是所有用户都可以执行的命令</strong><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3>命令名称：ls<br>命令英文原意：list<br>命令所在路径：/bin/ls<br>执行权限：所有用户<br><strong>功能描述：显示目录文件</strong><br>语法：<strong>ls 选项[-al] [文件或目录]</strong><br>-a  显示所有文件，包括隐藏文件（all）<br>-l  详细信息显示（long）<br>范例：drwxr-xr-x   2 root root  4096 Dec  3 06:18 bin<pre><code>第一个字符d是文件类型：</code></pre>d是目录<br>-是二进制文件<br>l软连接文件<br>第一列的后9个字符（rwxr-xr-x）是文件的权限<br>R是读，w是写，x是可执行<br>Rwx                        r-x                    r-x<br>所有者u(user)        所属组(group)                其他人o(other)<br>2代表硬链接数<br>root root：第一个root是所属用户，第二个root是所属组<br>4096：是文件的大小，以数据块来表示，一个数据块是512字节<br>Dec  3 06:18：文件的创建时间或最后最后修改时间<br>bin:文件名</li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>命令名称：cd<br>命令英文原意：change directory<br>命令所在路径：shell内置命令<br>执行权限：所有用户<br><strong>语法：cd [目录]</strong><br><strong>功能描述：切换目录</strong><br>范例：$ cd  /  切换到根目录<br>$ cd  ..  回到上一级目录</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>命令名称：pwd<br>命令英文原意：print working directory<br>命令所在路径：/bin/pwd<br>执行权限：所有用户<br><strong>语法：pwd</strong><br><strong>功能描述：显示当前所在的工作目录</strong><br>范例：$ pwd<br>/etc/rc5.d</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>命令名称：touch<br>命令所在路径：/bin/touch<br>执行权限：所有用户<br><strong>语法：touch [文件名]</strong><br><strong>功能描述：创建空文件</strong><br>范例：$ touch newfile</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>命令名称：mkdir<br>命令英文原意：make directories<br>命令所在路径：/bin/mkdir<br>执行权限：所有用户<br><strong>语法：mkdir  [目录名]</strong><br><strong>功能描述：创建新目录</strong><br>范例：$ mkdir newdir</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>命令名称：cp<br>命令英文原意：copy<br>命令所在路径：/bin/cp<br>执行权限：所有用户<br><strong>语法：cp -R [源文件或目录] [目的目录]</strong><br>-R  复制目录<br><strong>功能描述：复制文件或目录</strong></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>命令名称：mv<br>命令英文原意：move<br>命令所在路径：/bin/mv<br>执行权限：所有用户<br><strong>语法：mv  [源文件或目录] [目的目录]</strong><br><strong>功能描述：移动文件、更名</strong></p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>命令名称：rm<br>命令英文原意：remove<br>命令所在路径：/bin/rm<br>执行权限：所有用户<br><strong>语法：rm  -r [文件或目录]</strong><br>-r  删除目录<br><strong>功能描述：删除文件</strong></p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>命令名称：cat<br>命令英文原意：concatenate and display files<br>命令所在路径：/bin/cat<br>执行权限：所有用户<br><strong>语法：cat [文件名]</strong><br><strong>功能描述：显示文件内容</strong><br>范例：$ cat /etc/issue<br>$ cat /etc/services<br><strong>缺点：无法显示很长的文件</strong></p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>命令名称：more<br>命令所在路径：/bin/more<br>执行权限：所有用户<br><strong>语法：more [文件名]</strong><br>(空格) 或f  显示下一页<br>(Enter)  显示下一行<br>q或Q  退出<br><strong>功能描述：分页显示文件内容</strong><br>范例：$ more /etc/services</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>指令名称：head<br>指令所在路径：/bin/head<br>执行权限：All User<br><strong>语法：head -num [文件名]</strong><br>-num 显示文件的前num行<br><strong>功能描述：查看文件的前几行</strong><br>范例：$ head -20 /etc/services</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>指令名称：tail<br>指令所在路径：/bin/tail<br>执行权限：All User<br><strong>语法：tail -num [文件名]</strong><br>-num 显示文件的后num行<br>-f  动态显示文件内容<br><strong>功能描述：查看文件的后几行</strong><br>范例：$ tail -30 /etc/services</p><h3 id="In"><a href="#In" class="headerlink" title="In"></a>In</h3><p>命令名称：ln<br>命令英文原意：link<br>命令所在路径：/bin/ln<br>执行权限：所有用户<br><strong>语法：ln  -s [源文件] [目标文件]</strong><br>-s 创建软链接<br>功能描述：产生链接文件（类似win中的快捷方式）<br><strong>创建硬链接不需要使用-s, 类似拷贝，但是不同的两个文件会做同步更新</strong><br>范例：<br>$ ln -s /etc/issue /issue.soft<br>创建文件/etc/issue的软链接/issue.soft<br>$ ln  /etc/issue /issue.hard<br>创建文件/etc/issue的硬链接/issue.hard</p><h2 id="权限处理命令"><a href="#权限处理命令" class="headerlink" title="权限处理命令"></a>权限处理命令</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>命令名称：chmod<br>命令英文原意：change the permissions mode of a file<br>命令所在路径：/bin/chmod<br>执行权限：所有用户<br><strong>语法：chmod  [{ugo}{+-=}{rwx}] [文件或目录]<br>[mode=421 ] [文件或目录]</strong><br><strong>功能描述：改变文件或目录权</strong><br>在文件的权限中有三种用户u,     g,    o<br>范例：<br>$ chmod  g+w  file1<br>赋予文件file1所属组写权限<br>$ chmod  777 dir1<br>设定目录dir1为所有用户具有全部权限<br>使用数字的方式来授权<br><strong>r=4，w=2，x=1</strong></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129230952786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>命令名称：chown<br>命令英文原意：change file ownership<br>命令所在路径：/bin/chown<br>执行权限：所有用户<br><strong>语法：chown  [用户] [文件或目录]</strong><br><strong>功能描述：改变文件或目录的所有者</strong><br>范例：$ chown  nobody file1<br>改变文件file1的所有者为nobody</p><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>命令名称：chgrp<br>命令英文原意：change file group ownership<br>命令所在路径：/bin/chgrp<br>执行权限：所有用户<br><strong>语法：chgrp  [用户组] [文件或目录]</strong><br><strong>功能描述：改变文件或目录的所属组</strong><br>范例：$ chgrp adm file1<br>改变文件file1的所属组为adm</p><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>命令名称：which<br>命令所在路径：/usr/bin/which<br>执行权限：所有用户<br><strong>语法：which [命令名称]</strong><br><strong>功能描述：显示系统命令所在目录</strong><br>范例：$ which ls<br><strong>注意：只能查找命令文件</strong></p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>命令名称：find<br>命令所在路径：/usr/bin/find<br>执行权限：所有用户<br><strong>语法：find [搜索路径] [搜寻关键字]</strong><br><strong>功能描述：查找文件或目录</strong><br>范例：<br>$ find /etc -name init 不是模糊查询<br>在目录/etc中查找文件init<br>$find /etc –name <em>init<br>在目录etc中查询以init开头的文件<br>$find /etc –name *init</em><br>在目录etc中查询以包含init的文件<br>$find /etc –name init???<br>在目录etc中查询以init开头并且后面有三个字符的文件，？是单字符的匹配<br>$ find / -size +204800<br>在根目录下查找大于100MB的文件，size后面的数字的单位是数据块（512字节）</p><p>1M=102400k<br>1k=1024字节<br>0.5k=512<br>$ find / -user sam<br>在根目录下查找所有者为sam的文件</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>命令名称：grep<br>命令所在路径：/bin/grep<br>执行权限：所有用户<br><strong>语法：grep  [指定字串] [源文件]</strong><br><strong>功能描述：在文件中搜寻字串匹配的行并输出</strong><br>范例：# grep  ftp /etc/services</p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>命令名称：man<br>命令英文原意：manual<br>命令所在路径：/usr/bin/man<br>执行权限：所有用户<br><strong>语法：man [命令或配置文件]</strong><br><strong>功能描述：获得帮助信息</strong><br>范例：$ man ls<br>查看ls命令的帮助信息<br>$ man services<br>查看配置文件services的帮助信息</p><h2 id="解压压缩命令"><a href="#解压压缩命令" class="headerlink" title="解压压缩命令"></a>解压压缩命令</h2><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>命令名称：gzip<br>命令英文原意：GNU zip<br>命令所在路径：/bin/gzip<br>执行权限：所有用户<br><strong>语法：gzip 选项[文件]</strong><br><strong>功能描述：压缩文件</strong><br>压缩后文件格式：<strong>.gz</strong><br><strong>默认只能压缩文件，并且不保留原文件</strong></p><p>Linux压缩保留源文件的方法：<br>gzip –c filename &gt; filename.gz </p><h3 id="gunzip"><a href="#gunzip" class="headerlink" title="gunzip"></a>gunzip</h3><p>命令名称：gunzip<br>命令英文原意：GNU unzip<br>命令所在路径：/bin/gunzip<br>执行权限：所有用户<br><strong>语法：gunzip 选项[压缩文件]</strong><br><strong>功能描述：解压缩.gz的压缩文件</strong><br>范例：$ gunzip file1.gz</p><p>解压保留压缩包：gunzip -c 1.txt.gz &gt; 1.txt</p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>命令名称：tar<br>命令所在路径：/bin/tar<br>执行权限：所有用户<br><strong>语法：tar 选项[cvf] [目录]</strong><br>-c  产生.tar打包文件<br>-v  显示详细信息<br>-f  指定压缩后的文件名<br>-z  打包同时压缩<br><strong>功能描述：打包目录和文件</strong><br>压缩后文件格式：.tar.gz<br>范例：<br>$ tar -zcvf  dir1.tar.gz dir1<br>将目录dir1压缩成一个打包并压缩的文件</p><p>压缩</p><p>[root@linux ~]# tar -cvf /tmp/etc.tar /etc  仅打包，不压缩！<br>[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc  打包后，以 gzip 压缩</p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>命令名称：zip<br>命令所在路径：/usr/bin/zip<br>执行权限：所有用户<br>语法：<br><strong>zip 选项[-r] [压缩后文件名称] [文件或目录]</strong><br>-r  压缩目录<br><strong>功能描述：压缩文件或目录</strong><br>压缩后文件格式：<strong>.zip</strong><br><strong>可以压缩文件和目录，而且保留原文件</strong><br>范例：<br>$ zip services.zip  /etc/services<br>压缩文件<br>$ zip -r test.zip  /test<br>压缩目录</p><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>命令名称：unzip<br>命令所在路径：/usr/bin/unzip<br>执行权限：所有用户<br><strong>语法：unzip [压缩文件]</strong><br><strong>功能描述：解压.zip的压缩文件</strong><br>范例：$ unzip test.zip</p><h2 id="网络通信命令"><a href="#网络通信命令" class="headerlink" title="网络通信命令"></a>网络通信命令</h2><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>命令名称：ping<br>命令所在路径：/usr/sbin/ping<br>执行权限：root<br><strong>语法：ping 选项IP地址</strong><br><strong>功能描述：测试网络连通性</strong><br>范例：# ping 192.168.1.1</p><p><strong>查看防火墙状态：service iptables status</strong></p><p>关闭防火墙<br>（1）重启后永久性生效：<br>开启：chkconfig iptables on   关闭：chkconfig iptables off<br>（2） 即时生效，重启后失效：<br>        开启：service iptables start   关闭：service iptables stop<br>管理防火墙也可以使用图形界面<br>Setup</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>命令名称：ifconfig<br>命令所在路径：/usr/sbin/ifconfig<br>执行权限：所有用户<br><strong>语法：ifconfig 选项[-a] [网卡设备标识]</strong><br>-a  显示所有网卡信息<br><strong>功能描述：查看网络设置信息</strong><br>范例：# ifconfig  -a</p><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>命令名称：shutdown<br>命令所在路径：/usr/sbin/shutdown<br>执行权限：root<br><strong>语法：shutdown</strong><br><strong>功能描述：关机</strong><br>范例：# shutdown -h now</p><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><p>命令名称：reboot<br>命令所在路径：/usr/sbin/reboot<br>执行权限：root<br><strong>语法：reboot</strong><br><strong>功能描述：重启系统</strong><br>范例：# reboot</p><h2 id="shell应用技巧"><a href="#shell应用技巧" class="headerlink" title="shell应用技巧"></a>shell应用技巧</h2><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><blockquote><p>或&gt;&gt;  输出重定向<br><strong>将执行命令的结果输出到文件中</strong><br>范例：ls -l /tmp &gt; /tmp.msg<br><strong>将执行命令的结果追加到文件中</strong><br>date &gt;&gt; /tmp.msg</p></blockquote><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道：将一个命令的输出传送给另一个命令，<br>作为另一个命令的输入。<br>使用方法：<br>命令1|命令2|命令3……|命令n<br>范例：</p><ul><li>ls -l /etc | more</li><li>ls -l /etc | grep init</li><li>ls -l /etc | grep init | wc –l</li></ul><h3 id="命令替换符"><a href="#命令替换符" class="headerlink" title="命令替换符"></a>命令替换符</h3><p>命令替换：将一个命令的输出作为另一个<br>命令的参数。<br>格式为：命令1 <code>命令2</code><br>范例：<br>ls -l <code>which touch</code></p><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><p>Vim/Vi是一个功能强大的全屏幕文本编辑器，是Linux/UNIX上最常用的文本编辑器，它的作用是建立、编辑、显示文本文件。Vim/Vi 没有菜单，只有命令。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021012923194865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232000591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232015328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232029117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021012923204458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021012923205669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232108174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232119342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><h3 id="RPM包的管理"><a href="#RPM包的管理" class="headerlink" title="RPM包的管理"></a>RPM包的管理</h3><p>RPM软件包的一个例子<br>sudo-1.7.2p1-5.el5.i386.rpm<br>其中包括软件名(sudo)，版本号(1.7.2pl)，发行号<br>(5.el5)，和硬件平台(i386)。</p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p> #rpm -e sudo<br>注意：如果其它软件包有依赖关系，卸载时会<br>产生提示信息，可使用–nodeps强行卸载。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>#rpm -ivh sudo-1.7.2p1-5.el5.i386.rpm<br>挂载光盘：<br>mkdir /mnt/cdrom<br>mount /dev/cdrom /mnt/cdrom<br>查询：<br>rpm -q sudo   查询sudo软件包是否被安装<br>rpm -qa | grep samba        查询和Samba相关的软件包</p><p>其他安装选项：<br>–excludedocs<br>不安装软件包中的文档文件<br>–prefix PATH<br>将软件包安装到由PATH指定的路径下<br>–test<br>只对安装进行测试，并不实际安装</p><ul><li>软件包已被安装<br>rpm -ivh sudo-1.7.2p1-5.el5.i386.rpm<br>package sudo-1.7.2p1-5.el5.i386 is already installed<br>如果覆盖安装该软件包，可以在命令行上使用<br>–replacepkgs 选项。</li></ul><ul><li>未解决依赖关系<br>RPM软件包可能依赖于其它软件包，在安装了特<br>定的软件包之后才能安装该软件包。<br>rpm -ivh sudo-1.7.2p1-5.el5.i386.rpm<br>failed dependencies:<br>sudo is needed by bark-3.2-1l<br>你必须安装完所依赖的软件包，才能解决这个问<br>题，强制安装使用–nodeps 选项。</li></ul><h3 id="YUM包的管理"><a href="#YUM包的管理" class="headerlink" title="YUM包的管理"></a>YUM包的管理</h3><p>应用yum的好处</p><blockquote><p>自动解决软件包依赖关系<br>方便的软件包升级<br> 安装yum install<br> 检测升级yum check-update<br> 升级yum update<br> 软件包查询yum list<br>软件包信息yum info<br>卸载yum remove<br>帮助yum -help、man yum</p></blockquote><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>下载：<code>jdk-7u55-linux-i586.tar.gz</code><br>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar –zxvf jdk-7u55-linux-i586.tar.gz</span><br></pre></td></tr></table></figure><p>/usr/local/tools/jdk1.7.0_55<br>配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/softwire-package/jdk1.7.0_55</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure><h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><p>解压：<code>tar –zxvf apache-tomcat-7.0.42.tar.gz</code><br>    切换目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apache-tomcat-7.0.42/bin</span><br><span class="line">启动Tomcat：</span><br><span class="line">./startup.sh</span><br><span class="line">停止Tomcat：</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h3><p>安装redis步骤：</p><blockquote><p>先安装tcl wget <a href="http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz</a><br>//直接下载   tar xzvf tcl8.6.1-src.tar.gz  -C /usr/local/   cd<br>/usr/local/tcl8.6.1/unix/    ./configure   make   make install</p><p>再安装redis tar –zxvf redis-3.0.0.tar.gz cd redis-3.0.0 make make install</p><p>yum -y install gcc gcc-c++ autoconf automake</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Linux&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;linux的文件规则&quot;&gt;&lt;a href=&quot;#linux的文件规则&quot; class=&quot;headerlink&quot; title=&quot;linux的文件规则&quot;&gt;&lt;/a&gt;linux的文件规则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>企业信息系统实战</title>
    <link href="http://yoursite.com/2021/01/27/%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2021/01/27/%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/</id>
    <published>2021-01-27T08:11:12.329Z</published>
    <updated>2021-01-28T15:53:01.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="企业信息系统"><a href="#企业信息系统" class="headerlink" title="企业信息系统"></a>企业信息系统</h1><h2 id="第一章：需求"><a href="#第一章：需求" class="headerlink" title="第一章：需求"></a>第一章：需求</h2><h3 id="1-系统用户模块"><a href="#1-系统用户模块" class="headerlink" title="1. 系统用户模块"></a>1. 系统用户模块</h3><p>用户可以使用用户名和密码登录该系统。</p><p>系统登录页面需要对用户名和密码进行校验，用户名不能为空，密码非空，且长度在3-10位之间。</p><p>密码在数据库中存储的形式是以加密的方式存储的。加密算法采用的是MD5加密的方式。</p><p>如果系统用户登录失败时，给出系统提示。</p><p>用户点击退出管理按钮，跳转回用户的登录页面，完成用户退出的功能。</p><h3 id="2-员工管理模块"><a href="#2-员工管理模块" class="headerlink" title="2. 员工管理模块"></a>2. 员工管理模块</h3><p>员工查询功能，要求把所有的数据全部显示到页面上，并且提供分页。</p><p>员工的新增功能，需要对数据进行校验，保存成功后跳转到用户的列表页面。</p><p>修改员工，对数据进行校验，修改成功后跳转到用户的列表页面。</p><p>删除员工，对员工删除时需要先询问是否删除，用户点击确定才会删除，删除成功后跳转到用户列表页面。</p><h3 id="3-系统权限功能"><a href="#3-系统权限功能" class="headerlink" title="3. 系统权限功能"></a>3. 系统权限功能</h3><p>系统中的功能必须是在用户登录的情况下才能使用。如果没有登录，会跳转到登陆页面。</p><h2 id="第二章：数据库设计"><a href="#第二章：数据库设计" class="headerlink" title="第二章：数据库设计"></a>第二章：数据库设计</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h3><p>使用如下脚本语句创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> txweb;</span><br><span class="line"><span class="keyword">use</span> txweb;</span><br></pre></td></tr></table></figure><h3 id="2-用户表"><a href="#2-用户表" class="headerlink" title="2. 用户表"></a>2. 用户表</h3><p>用户表用来存储系统用户的数据，主要做用户登录的功能，表结构设计如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">30</span>),</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">nickname <span class="built_in">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'admin'</span>,<span class="string">'21232f297a57a5a743894a0e4a801fc3'</span>,<span class="string">'管理员'</span>);</span><br></pre></td></tr></table></figure><h3 id="3-员工表"><a href="#3-员工表" class="headerlink" title="3. 员工表"></a>3. 员工表</h3><p>员工表用来存储员工的数据，表结构设计如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_emp`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`ename`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sal`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`edate`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`districtid`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">20</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'美美'</span>, <span class="string">'20'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'1990-11-11'</span>, <span class="string">'2018-11-11'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'小凤'</span>, <span class="string">'25'</span>, <span class="string">'0'</span>, <span class="string">'8000'</span>, <span class="string">'1990-11-11'</span>, <span class="string">'2018-11-11'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'冠希'</span>, <span class="string">'35'</span>, <span class="string">'1'</span>, <span class="string">'12000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'熊大'</span>, <span class="string">'22'</span>, <span class="string">'1'</span>, <span class="string">'10000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'熊二'</span>, <span class="string">'111'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'5'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'光头强'</span>, <span class="string">'12'</span>, <span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'6'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'喜羊羊'</span>, <span class="string">'11'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'7'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'二狗'</span>, <span class="string">'20'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'2003-03-03'</span>, <span class="string">'2018-12-11'</span>, <span class="string">'8'</span>);</span><br></pre></td></tr></table></figure><h3 id="4-地区表"><a href="#4-地区表" class="headerlink" title="4. 地区表"></a>4. 地区表</h3><p>具体数据参见t_district.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_district`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父及地区关系'</span>,</span><br><span class="line">  <span class="string">`district`</span> <span class="built_in">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'地区名称'</span>,</span><br><span class="line">  <span class="string">`level`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'子属级别关系'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3432</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'全国地区表'</span>;</span><br></pre></td></tr></table></figure><h2 id="第三章：架构选择"><a href="#第三章：架构选择" class="headerlink" title="第三章：架构选择"></a>第三章：架构选择</h2><p>本项目采用MVC设计模式思想，使用<strong>JavaBean、Servlet和JSP做为MVC的组件进行开发</strong>。服务器端采用三层架构的方式，分成了<strong>表现层、业务层和持久层</strong>。<strong>表现层使用JSP和Servlet程序</strong>，与浏览器客户端进行数据的交互。<strong>业务层使用Service程序</strong>，进行业务逻辑处理和事务处理。<strong>持久层使用Dao程序</strong>，进行数据库的持久化操作。数据库使用MySQL数据库。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210128173646630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>系统前端使用HTML5、CSS和JQuery技术。页面数据校验使用JQuery框架的validate校验插件。</p><p>系统提示使用的是layer插件。</p><h2 id="第四章：搭建系统开发环境"><a href="#第四章：搭建系统开发环境" class="headerlink" title="第四章：搭建系统开发环境"></a>第四章：搭建系统开发环境</h2><h3 id="1-搭建系统开发环境"><a href="#1-搭建系统开发环境" class="headerlink" title="1. 搭建系统开发环境"></a>1. 搭建系统开发环境</h3><p>创建Javaweb项目，把所有的静态页面拷贝到项目中。</p><p>给工程引入开发的jar包。</p><p>把系统资源的所有文件拷贝到项目中。</p><h3 id="2-编写实体类"><a href="#2-编写实体类" class="headerlink" title="2. 编写实体类"></a>2. 编写实体类</h3><p>编写User实体类，表示系统用户实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Emp实体类，表示员工实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 员工名称</span></span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">// 入职日期</span></span><br><span class="line">    <span class="keyword">private</span> Date edate;</span><br><span class="line">    <span class="comment">// 地区ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer districtId;</span><br><span class="line">    <span class="comment">// 地区</span></span><br><span class="line">    <span class="keyword">private</span> District district;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer id, String ename, Integer age, Integer sex, Double sal, Date birthday, Date edate, Integer districtId, District district)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">        <span class="keyword">this</span>.edate = edate;</span><br><span class="line">        <span class="keyword">this</span>.districtId = districtId;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> District <span class="title">getDistrict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistrict</span><span class="params">(District district)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Integer sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> edate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEdate</span><span class="params">(Date edate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.edate = edate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDistrictId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> districtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistrictId</span><span class="params">(Integer districtId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.districtId = districtId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写District实体类，表示地区实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">District</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 地区ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 地区父ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="comment">// 地区名称</span></span><br><span class="line">    <span class="keyword">private</span> String district;</span><br><span class="line">    <span class="comment">// 地区级别</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDistrict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistrict</span><span class="params">(String district)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">District</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">District</span><span class="params">(Integer id, Integer pid, String district, Integer level)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写工具类"><a href="#3-编写工具类" class="headerlink" title="3. 编写工具类"></a>3. 编写工具类</h3><p>page</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 当前页</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> pageCode;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 总页数 = 总记录数/每页显示的记录的条数</span></span><br><span class="line">   <span class="comment">// private int totalPage;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 总记录数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> totalCount;</span><br><span class="line">   <span class="comment">// 每页显示的记录的条数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">   <span class="comment">// 每页显示的数据</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;T&gt; beanList;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pageCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageCode</span><span class="params">(<span class="keyword">int</span> pageCode)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.pageCode = pageCode;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取总页数totalPage也是属性</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 做计算，计算的结果直接返回给你</span></span><br><span class="line">      <span class="keyword">int</span> tp = totalCount / pageSize;</span><br><span class="line">      <span class="comment">// 说明整除，</span></span><br><span class="line">      <span class="keyword">if</span>(totalCount % pageSize == <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> tp;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> tp+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*public void setTotalPage(int totalPage) &#123;</span></span><br><span class="line"><span class="comment">      this.totalPage = totalPage;</span></span><br><span class="line"><span class="comment">   &#125;*/</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> totalCount;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pageSize;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getBeanList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> beanList;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanList</span><span class="params">(List&lt;T&gt; beanList)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.beanList = beanList;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MD5Utils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.json.JSONUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MD5加密的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用md5的算法进行加密</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">byte</span>[] secretBytes = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         secretBytes = MessageDigest.getInstance(<span class="string">"md5"</span>).digest(content.getBytes());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有md5这个算法！"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      String md5code = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, secretBytes).toString(<span class="number">16</span>);<span class="comment">// 16进制数字</span></span><br><span class="line">      <span class="comment">// 如果生成数字未满32位，需要前面补0</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span> - md5code.length(); i++) &#123;</span><br><span class="line">         md5code = <span class="string">"0"</span> + md5code;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> md5code;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JdbcUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类，使用连接池获取到连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接池对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource DATA_SOURCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 加载属性文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream inputStream = JdbcUtils.class.getResourceAsStream("/druid.properties");</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载属性文件</span></span><br><span class="line">            pro.load(inputStream);</span><br><span class="line">            <span class="comment">// 创建连接池对象</span></span><br><span class="line">            DATA_SOURCE = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从连接池中获取连接，返回。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DATA_SOURCE.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stmt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TxBeanUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.ConvertUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxBeanUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过BeanUtils类进行属性绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperties</span><span class="params">(Object object, Map&lt;String,String[]&gt; param)</span></span>&#123;</span><br><span class="line">        ConvertUtils.register(<span class="keyword">new</span> Converter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">convert</span><span class="params">(Class type, Object value)</span> </span>&#123;</span><br><span class="line">                SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> simpleDateFormat.parse(value.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(object,param);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五章：用户模块功能开发"><a href="#第五章：用户模块功能开发" class="headerlink" title="第五章：用户模块功能开发"></a>第五章：用户模块功能开发</h2><p>首先要设置，初始项目的首页为Login.jsp。通过web.xml进行设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置欢迎页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-用户登录功能代码实现"><a href="#1-用户登录功能代码实现" class="headerlink" title="1. 用户登录功能代码实现"></a>1. 用户登录功能代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">=====================用户登录的Servlet程序=========================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn_tx_servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.impl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.userService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userLoginServlet</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/27 17:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userLoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Servlet后是Service</span></span><br><span class="line">    <span class="comment">//注入 一个userService的对象</span></span><br><span class="line">    userService userService = <span class="keyword">new</span> userServiceImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 前台传递的用户名和密码参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//检验用户名和密码</span></span><br><span class="line">        User user = userService.getUser(username,password);</span><br><span class="line">        <span class="comment">//用户存在</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//把用户存入session</span></span><br><span class="line">            System.out.println(<span class="string">"登陆成功"</span>);</span><br><span class="line">            req.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">"pages/home.jsp"</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="comment">//用户不存在 表示用户名或密码错误 跳回登录页面 并且展示错误信息</span></span><br><span class="line">            req.setAttribute(<span class="string">"errorMsg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="comment">//转发回登录页面</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====================用户登录的Service程序 userServiceImpl=====================</span><br><span class="line"><span class="comment">//其通过实现接口userService方法   这个思想一定要有，不同的业务其实是根据参数的不同，写不同的类去实现接口方法。</span></span><br><span class="line"><span class="keyword">package</span> cn_tx_service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx.utils.MD5Utils;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.impl.userDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.userDao;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.userService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userServiceImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/27 19:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet后面是 Dao</span></span><br><span class="line">    userDao userDao = <span class="keyword">new</span> userDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把密码进行MD5加密</span></span><br><span class="line">        password = MD5Utils.encrypt(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(username,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====================用户登录的Dao程序 userDaoImpl=========================</span><br><span class="line"><span class="comment">//其通过实现接口userDao方法   这个思想一定要有，不同的业务其实是根据参数的不同，写不同的类去实现接口方法。</span></span><br><span class="line"><span class="keyword">package</span> cn_tx_service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx.utils.MD5Utils;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.impl.userDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.userDao;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.userService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userServiceImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/27 19:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet后面是 Dao</span></span><br><span class="line">    userDao userDao = <span class="keyword">new</span> userDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把密码进行MD5加密</span></span><br><span class="line">        password = MD5Utils.encrypt(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(username,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-用户退出功能代码实现"><a href="#2-用户退出功能代码实现" class="headerlink" title="2. 用户退出功能代码实现"></a>2. 用户退出功能代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn_tx_servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userExistServlet</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userExistServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 用户退出功能 删除session</span></span><br><span class="line">        req.getSession().invalidate();</span><br><span class="line">        <span class="comment">// 跳转回登录页面  清除了所有request中的内容</span></span><br><span class="line">        resp.sendRedirect(<span class="string">"login.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六章：员工模块功能开发"><a href="#第六章：员工模块功能开发" class="headerlink" title="第六章：员工模块功能开发"></a>第六章：员工模块功能开发</h2><h3 id="1-获取地区列表的功能"><a href="#1-获取地区列表的功能" class="headerlink" title="1. 获取地区列表的功能"></a>1. 获取地区列表的功能</h3><p>前台页面（用ajax实现）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loadDistrict();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadDistrict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url : <span class="string">"/districtListServlet"</span>,</span><br><span class="line">        type : <span class="string">"get"</span>,</span><br><span class="line">        dataType : <span class="string">"json"</span>,</span><br><span class="line">        success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dh = <span class="string">"&lt;option value=''&gt;---请选择---&lt;/option&gt;"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> selected = data[i].id==$&#123;district == <span class="literal">null</span> ? <span class="string">"''"</span> : district&#125;?<span class="string">"selected"</span>:<span class="string">""</span>;</span><br><span class="line">                dh += <span class="string">"&lt;option value='"</span>+data[i].id+<span class="string">"'"</span>+selected+<span class="string">"&gt;"</span>+data[i].district+<span class="string">"&lt;/option&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">"#district"</span>).html(dh);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>后台业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">=================servlet程序==============================</span><br><span class="line"><span class="keyword">package</span> cn_tx_servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx_service.districtService;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.impl.districtServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: districtListServlet</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">districtListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    districtService districtService = <span class="keyword">new</span> districtServiceImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        JSONArray jsonArray = districtService.listDistrict();</span><br><span class="line">        <span class="comment">//设置响应类型</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/json;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(jsonArray.toJSONString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=======================service程序 实现接口==============================</span><br><span class="line"><span class="keyword">package</span> cn_tx_service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.District;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.districtDao;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.impl.districtDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.districtService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: districtServiceImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">districtServiceImpl</span> <span class="keyword">implements</span> <span class="title">districtService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入districtDao</span></span><br><span class="line">    districtDao districtDao = <span class="keyword">new</span> districtDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONArray <span class="title">listDistrict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;District&gt; list = districtDao.listDistricts();</span><br><span class="line">        JSONArray jsonArray = (JSONArray) JSONArray.toJSON(list);</span><br><span class="line">        <span class="keyword">return</span> jsonArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=======================dao程序 实现接口===================================</span><br><span class="line"><span class="keyword">package</span> cn_tx_dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.District;</span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx.utils.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.districtDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: districtDaoImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">districtDaoImpl</span> <span class="keyword">implements</span> <span class="title">districtDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;District&gt; <span class="title">listDistricts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建一个集合</span></span><br><span class="line">        List&lt;District&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user =<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获取数据库连接</span></span><br><span class="line">        connection = JdbcUtils.getConnection();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        String sql =<span class="string">"select * FROM t_district where pid=1"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="comment">// 如果存在结果集，则拼装user对象</span></span><br><span class="line">                District district = <span class="keyword">new</span> District(resultSet.getInt(<span class="number">1</span>),resultSet.getInt(<span class="number">2</span>),resultSet.getString(<span class="number">3</span>),resultSet.getInt(<span class="number">4</span>));</span><br><span class="line">                list.add(district);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-员工分页查询的功能"><a href="#2-员工分页查询的功能" class="headerlink" title="2. 员工分页查询的功能"></a>2. 员工分页查询的功能</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210128231250858.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">=================servlet程序==============================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取浏览器传递的所有参数</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="comment">// 参数列表</span></span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        TxBeanUtils.copyProperties(params,parameterMap);</span><br><span class="line">        <span class="comment">// 调用service 获取分页对象</span></span><br><span class="line">        Page&lt;Emp&gt; page = empService.listEmps(params);</span><br><span class="line">        <span class="comment">// 向request作用域内存入数据  用于回显</span></span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>,page);</span><br><span class="line">        request.setAttribute(<span class="string">"district"</span>,params.get(<span class="string">"qdistrict"</span>));</span><br><span class="line">        request.setAttribute(<span class="string">"ename"</span>,params.get(<span class="string">"qename"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"pages/emplist.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">=======================service程序==============================</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageCode  当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize  每页显示的条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EmpDao empDao = <span class="keyword">new</span> EmpDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Emp&gt; <span class="title">listEmps</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取页码</span></span><br><span class="line">        Integer pageCode = Integer.parseInt(params.get(<span class="string">"pageCode"</span>).toString());</span><br><span class="line">        <span class="comment">// 获取分页大小</span></span><br><span class="line">        Integer pageSize = Integer.parseInt(params.get(<span class="string">"pageSize"</span>).toString());</span><br><span class="line">        <span class="comment">// 计算分页起始位置</span></span><br><span class="line">        Integer start = (pageCode -<span class="number">1</span>)*pageSize;</span><br><span class="line">        params.put(<span class="string">"start"</span>,start);</span><br><span class="line">        <span class="comment">// 获取所有符合条件的员工数量</span></span><br><span class="line">        Integer count  = empDao.countEmps(params);</span><br><span class="line">        <span class="comment">// 获取所有符合条件的员工列表</span></span><br><span class="line">        List&lt;Emp&gt; emps = empDao.listEmps(params);</span><br><span class="line">        <span class="comment">// 封装Page对象  分页工具类</span></span><br><span class="line">        Page&lt;Emp&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pageCode,count,pageSize,emps);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">=======================dao程序===================================</span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">listEmps</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 创建一个集合</span></span><br><span class="line">        List&lt;Emp&gt; list =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取数据库链接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// sql语句</span></span><br><span class="line">            String sql = <span class="string">"SELECT * FROM t_emp e LEFT JOIN t_district d ON e.districtid=d.id where 1=1 "</span>;</span><br><span class="line">            <span class="comment">// 判断前台是否传递qename</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qename"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qename"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.ename LIKE '%"</span>+params.get(<span class="string">"qename"</span>)+<span class="string">"%'"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断前台是否传递districtid</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qdistrict"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qdistrict"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.districtid = "</span> + params.get(<span class="string">"qdistrict"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sql += <span class="string">" limit "</span> + params.get(<span class="string">"start"</span>) + <span class="string">","</span> + params.get(<span class="string">"pageSize"</span>);</span><br><span class="line">            statement = conn.createStatement();</span><br><span class="line">            rs = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">               Emp emp = <span class="keyword">new</span> Emp(rs.getInt(<span class="number">1</span>),rs.getString(<span class="number">2</span>),rs.getInt(<span class="number">3</span>),</span><br><span class="line">                       rs.getInt(<span class="number">4</span>),rs.getDouble(<span class="number">5</span>),rs.getDate(<span class="number">6</span>),</span><br><span class="line">                       rs.getDate(<span class="number">7</span>),rs.getInt(<span class="number">8</span>));</span><br><span class="line">               District district = <span class="keyword">new</span> District(rs.getInt(<span class="number">9</span>),rs.getInt(<span class="number">10</span>),rs.getString(<span class="number">11</span>),rs.getInt(<span class="number">12</span>));</span><br><span class="line">               emp.setDistrict(district);</span><br><span class="line">               list.add(emp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(conn,statement,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">countEmps</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 创建一个结果</span></span><br><span class="line">        Integer count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取数据库链接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// sql语句</span></span><br><span class="line">            String sql = <span class="string">"SELECT count(1) FROM t_emp e where 1=1 "</span>;</span><br><span class="line">            <span class="comment">// 判断前台是否传递qename</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qename"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qename"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.ename LIKE '%"</span>+params.get(<span class="string">"qename"</span>)+<span class="string">"%'"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断前台是否传递districtid</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qdistrict"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qdistrict"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.districtid = "</span> + params.get(<span class="string">"qdistrict"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            statement = conn.createStatement();</span><br><span class="line">            rs = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(conn,statement,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-员工新增功能"><a href="#3-员工新增功能" class="headerlink" title="3. 员工新增功能"></a>3. 员工新增功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.tx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.impl.EmpServiceImpl;</span><br><span class="line"><span class="keyword">import</span> cn.tx.utils.TxBeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工添加或修改Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpAddServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有前台传来的参数</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">        <span class="comment">// 通过工具对emp进行赋值</span></span><br><span class="line">        TxBeanUtils.copyProperties(emp,map);</span><br><span class="line">        <span class="comment">// 调用service方法存储emp</span></span><br><span class="line">        empService.saveEmp(emp);</span><br><span class="line">        <span class="comment">// 跳转empListServlet以保证自动刷新列表</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/empListServlet"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        empDao.save(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"insert into t_emp values (null,?,?,?,?,?,?,?) "</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,emp.getEname());</span><br><span class="line">            ps.setInt(<span class="number">2</span>,emp.getAge());</span><br><span class="line">            ps.setInt(<span class="number">3</span>,emp.getSex());</span><br><span class="line">            ps.setDouble(<span class="number">4</span>,emp.getSal());</span><br><span class="line">            ps.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(emp.getBirthday().getTime()));</span><br><span class="line">            ps.setDate(<span class="number">6</span>, <span class="keyword">new</span> java.sql.Date(emp.getEdate().getTime()));</span><br><span class="line">            ps.setInt(<span class="number">7</span>,emp.getDistrictId());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-跳转到员工修改页面功能"><a href="#4-跳转到员工修改页面功能" class="headerlink" title="4. 跳转到员工修改页面功能"></a>4. 跳转到员工修改页面功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.tx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.impl.EmpServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转员工修改页面Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpUpdateuiServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取前台传递来的id</span></span><br><span class="line">        String sid = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">int</span> empId = Integer.parseInt(sid);</span><br><span class="line">        <span class="comment">// 通过该ID获取emp对象并展示</span></span><br><span class="line">        Emp emp = empService.getEmp(empId);</span><br><span class="line">        request.setAttribute(<span class="string">"emp"</span>,emp);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"pages/empupdate.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">getEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empDao.getEmp(empId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">  </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">getEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        Emp emp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select e.*,d.* from t_emp e LEFT JOIN t_district d on d.id=e.districtid where e.id=?"</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,empId);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                emp = <span class="keyword">new</span> Emp(rs.getInt(<span class="number">1</span>),rs.getString(<span class="number">2</span>),</span><br><span class="line">                        rs.getInt(<span class="number">3</span>),rs.getInt(<span class="number">4</span>),</span><br><span class="line">                        rs.getDouble(<span class="number">5</span>),rs.getDate(<span class="number">6</span>),</span><br><span class="line">                        rs.getDate(<span class="number">7</span>),rs.getInt(<span class="number">8</span>),</span><br><span class="line">                        <span class="keyword">new</span> District(rs.getInt(<span class="number">9</span>),rs.getInt(<span class="number">10</span>),rs.getString(<span class="number">11</span>),rs.getInt(<span class="number">12</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-修改员工功能"><a href="#5-修改员工功能" class="headerlink" title="5. 修改员工功能"></a>5. 修改员工功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line">同添加员工</span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveEmp</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        Integer empId = emp.getId();</span><br><span class="line">        <span class="comment">// 判断如果empId为空  则调用插入emp的方法 否则调用更新方法</span></span><br><span class="line">        <span class="keyword">if</span>(empId == <span class="keyword">null</span>)</span><br><span class="line">            empDao.save(emp);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            empDao.update(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"UPDATE t_emp SET ename=?,age=?,sex=?,sal=?,birthday=?,edate=?,districtid=? where id=?"</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,emp.getEname());</span><br><span class="line">            ps.setInt(<span class="number">2</span>,emp.getAge());</span><br><span class="line">            ps.setInt(<span class="number">3</span>,emp.getSex());</span><br><span class="line">            ps.setDouble(<span class="number">4</span>,emp.getSal());</span><br><span class="line">            ps.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(emp.getBirthday().getTime()));</span><br><span class="line">            ps.setDate(<span class="number">6</span>, <span class="keyword">new</span> java.sql.Date(emp.getEdate().getTime()));</span><br><span class="line">            ps.setInt(<span class="number">7</span>,emp.getDistrictId());</span><br><span class="line">            ps.setInt(<span class="number">8</span>,emp.getId());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-删除员工功能"><a href="#6-删除员工功能" class="headerlink" title="6. 删除员工功能"></a>6. 删除员工功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.tx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.impl.EmpServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工删除Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpDeleteServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取前台传递的id</span></span><br><span class="line">        String sid = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">int</span> empId = Integer.parseInt(sid);</span><br><span class="line">        <span class="comment">// 调用service方法删除emp</span></span><br><span class="line">        empService.deleteEmp(empId);</span><br><span class="line">        <span class="comment">// 跳转empListServlet进行列表自动刷新</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"empListServlet"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        empDao.deleteEmp(empId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">  </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Emp&gt; emps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select e.*,d.pid,d.district,d.level from t_emp e LEFT JOIN t_district d ON e.districtid = d.id WHERE  id = ?"</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,empId);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第七章：过滤器"><a href="#第七章：过滤器" class="headerlink" title="第七章：过滤器"></a>第七章：过滤器</h2><h3 id="1-检查用户权限的过滤器"><a href="#1-检查用户权限的过滤器" class="headerlink" title="1. 检查用户权限的过滤器"></a>1. 检查用户权限的过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证用户是否登陆的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求uri</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行静态资源</span></span><br><span class="line">        <span class="keyword">if</span>(uri.contains(<span class="string">"/css/"</span>) || uri.contains(<span class="string">"/js/"</span>) || uri.contains(<span class="string">"/images/"</span>))&#123;</span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行特殊请求 (登陆,退出,首页,登陆页面)</span></span><br><span class="line">        <span class="keyword">if</span>(uri.equals(<span class="string">"/userLoginServlet"</span>) || uri.equals(<span class="string">"/userExistServlet"</span>) || uri.equals(<span class="string">"/login.jsp"</span>)  || uri.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取session用户</span></span><br><span class="line">        User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">// 用户不为空 放行</span></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            request.setAttribute(<span class="string">"errorMsg"</span>,<span class="string">"您还没有登陆系统!!"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================配置文件信息================================</span><br><span class="line"></span><br><span class="line">    &lt;!--验证用户登陆的过滤器--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;LoginFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">tx</span>.<span class="title">filter</span>.<span class="title">LoginFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">LoginFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-解决乱码问题的过滤器"><a href="#2-解决乱码问题的过滤器" class="headerlink" title="2.解决乱码问题的过滤器"></a>2.解决乱码问题的过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拓薪教育：樱木老师</span></span><br><span class="line"><span class="comment"> * 腾讯课堂搜索：拓薪教育</span></span><br><span class="line"><span class="comment"> * 腾讯课堂直播间地址：https://ke.qq.com/course/149432</span></span><br><span class="line"><span class="comment"> * 加入QQ群领取免费资料和视频：QQ群号 344379612</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 解决post和get中文乱码问题的过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 拦截方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                   FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">      HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">      <span class="comment">// 对request包装增强</span></span><br><span class="line">      HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">      <span class="comment">// 放行</span></span><br><span class="line">      chain.doFilter(myrequest, response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义request对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">      <span class="keyword">this</span>.request = request;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 先获得请求方式</span></span><br><span class="line">      String method = request.getMethod();</span><br><span class="line">      <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</span><br><span class="line">         <span class="comment">// post请求</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理post乱码</span></span><br><span class="line">            request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</span><br><span class="line">         <span class="comment">// get请求</span></span><br><span class="line">         Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">         <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">            <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">               String[] values = parameterMap.get(parameterName);</span><br><span class="line">               <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 处理get乱码</span></span><br><span class="line">                        values[i] = <span class="keyword">new</span> String(values[i]</span><br><span class="line">                              .getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line">                     &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            hasEncode = <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">      String[] values = parameterMap.get(name);</span><br><span class="line">      <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">      Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">      String[] values = parameterMap.get(name);</span><br><span class="line">      <span class="keyword">return</span> values;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;企业信息系统&quot;&gt;&lt;a href=&quot;#企业信息系统&quot; class=&quot;headerlink&quot; title=&quot;企业信息系统&quot;&gt;&lt;/a&gt;企业信息系统&lt;/h1&gt;&lt;h2 id=&quot;第一章：需求&quot;&gt;&lt;a href=&quot;#第一章：需求&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2021/01/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/01/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-01-26T15:44:02.010Z</published>
    <updated>2021-01-26T15:44:09.197Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="正则表达式">TOC</a></p><h1 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h1><p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。<strong>正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。</strong><br>正则表达式类似于JSON,是一种通用的标准,被各种开发语言所支持,包括但不限于:Java,JavaScript,C,C++,C#,Python,SQL等等;<br>因为在<strong>Javaweb项目中正则一般用于前端验证</strong>,故此我们使用JavaScript来进行正则表达式的学习;</p><h1 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h1><p>第一种方式:    只有a匹配的上 其他不合法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^a$'</span>); <span class="comment">// 第一种方式</span></span><br></pre></td></tr></table></figure><p>第二种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a$/</span>; <span class="comment">// 第二种方式 在js中推荐使用</span></span><br></pre></td></tr></table></figure><h1 id="正则表达式的匹配规则"><a href="#正则表达式的匹配规则" class="headerlink" title="正则表达式的匹配规则"></a>正则表达式的匹配规则</h1><h2 id="字符类匹配"><a href="#字符类匹配" class="headerlink" title="字符类匹配"></a>字符类匹配</h2><ul><li><strong>[abc]</strong> a、b 或 c 任意一个字符</li><li><strong>[^abc]</strong> 任何字符，除了 a、b 或 c ,单个字符</li><li><strong>[a-zA-Z]</strong> a 到 z 或 A 到 Z，两头的字母包括在内 </li><li><strong>[0-9]</strong> 0-9之间的任意字符<h2 id="元字符匹配"><a href="#元字符匹配" class="headerlink" title="元字符匹配"></a>元字符匹配</h2></li><li><strong>.</strong>    匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.|\n)”的模式</li><li><strong>\w</strong>    匹配字母、数字、下划线。等价于<strong>‘[A-Za-z0-9_]’</strong></li><li><strong>\W</strong>    匹配非字母、数字、下划线。等价于 <strong>‘[^A-Za-z0-9_]’</strong></li><li><strong>\s</strong>    匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <strong>[ \f\n\r\t\v]</strong></li><li><strong>\S</strong>    匹配任何非空白字符。等价于 <strong>[^ \f\n\r\t\v]</strong></li><li><strong>\d</strong>    匹配一个数字字符。等价于 <strong>[0-9]</strong></li><li><strong>\D</strong>    匹配一个非数字字符。等价于 <strong>[^0-9]</strong></li><li><strong>\b</strong>    匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’</li><li><strong>^</strong>    匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置</li><li>$    匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置</li></ul><h2 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h2><ul><li><strong>X?</strong>     一次或一次也没有 </li><li><strong>X*</strong>    零次或多次 </li><li><strong>X+</strong>     一次或多次 </li><li><strong>X{n}</strong> 恰好 n 次 </li><li><strong>X{n,}</strong> 至少 n 次</li><li><strong>X{n,m}</strong> 至少 n 次，但是不超过 m 次<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2>如果你想查找元字符本身的话，比如你查找<code>.</code>,或者 <code>*</code>,就出现了问题：你没法指定它们，因为它们会被解释成其它的意思。这时你就必须使用<code>\</code>来取消这些字符的特殊意义。因此，你应该使用<code>\.</code>和<code>\*</code>。当然，要查找<code>\</code>本身，你也得用<code>\\</code>.<br>例如：<code>www\.txjava\.cn匹配www.txjava.cn，c:\\windows匹配c:\windows.</code></li></ul><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复一个字符串又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。<br><code>(\d{1,3}\.){3}\d{1,3}</code>是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d{1,3}</code>匹配1到3位的数字，<code>(\d{1,3}\.){3}</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字<code>(\d{1,3})</code>。<br>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址(IP地址中每个数字都不能大于255)。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：<br>iPv4的ip地址都是<code>（1~225）.（0~255）.（0~255）.（1~255）</code>的格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">22</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|[<span class="number">1</span><span class="number">-9</span>])\.(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|\d)\.(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|\d)\.(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|[<span class="number">1</span><span class="number">-9</span>])</span><br></pre></td></tr></table></figure><h1 id="常见的正则表达式"><a href="#常见的正则表达式" class="headerlink" title="常见的正则表达式"></a>常见的正则表达式</h1><h2 id="数字校验"><a href="#数字校验" class="headerlink" title="数字校验"></a>数字校验</h2><blockquote><p>1.数字：<code>^[0-9]*$</code><br>2.n位的数字：<code>^\d{n}$</code><br>3.至少n位的数字：<code>^\d{n,}$</code><br>4.m-n位的数字：<code>^\d{m,n}$</code><br>5.零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code><br>6.非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code><br>7.带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code><br>8.正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code><br>9.有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code><br>10.有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code><br>11.非零的正整数：<code>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$</code><br>12.非零的负整数：<code>^\-[1-9][0-9] *$ 或 ^-[1-9]\d*$</code><br>13.非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code><br>14.非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code><br>15.非负浮点数：<code>^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code><br>16.非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code><br>17.正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code><br>18.负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code><br>19.浮点数：<code>^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></p></blockquote><h2 id="字符校验"><a href="#字符校验" class="headerlink" title="字符校验"></a>字符校验</h2><blockquote><p>1.汉字：<code>^[\u4e00-\u9fa5]{0,}$</code><br>2.英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code><br>3.长度为3-20的所有字符：<code>^.{3,20}$</code><br>4.由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code><br>5.由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code><br>6.由26个小写英文字母组成的字符串：<code>^[a-z]+$</code><br>7.由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code><br>8.由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code><br>9.中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code><br>10.中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code><br>11.可以输入含有<code>^%&amp;&#39;,;=?$\&quot;</code>等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code><br>12.禁止输入含有<del>“”的字符：`[^</del>\x22]+`</p></blockquote><h2 id="特殊需求校验"><a href="#特殊需求校验" class="headerlink" title="特殊需求校验"></a>特殊需求校验</h2><blockquote><p> 1.Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code><br>2.InternetURL：<code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code><br>3.手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code><br>4.国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code><br>5.身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code><br>6.短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code><br>7.帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code><br>8.密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code><br>9.日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code><br>10.一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code><br>11.一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p></blockquote><h1 id="正则表达式的语法明细"><a href="#正则表达式的语法明细" class="headerlink" title="正则表达式的语法明细"></a>正则表达式的语法明细</h1><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td>将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，”n”匹配字符”n”。”\n”匹配换行符。序列”\\“匹配”\“，”\(“匹配”(“。</td></tr><tr><td>^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td></tr><tr><td>*</td><td>零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td></tr><tr><td>+</td><td>一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td></tr><tr><td>?</td><td>零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是非负整数。正好匹配 n 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td></tr><tr><td>{n,}</td><td>n 是非负整数。至少匹配 n 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td></tr><tr><td>{n,m}</td><td>m 和 n 是非负整数，其中 n &lt;= m。匹配至少 n 次，至多 m 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td></tr><tr><td>?</td><td>当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td></tr><tr><td><strong>.</strong></td><td>匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td></tr><tr><td>(pattern)</td><td>匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 `(</td></tr><tr><td>(?=pattern)</td><td>执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，`’Windows (?=95</td></tr><tr><td>(?!pattern)</td><td>执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95</td></tr><tr><td>`x</td><td>y`</td></tr><tr><td>[xyz]</td><td>字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td></tr><tr><td>[^xyz]</td><td>反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td></tr><tr><td>[^a-z]</td><td>反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td></tr><tr><td>\b</td><td>匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td></tr><tr><td>\B</td><td>非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;正则表达式&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;正则表达式概述&quot;&gt;&lt;a href=&quot;#正则表达式概述&quot; class=&quot;headerlink&quot; title=&quot;正则表达式概述&quot;&gt;&lt;/a&gt;正则表达式概述&lt;/h1&gt;&lt;p&gt;正则表达式，又称正规表示法、常规表示
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://yoursite.com/2021/01/16/AJAX/"/>
    <id>http://yoursite.com/2021/01/16/AJAX/</id>
    <published>2021-01-16T15:38:10.424Z</published>
    <updated>2021-01-16T15:38:14.137Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="AJAX">TOC</a></p><h1 id="AJAX概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h1><p>AJAX（异步JavaScript和XML），其实一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX可以使网页实现<strong>异步更新</strong>。这意味着可以再不重新加载整个网页的情况下，对网页的某部分进行更新。同步更新那就只等是，必须重载整个网页面。 说白了就是我可以实现，不重载整个网页面，局部异步获取数据刷新。比如：在登陆注册的时候，他会提示我们用户名是否被注册，这个信息的显示并没有刷新页面，因此其为异步更新，即AJAX。<br>没有Ajax的网页 实现<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116153029804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>有Ajax的网页<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116155622148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>AJAX最大特点：页面无刷新的请求，ajax默认是异步的，速度快，用户体验好。</p><h1 id="AJAX工作原理"><a href="#AJAX工作原理" class="headerlink" title="AJAX工作原理"></a>AJAX工作原理</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116160026549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="AJAX使用"><a href="#AJAX使用" class="headerlink" title="AJAX使用"></a>AJAX使用</h1><p>一般我们都采用jQuery作为ajax的主体语言。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引入jQuery文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>AJAX请求第一个例子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userId"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点一下试试"</span> <span class="attr">onclick</span>=<span class="string">"sendAJAX()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 发送ajax请求的方法</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sendAJAX</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取输入框内容</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> id = $(<span class="string">"#userId"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url : <span class="string">"ajax/getName?id="</span>+id,<span class="comment">// ajax请求的url地址</span></span></span><br><span class="line"><span class="actionscript">            type : <span class="string">"get"</span>,<span class="comment">// 提交的方法</span></span></span><br><span class="line">            /*data : &#123;</span><br><span class="line"><span class="actionscript">              name : <span class="string">"zhangsan"</span></span></span><br><span class="line">            &#125;,*/</span><br><span class="line"><span class="actionscript">            success : <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123; <span class="comment">// ajax请求回调后执行的方法,data表示从服务器返回的数据</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// alert(data);</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#msg"</span>).html(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码表示的意思为:<br>使用get方法向ajax/getName的URL提交id数据,并且在服务器返回后弹出服务器返回内容</p><h1 id="AJAX参数说明"><a href="#AJAX参数说明" class="headerlink" title="AJAX参数说明"></a>AJAX参数说明</h1><ul><li>url：要求为String类型的参数，（默认为当前页地址）发送请求的地址</li><li>type：要求为String类型的参数，请求方式（post或get）<strong>默认为get</strong>。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持</li><li>timeout：要求为Number类型的参数，<strong>设置请求超时时间</strong>（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置</li><li>async：要求为Boolean类型的参数，<strong>默认设置为true</strong>，所有请求均为<strong>异步请求</strong>。如果需要发送同步请求，请将此选项设置为false。注意，<strong>同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行</strong></li><li>cache：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</li><li>data：<strong>要求为Object或String类型的参数</strong>，<strong>发送到服务器的数据</strong>。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2</li><li>dataType：要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：</li></ul><blockquote><p>xml：返回XML文档，可用JQuery处理。 html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串</p></blockquote><ul><li>beforeSend：要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest)&#123;</span><br><span class="line">   this;   //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>complete：要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest, textStatus)&#123;</span><br><span class="line">   this;    //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。<pre><code>(1)由服务器返回，并根据dataType参数进行处理后的数据。(2)描述状态的字符串。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(data, textStatus)&#123;</span><br><span class="line">   //data可能是xmlDoc、jsonObj、html、text等等</span><br><span class="line">   this;  //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>error：要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest, textStatus, errorThrown)&#123;</span><br><span class="line">   //通常情况下textStatus和errorThrown只有其中一个包含信息</span><br><span class="line">   this;   //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>contentType：要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”,”json”。该默认值适合大多数应用场合。</li><li>dataFilter：要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(data, type)&#123;</span><br><span class="line">    //返回处理后的数据</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>global：要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，<strong>ajaxStart或ajaxStop可用于控制各种ajax事件</strong></li><li>ifModified：要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息</li><li>jsonp：要求为<strong>String类型</strong>的参数，<strong>在一个jsonp请求中重写回调函数的名字</strong>。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器</li><li>username：要求为String类型的参数，用于响应HTTP访问认证请求的用户名</li><li>password：要求为String类型的参数，用于响应HTTP访问认证请求的密码</li><li>processData：要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false</li><li>scriptCharset：要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用</li></ul><h1 id="AJAX实现用户名是否存在（假版本）"><a href="#AJAX实现用户名是否存在（假版本）" class="headerlink" title="AJAX实现用户名是否存在（假版本）"></a>AJAX实现用户名是否存在（假版本）</h1><p>html页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--onblur 对象失去焦点--&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">onblur</span>=<span class="string">"sendName()"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sendName</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val();</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url : <span class="string">"ajax/s2?username="</span>+username,</span></span><br><span class="line"><span class="actionscript">            type : <span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">            success : <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#msg"</span>).html(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取url传递过来的参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">"zhangsan"</span>))&#123;</span><br><span class="line">            result = <span class="string">"用户名已存在"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result = <span class="string">"用户名可用"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，看一下就懂。 可以尝试将数据写在域内读取，这个假的有点尴尬。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;AJAX&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;AJAX概述&quot;&gt;&lt;a href=&quot;#AJAX概述&quot; class=&quot;headerlink&quot; title=&quot;AJAX概述&quot;&gt;&lt;/a&gt;AJAX概述&lt;/h1&gt;&lt;p&gt;AJAX（异步JavaScript和XML），
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://yoursite.com/2021/01/16/JSON/"/>
    <id>http://yoursite.com/2021/01/16/JSON/</id>
    <published>2021-01-16T15:37:52.967Z</published>
    <updated>2021-01-16T15:38:00.149Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JSON">TOC</a></p><h1 id="JSON概述"><a href="#JSON概述" class="headerlink" title="JSON概述"></a>JSON概述</h1><h2 id="JSON是干嘛的？"><a href="#JSON是干嘛的？" class="headerlink" title="JSON是干嘛的？"></a>JSON是干嘛的？</h2><ul><li>JSON 指的为JavaScript 对象表示法，JavaScript Object Notation</li><li>JSON 是轻量级的<strong>文本数据交换格式</strong></li><li>JSON独立于语言，JSON使用Javascript语法来描述数据对象，但是JSON仍然独立于语言和平台。JSON解释器和JSON库支持许多不同的编程语言</li><li><strong>JSON具有自我描述性，更易理解</strong></li><li><strong>说白了其实 他就是个字符串，能够确切解析的特殊字符串</strong></li></ul><h2 id="JSON格式-两种形式"><a href="#JSON格式-两种形式" class="headerlink" title="JSON格式 两种形式"></a>JSON格式 两种形式</h2><h3 id="键值对集合"><a href="#键值对集合" class="headerlink" title="键值对集合"></a>键值对集合</h3><p>“名称/值”对的集合（A collection of name/value pairs）。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021011620042574.png#pic_center" alt="在这里插入图片描述"></p><p>对象是一个无序的“‘名称/值’对”集合。一个对象以“{”开始，“}”结束。每个“名称”后跟一个“:”,“‘名称/值’ 对”之间使用“,”分隔。<br>示例：<code>var json = {“name”:”Jack”,”age”:90,”Marray”:true};</code></p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116200948896.png#pic_center" alt="在这里插入图片描述"></p><p>数组是值（value）的有序集合。一个数组以“[”开始，“]”结束。值之间使用“,”分隔。<br>示例：<code>var json = [“Jack”,”Rose”,”Tom”,89,true,false];</code></p><h1 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h1><p>这只是JAVA实现的一种JSON包而已，还有其他的。JAVA本身是不能够解析JSON格式的，因此需要提前导入对应的JSON包。</p><h2 id="Java对象转JSON字符串-JSON对象"><a href="#Java对象转JSON字符串-JSON对象" class="headerlink" title="Java对象转JSON字符串/JSON对象"></a>Java对象转JSON字符串/JSON对象</h2><h3 id="JAVA中的Map格式"><a href="#JAVA中的Map格式" class="headerlink" title="JAVA中的Map格式"></a>JAVA中的Map格式</h3><ol><li>首先要将Map转化为<strong>JSONObject</strong>对象 <code>JSONObject jsonObject = (JSONObject) JSON.toJSON(map);</code> 注意<strong>需要强转</strong></li><li>可以通过<code>Object age = jsonObject.get(&quot;age&quot;);</code>通过键 获取对应的值</li><li>我们还可以网JSONObject中加入新的键值对 <code>jsonObject.put(&quot;hasSon&quot;,false);</code></li><li>`System.out.println(jsonObject.toJSONString());<pre><code>System.out.println(jsonObject);` 这两种其实是一样的，是方法的重写而已</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">map2JSON</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"Jack"</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>,<span class="number">90</span>);</span><br><span class="line">        map.put(<span class="string">"Marray"</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把一个JAVA对象转换成JSONObject</span></span><br><span class="line">        JSONObject jsonObject = (JSONObject) JSON.toJSON(map);</span><br><span class="line">        Object age = jsonObject.get(<span class="string">"age"</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        jsonObject.put(<span class="string">"hasSon"</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(jsonObject.toJSONString());</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JAVA中的List格式"><a href="#JAVA中的List格式" class="headerlink" title="JAVA中的List格式"></a>JAVA中的List格式</h3><p>List中存储的对象，这边是TxUser类。存储的是这个类的若干对象。</p><ol><li>/把集合转换成有序列表 使用的为<strong>JSONArray</strong>对象<pre><code>JSONArray jsonArray = (JSONArray) JSONArray.toJSON(list);  同样要注意**要强转**</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        List&lt;TxUser&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//        list.add("1");</span></span><br><span class="line"><span class="comment">//        list.add(2);</span></span><br><span class="line"><span class="comment">//        list.add(true);</span></span><br><span class="line"><span class="comment">//        list.add(8.8);</span></span><br><span class="line">        list.add(<span class="keyword">new</span> TxUser(<span class="string">"zhangsan"</span>,<span class="number">19</span>,<span class="number">1</span>,<span class="string">"北京海淀"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> TxUser(<span class="string">"liss"</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="string">"北京海淀"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把集合转换成有序列表</span></span><br><span class="line">        JSONArray jsonArray = (JSONArray) JSONArray.toJSON(list);</span><br><span class="line"><span class="comment">//        jsonArray.add("123456");</span></span><br><span class="line">        System.out.println(jsonArray);</span><br></pre></td></tr></table></figure><h3 id="JAVA中的JavaBean格式"><a href="#JAVA中的JavaBean格式" class="headerlink" title="JAVA中的JavaBean格式"></a>JAVA中的JavaBean格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bean2JSON</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">// 把JavaBean转换成JSONObject</span></span><br><span class="line">    JSONObject jsonObject = (JSONObject) JSON.toJSON(p);</span><br><span class="line">    System.out.println(jsonObject);</span><br><span class="line">    <span class="comment">//这种就是方法的重写</span></span><br><span class="line">    String jsonString = JSON.toJSONString(p);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON字符串-JSON对象转Java对象"><a href="#JSON字符串-JSON对象转Java对象" class="headerlink" title="JSON字符串/JSON对象转Java对象"></a>JSON字符串/JSON对象转Java对象</h2><h3 id="JAVA中的Map格式-1"><a href="#JAVA中的Map格式-1" class="headerlink" title="JAVA中的Map格式"></a>JAVA中的Map格式</h3><p>JSONObject 对象转换为 Map格式  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = JSON.parseObject(jsonString, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2Map</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"a"</span>,<span class="number">1</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"b"</span>,<span class="string">"bb"</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"c"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    JSONObject jsonObject = (JSONObject) JSON.toJSON(map);</span><br><span class="line">    Map&lt;String,Object&gt; map1 = JSON.parseObject(jsonString, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(map1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JAVA中的List格式-1"><a href="#JAVA中的List格式-1" class="headerlink" title="JAVA中的List格式"></a>JAVA中的List格式</h3><p>JSONArray 对象转换为 List格式  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = JSONArray.parseArray(jsonString, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    jsonArray.add(<span class="string">"a"</span>);</span><br><span class="line">    jsonArray.add(<span class="string">"b"</span>);</span><br><span class="line">    jsonArray.add(<span class="string">"c"</span>);</span><br><span class="line">    jsonArray.add(<span class="string">"d"</span>);</span><br><span class="line">    String jsonString = jsonArray.toJSONString();</span><br><span class="line">    List&lt;String&gt; list = JSONArray.parseArray(jsonString, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>JSONArray 对象转换为 List格式  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = JSONObject.parseObject(jsonString, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"id"</span>,<span class="number">1</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"birthday"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//变成字符串</span></span><br><span class="line">    String jsonString = jsonObject.toJSONString();</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">   </span><br><span class="line">    Person person = JSONObject.parseObject(jsonString, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2ListInMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个map对象,模拟前台请求返回的数据</span></span><br><span class="line">    Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">"status"</span>,<span class="string">"success"</span>);</span><br><span class="line">    result.put(<span class="string">"code"</span>,<span class="string">"200"</span>);</span><br><span class="line">    List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">"李四"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">"王五"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">4</span>,<span class="string">"赵六"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    result.put(<span class="string">"data"</span>,list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将map对象转换成JSON字符串</span></span><br><span class="line">    String jsonString = JSON.toJSONString(result);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对JSON字符串进行解析,获取Map对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接转换的话,data内的集合为JSONArray,集合内存储的为JSONObject</span></span><br><span class="line">    Map&lt;String,Object&gt; map = JSONObject.parseObject(jsonString, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把JSON字符串转换成JsonObject</span></span><br><span class="line">    JSONObject jsonObject = (JSONObject)JSONObject.parse(jsonString);</span><br><span class="line">    <span class="comment">// 获取JSONArray对象</span></span><br><span class="line">    JSONArray jsonArray = (JSONArray) jsonObject.get(<span class="string">"data"</span>);</span><br><span class="line">    <span class="comment">// 解析JSONArray对象获取Person集合</span></span><br><span class="line">    List&lt;Person&gt; array = JSONArray.parseArray(jsonArray.toJSONString(), Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 重新赋值到map</span></span><br><span class="line">    map.put(<span class="string">"data"</span>,array);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS操作JSON对象-熟悉"><a href="#JS操作JSON对象-熟悉" class="headerlink" title="JS操作JSON对象(熟悉)"></a>JS操作JSON对象(熟悉)</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line">    <span class="comment">// 创建一个数组并赋值</span></span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> Array();</span><br><span class="line">    list[<span class="number">0</span>] = <span class="string">"a"</span>;</span><br><span class="line">    list[<span class="number">1</span>] = <span class="string">"b"</span>;</span><br><span class="line">    list[<span class="number">2</span>] = <span class="string">"c"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个JSON对象并赋值</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">"id"</span>    :   <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>  :   <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"data"</span>  :   list,</span><br><span class="line">        <span class="string">"createDate"</span>    : <span class="keyword">new</span> Date()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台打印JSON对象</span></span><br><span class="line">    console.log(obj);</span><br><span class="line">    alert(obj.id);</span><br><span class="line">    alert(obj.name);</span><br><span class="line">    alert(obj.createDate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取JSON对象中的数组</span></span><br><span class="line">    <span class="keyword">var</span> data = obj.data;</span><br><span class="line">    alert(data);</span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">        alert(data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;JSON&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;JSON概述&quot;&gt;&lt;a href=&quot;#JSON概述&quot; class=&quot;headerlink&quot; title=&quot;JSON概述&quot;&gt;&lt;/a&gt;JSON概述&lt;/h1&gt;&lt;h2 id=&quot;JSON是干嘛的？&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>过滤器(Filter)与监听器(Listener)</title>
    <link href="http://yoursite.com/2021/01/15/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8(Listener)/"/>
    <id>http://yoursite.com/2021/01/15/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8(Listener)/</id>
    <published>2021-01-15T14:25:55.514Z</published>
    <updated>2021-01-15T14:26:02.792Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="过滤器与监听器">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>熟悉掌握过滤器的使用及生命周期</li><li>掌握过滤器的执行顺序和应用场景</li><li>了解监听器的概念及常用监听器</li><li>能够使用监听器完善在线人数统计的小例子</li></ul><h1 id="过滤器概述"><a href="#过滤器概述" class="headerlink" title="过滤器概述"></a>过滤器概述</h1><h2 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h2><blockquote><p>过滤器是JAVAWEB三大组件之一。<strong>用于拦截请求</strong>而不是处理请求，处理请求是Servlet做的。<br>当用户请求某个Servlet时，会先执行部署在这个请求上的Filter，若果Filter“放行”，那么会继续执行用户请求的Servlet；如果Filter不“放行”，那么就就此中断了。<br>话句话说，就是当用户请求某个Servlet时，TomCat会去执行注册在这个请求上的Filter，然后是否“放行”由Filter决定。可以理解为，<strong>Filter来决定是否调用Servlet</strong>。注意，<strong>当执行完成Servlet的代码后，还会继续执行Filter后面的代码</strong>。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114172023528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="构建过滤器步骤"><a href="#构建过滤器步骤" class="headerlink" title="构建过滤器步骤"></a>构建过滤器步骤</h2><p> 1.创建一个类，实现javax.servelt.Filter接口，并实现它的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过滤器被执行了 前"</span>);</span><br><span class="line">        <span class="comment">//表示对请求进行放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"过滤器被执行了 后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在web.xml中进行Filter配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    filter的声明</span></span><br><span class="line"><span class="comment">        指定filter的名称 filter-name</span></span><br><span class="line"><span class="comment">        指定filter的实现类 filter-class--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn_tx_Filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    filter的映射</span></span><br><span class="line"><span class="comment">        指定filter的名称</span></span><br><span class="line"><span class="comment">        要拦截的路径、用法和Servlet的url-pattern是一样的</span></span><br><span class="line"><span class="comment">        servlet-name 表示指向拦截的servlet 不建议这样使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url-pattern和Servlet的url-pattern的匹配规则一模一样</p><ul><li>完全路径匹配 以/开头 例如 /aaa /aaa/bbb</li><li>目录匹配 以/开头 例如 /aaa/* /*</li><li>扩展名匹配 <strong>不能以/开头</strong> 例如 <em>.do *.action ….<br>*</em>优先级： 完全路径匹配 &gt; 目录匹配 &gt; 扩展名匹配**</li></ul><p>当用户访问index.jsp页面时，会执行Filter中的<code>doFilter()</code>方法。而Filter必须要执行放行后，才能显示该页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示对请求进行放行</span></span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br></pre></td></tr></table></figure><h1 id="过滤器详解"><a href="#过滤器详解" class="headerlink" title="过滤器详解"></a>过滤器详解</h1><h2 id="过滤器的生命周期"><a href="#过滤器的生命周期" class="headerlink" title="过滤器的生命周期"></a>过滤器的生命周期</h2><ul><li><strong><code>init(FilterConfig)</code></strong>：从服务器启动时会<strong>创建Filter实例</strong>，并且<strong>每个类型的Filter只创建一个实例</strong>，从此不再创建。<strong>在创建完Filter实例后，会马上调用<code>init()</code>方法完成初始化工作</strong>，这个方法只会被<strong>执行一次</strong>。</li><li><strong><code>doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</code></strong>：会在用户每次访问“目标资源 web.xml下标签&lt; url-pattern &gt;对应的入口地址”时执行，如果需要“放行”，那么需要调用FilterChain的<strong><code>filterChain.doFilter(servletRequest,servletResponse)</code></strong>方法，如果不调用FilterChain的<code>doFilter()</code>方法，那么目标资源将无法被执行。</li><li><strong><code>destroy()</code></strong>：服务器会在创建Filter对象之后，把Filter对象放到缓存中一直使用，通常不会摧毁它。一般都是在TomCat服务器关了以后再销毁。<h2 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h2><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114172023528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果有两个过滤器（首先根据web.xml的定义配置前后顺序规定先后）</li><li>先执行Filter1的init()初始化，再执行Filter2()的初始化。</li><li>执行Filter1的doFilter()方法的前部分，读到开放通行，再执行Filter2的doFilter()方法的前部分</li><li>由于没有其他的过滤器了，继续执行Filter()的doFilter后部分</li><li>然后再回到Filter1的doFilter()的后部分<h2 id="过滤器应用场景（精通）"><a href="#过滤器应用场景（精通）" class="headerlink" title="过滤器应用场景（精通）"></a>过滤器应用场景（精通）</h2></li><li>执行目标资源之前做预处理工作，<strong>例如设置编码</strong>，这种试通常都会放行，只是在目标资源执行之前做一些准备工作；</li><li><strong>通过条件判断是否放行</strong>，例如校验当前用户是否已经登录，或者用户IP是否被禁用；</li><li>在目标资源执行后，做一些后续的特殊处理工作，例如把目标资源输出的数据进行处理；</li></ul><h2 id="过滤器设置目标资源（熟悉）"><a href="#过滤器设置目标资源（熟悉）" class="headerlink" title="过滤器设置目标资源（熟悉）"></a>过滤器设置目标资源（熟悉）</h2><p>在web.xml文件中部署Filter时，可以通过”*”来执行目标资源；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;FilterDemo3&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><p>这一特性与Servlet完全相同。因此，可以用来在用户访问敏感资源时，执行过滤器，例如：<code>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;</code>，可以把所有管理员才能访问的资源放到<code>/admin</code>路径下，这是可以通过过滤器来验证用户身份。<br>还可以为<code>&lt;filter-mapping&gt;</code>指定目标资源为某个Servlet，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;FilterServlet1&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn_tx_Servlet</span>.<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">FilterServlet1</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_Filter</span>.<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户访问<a href="http://localhost:8080/项目路径/FilterServlet1，这时会执行对应的过滤器。" target="_blank" rel="noopener">http://localhost:8080/项目路径/FilterServlet1，这时会执行对应的过滤器。</a></p><h2 id="过滤器总结"><a href="#过滤器总结" class="headerlink" title="过滤器总结"></a>过滤器总结</h2><p>Filter的三个方法</p><ul><li><code>void init(FilterConfig filterConfig)</code>：在Tomcat启动时被调用</li><li><code>void doFilter(ServletRequest servletRequest,ServletResponse servletResponse, FilterChain filterChain)</code>：每次有请求都会调用该方法</li><li><code>void destroy()</code> ：在Tomcat关闭时被调用</li></ul><p>FilterConfig类：与ServletConfig相似，用来获取Filter的初始化参数</p><ul><li><p><code>ServletContext getServletContext()</code>：获取ServletContext的方法</p></li><li><p><code>String getFilterName()</code>：获取Filter的配置名称</p></li><li><p><code>String getInitParameter(String name)</code>：获取Filter的初始化配置，与web-xml的&lt; init-param &gt;标签元素对应</p></li><li><p><code>Enumeration getInitParameterNames()</code>：获取所有参数化参数的名称</p><p>FilterChain类</p></li><li><p><code>void doFilter(servletRequest,servletResponse)</code>：表示放行，执行下一个过滤器或者执行目标资源。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    String charset = filterConfig.getInitParameter(<span class="string">"charset"</span>);</span><br><span class="line">    System.out.println(charset);</span><br><span class="line">    Enumeration&lt;String&gt; names = filterConfig.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">        String name = names.nextElement();</span><br><span class="line">        String value = filterConfig.getInitParameter(name);</span><br><span class="line">        System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//FilterChain.doFilter 表示是放行,在该方法前的代码，我们称之为前置拦截</span></span><br><span class="line">    <span class="comment">//后面的代码，称之为后置拦截</span></span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器设置参数实现中文无乱码"><a href="#过滤器设置参数实现中文无乱码" class="headerlink" title="过滤器设置参数实现中文无乱码"></a>过滤器设置参数实现中文无乱码</h2><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    实现 改正乱码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn_tx_Filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn_tx_Servlet.EncodingServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/EncodingServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EncodingFilter.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String encode;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        encode = filterConfig.getInitParameter(<span class="string">"encode"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletResponse.setContentType(<span class="string">"text/html;charset="</span>+encode);</span><br><span class="line">        servletResponse.setCharacterEncoding(encode);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EncodingServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"测试中文乱码问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器 Listener"></a>监听器 Listener</h1><p><strong>比如用来统计某个网页同时在线的人数</strong></p><h2 id="监听器概述"><a href="#监听器概述" class="headerlink" title="监听器概述"></a>监听器概述</h2><p>在JAVAWEB被监听的事件源为：ServletContext、HttpSession、ServletRequest，即三大域对象</p><ul><li>监听域对象“创建”与“销毁”的监听器</li><li>监听域对象“操作域属性”的监听器</li><li>监听HttpSession的监听器</li></ul><p>创建Listener的步骤</p><ol><li>创建类实现 ServletContextListener类</li><li>联想打出对应的成员方法</li><li>web.xml 中 设置Listener标签</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn_tx_Listener.MyServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h2><p>ServletContextListener：<strong>Tomcat启动和关闭时</strong>调用下面两个方法：</p><ul><li><code>public void contextInitialized(ServletContextEvent sce)</code> ：ServletContext对象被创建后调用；</li><li><code>public void contextDestroyed(ServletContextEvent sce)</code>：ServletContext对象被销毁前调用；</li></ul><h2 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h2><p>HttpSessionListener：<strong>开始会话和结束时</strong>调用下面两个方法：</p><ul><li><code>public void sessionCreated(HttpSessionEvent se)</code> ：ServletContext对象被创建后调用；</li><li><code>public void sessionDestroyed(HttpSessionEvent se)</code>：ServletContext对象被销毁前调用；<h2 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h2>ServletRequestListener：开始请求和结束请求时调用下面两个方法</li><li><code>public void requestInitialized(ServletRequestEvent sre)</code> ：ServletContext对象被创建后调用；</li><li><code>public void requestDestroyed(ServletRequestEvent sre)</code>：ServletContext对象被销毁前调用；</li></ul><h2 id="监听器练习-在线人数"><a href="#监听器练习-在线人数" class="headerlink" title="监听器练习(在线人数)"></a>监听器练习(在线人数)</h2><p>一个现实人数的 jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;一只柴犬的网页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.getSession().setAttribute(<span class="string">"user"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h1&gt;当前在线人数:$&#123;online&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;a href="loginout.jsp"&gt;退出登录&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实现退出用户的jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户退出界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实现监听人数的 监听。 其实际就是通过ServletContext存储当前的访问数量，因为其是贯彻服务器始终的。每当有session对象存储时，表示有个人进来的，session对象被撤销时，表示有个人出去了。因此选择监听HttpSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span>, <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取到ServletContext对象</span></span><br><span class="line">        ServletContext context = sce.getServletContext();</span><br><span class="line">        <span class="comment">//把当前在线人数 初始化到ServletContext对象内</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext对象中 获取当前在线人数</span></span><br><span class="line">        Integer count = (Integer) context.getAttribute(<span class="string">"online"</span>);</span><br><span class="line">        <span class="comment">//把count+1 添加回ServletContext对象</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,++count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext对象中 获取当前在线人数</span></span><br><span class="line">        Integer count = (Integer) context.getAttribute(<span class="string">"online"</span>);</span><br><span class="line">        <span class="comment">//把count-1 添加回ServletContext对象</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,--count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;过滤器与监听器&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;熟悉掌握过滤器的使用及生命周期&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
