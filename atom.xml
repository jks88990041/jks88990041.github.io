<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只柴犬</title>
  
  <subtitle>一只柴犬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-07T15:50:21.606Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凯凯超人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis进阶</title>
    <link href="http://yoursite.com/2021/02/07/MyBatis%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2021/02/07/MyBatis%E8%BF%9B%E9%98%B6/</id>
    <published>2021-02-07T15:50:14.268Z</published>
    <updated>2021-02-07T15:50:21.606Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="MyBatis进阶">TOC</a></p><h1 id="MyBatis的连接池"><a href="#MyBatis的连接池" class="headerlink" title="MyBatis的连接池"></a>MyBatis的连接池</h1><h2 id="连接池的概念"><a href="#连接池的概念" class="headerlink" title="连接池的概念"></a>连接池的概念</h2><ol><li><p>连接池是 存储连接的容器</p></li><li><p>连接池解决了什么问题？<br>如果没有连接池，那么每次执行SQL语句都会创建connection连接，会浪费时间。</p></li><li><p>提前创建一些连接，存储到连接池中，使用的时候从连接池中获取连接即可</p></li><li><p>常用的连接池</p><ol><li>C3PO连接池</li><li>DBCP连接池</li><li>Druid连接池</li><li>连接池有归还的操作，已经对close方法进行了加强，原本是销毁，现在是规划操作</li></ol></li></ol><h2 id="MyBatis连接池的分类"><a href="#MyBatis连接池的分类" class="headerlink" title="MyBatis连接池的分类"></a>MyBatis连接池的分类</h2><p>MyBatis内置了连接池技术，dataSource标签的type属性有3个取值                 </p><ol><li>POOLED  使用内置连接池（原理），对应类 PooledDataSource</li><li>UNPOOLED 不适用连接池，对应类 UnPooledDataSource</li><li>JNDI 使用JNDI方式使用连接池（非常麻烦）</li></ol><h2 id="MyBatis连接池的实现原理分析"><a href="#MyBatis连接池的实现原理分析" class="headerlink" title="MyBatis连接池的实现原理分析"></a>MyBatis连接池的实现原理分析</h2><ol><li>在解析SqlMapConfig主配置文件的时候，创建dataSource对象，存入到Environment对象中</li><li>当执行SQL语句时，准备从dataSource对象中获取链接</li><li>PooledDataSource源码中的2个方法用来获取连接和归还链接<ol><li>popConnection方法用来获取链接<ol><li>先判断空闲的连接池中是否存在连接，如果存在，则获取一个连接使用</li><li>查看活动状态的PooledConnection池activeConnections是否已满；如果没有满，则创建一个新的PooledConnection对象，然后放到activeConnections池中，然后返回此PooledConnection对象</li><li>看最先进入activeConnection池中的PooledConnection对象是否已经过期；如果已经过期，从activeConnections池中移除此对象，然后创建一个新的PooledConnection对象，添加到activeConnections中，然后将此对象返回。</li></ol></li></ol></li></ol><h1 id="MyBatis事务管理"><a href="#MyBatis事务管理" class="headerlink" title="MyBatis事务管理"></a>MyBatis事务管理</h1><p>就是上节课提到的，增删改需要提交事务才有效果。这个提交事务有自动和手动两种方式，推荐用手动提交的方式（就是我们之前写的）</p><h1 id="MyBatis映射文件SQL深入"><a href="#MyBatis映射文件SQL深入" class="headerlink" title="MyBatis映射文件SQL深入"></a>MyBatis映射文件SQL深入</h1><h2 id="动态SQL语句之if标签：实现按名称和性别来查找记录"><a href="#动态SQL语句之if标签：实现按名称和性别来查找记录" class="headerlink" title="动态SQL语句之if标签：实现按名称和性别来查找记录"></a>动态SQL语句之if标签：实现按名称和性别来查找记录</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210207161507486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实现上面就要实现动态的拼接SQL语句。注意：要固定1=1，以免出现裸and的情况</p><p><strong>实现按模糊名称和性别来查找记录</strong></p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//if拼接查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIf</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        <span class="keyword">if</span>拼接查询</span><br><span class="line">        拼接SQ;语句，判断属性的值是否为<span class="keyword">null</span>，使用<span class="keyword">if</span>标签</span><br><span class="line">        test=<span class="string">"ODNL表达式"</span>，判断条件，如果<span class="keyword">true</span>，则执行<span class="keyword">if</span>里面的sql，反之不执行</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByIf"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"username != null and username != ''"</span>&gt;</span><br><span class="line">            and username like #&#123;username&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"sex != null and sex != ''"</span>&gt;</span><br><span class="line">            and sex= #&#123;sex&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"%柴%"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByIf(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态SQL语句之where标签：用了这个就不用考虑1-1就这技巧"><a href="#动态SQL语句之where标签：用了这个就不用考虑1-1就这技巧" class="headerlink" title="动态SQL语句之where标签：用了这个就不用考虑1=1就这技巧"></a>动态SQL语句之where标签：用了这个就不用考虑1=1就这技巧</h2><p>where标签的目的就是为了去掉之前where 1=1 的拼接的；<br>where标签使用在if标签的外面</p><p><strong>实现按模糊名称和性别来查找记录</strong></p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//if拼接查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIf</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        <span class="keyword">if</span>拼接查询</span><br><span class="line">        拼接SQ;语句，判断属性的值是否为<span class="keyword">null</span>，使用<span class="keyword">if</span>标签</span><br><span class="line">        test=<span class="string">"ODNL表达式"</span>，判断条件，如果<span class="keyword">true</span>，则执行<span class="keyword">if</span>里面的sql，反之不执行</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByIf"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"username != null and username != ''"</span>&gt;</span><br><span class="line">                and username like #&#123;username&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"sex != null and sex != ''"</span>&gt;</span><br><span class="line">                and sex= #&#123;sex&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"%柴%"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByIf(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态SQL语句之foreach标签"><a href="#动态SQL语句之foreach标签" class="headerlink" title="动态SQL语句之foreach标签"></a>动态SQL语句之foreach标签</h2><p> 需求一：需求的SQL语句：<code>SELECT * FROM  user  WHERE id=1 OR id=2 OR id=3</code></p><p><strong>像这种条件一直循环的可以使用&lt; foreach &gt;标签</strong></p><ol><li>准备mysql数据库，创建表结构，添加几条记录</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。这边需要再创建一个存储list集合的集合ids</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储多个id值</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//foreach标签</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    foreach标签</span><br><span class="line">        collection=<span class="string">"要遍历集合"</span> open=<span class="string">"开始"</span> close=<span class="string">"结束"</span> separator=<span class="string">"切割符号"</span> item=<span class="string">"遍历后变量"</span> index=<span class="string">"下标值"</span></span><br><span class="line">--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByForeach"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;foreach collection=<span class="string">"ids"</span> open=<span class="string">"id ="</span>  separator=<span class="string">"or id="</span> item=<span class="string">"i"</span> &gt;</span><br><span class="line">                #&#123;i&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//创建list集合</span></span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//给ids属性</span></span><br><span class="line">        user.setIds(ids);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByForeach(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求二：需求的SQL语句：<code>SELECT * FROM USER WHERE id IN (1,2,3)</code></p><p><strong>像这种条件一直循环的可以使用&lt; foreach &gt;标签</strong></p><ol><li>准备mysql数据库，创建表结构，添加几条记录</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。这边需要再创建一个存储list集合的集合ids</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储多个id值</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//foreach标签</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    foreach标签</span><br><span class="line">        collection=<span class="string">"要遍历集合"</span> open=<span class="string">"开始"</span> close=<span class="string">"结束"</span> separator=<span class="string">"切割符号"</span> item=<span class="string">"遍历后变量"</span> index=<span class="string">"下标值"</span></span><br><span class="line">--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByForeach"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;foreach collection=<span class="string">"ids"</span> open=<span class="string">"id in ("</span>  close=<span class="string">")"</span> separator=<span class="string">","</span> item=<span class="string">"i"</span> &gt;</span><br><span class="line">                #&#123;i&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建User对象传入</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//创建list集合</span></span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//给ids属性</span></span><br><span class="line">        user.setIds(ids);</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByForeach(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取公共的SQL语句"><a href="#提取公共的SQL语句" class="headerlink" title="提取公共的SQL语句"></a>提取公共的SQL语句</h2><p>上面我们 映射配置文件 中SQL语句 <code>select * from user</code>  可以提取出来，然后引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"findAll"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByForeach"</span> <span class="attr">parameterType</span>=<span class="string">"jks_mybatis_domain.User"</span> <span class="attr">resultType</span>=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"findAll"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"id in ("</span>  <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">item</span>=<span class="string">"i"</span> &gt;</span></span><br><span class="line">            #&#123;i&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h2><ol><li>一对一 ： 完全可以设计成一张表结构，实际基本没有</li><li>一对多：比如一个用户对应一堆订单，每个订单都有用户ID这个外键</li><li>多对一：一堆订单对应一个用户</li><li>多对多：订单和商品，一个订单可以有多个商品，一个商品可以在多个订单中</li></ol><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ol><li>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。</li><li>编写映射配置文件（编写SQL语句）。<ol><li>创建两个Mapper接口文件 AccountMapper与UserMapper。</li><li>resources文件下的mappers文件中创建两个映射配置文件AccountMapper.xml与UserMapper.xml </li></ol></li><li>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件。并且记得引入上述两个映射配置文件</li><li>编写核心实现代码</li></ol><h2 id="实现内连接查询：查询User表与Account表匹配的-账户信息以及家庭住址"><a href="#实现内连接查询：查询User表与Account表匹配的-账户信息以及家庭住址" class="headerlink" title="实现内连接查询：查询User表与Account表匹配的 账户信息以及家庭住址"></a>实现内连接查询：查询User表与Account表匹配的 账户信息以及家庭住址</h2><ol><li><p>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装。<strong>考虑到封装的问题，我们要拿到User表里的信息，需要把user对象，加到Account实体类中作为属性。便于封装输出</strong></p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有的账号信息，内连接的查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span><br><span class="line">    &lt;!-- 内连接的查询   --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"accountMap"</span>&gt;</span><br><span class="line">        SELECT account.*,user.address from account,user</span><br><span class="line">WHERE account.uid=user.id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--配置resultMap标签，目的：进行数据封装--&gt;</span><br><span class="line">    &lt;!--    配置resultMap，用来进行数据封装 --&gt;</span><br><span class="line">    &lt;!--    id是resultMap唯一的名称，用于引用--&gt;</span><br><span class="line">    &lt;!--    type是进行封装数据的类型--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"accountMap"</span> type=<span class="string">"jks_mybatis_domain.Account"</span>&gt;</span><br><span class="line">        &lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span><br><span class="line">            column表示数据表中的字段名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"uid"</span> column=<span class="string">"uid"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"money"</span> column=<span class="string">"money"</span>/&gt;</span><br><span class="line">        &lt;!--property实体类中的属性，javaType实体类的类型--&gt;</span><br><span class="line">        &lt;association property=<span class="string">"user"</span> javaType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">            &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    AccountMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(AccountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试if标签查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;Account&gt; list = mapper.findAll();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Account account :list)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一对多查询：实现账户与用户全体信息视图输出"><a href="#一对多查询：实现账户与用户全体信息视图输出" class="headerlink" title="一对多查询：实现账户与用户全体信息视图输出"></a>一对多查询：实现账户与用户全体信息视图输出</h2><p>实现：<code>select user.*,account.* from account,user where user.id=account.uid</code><br>一对多查询的话，写在一处</p><ol><li>准备mysql数据库，创建表结构，添加几条记录。要添加外键！</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。<strong>考虑到封装的问题，我们要拿到Account表里的信息，User实体类需创建一个集合存储 这个用户的所有账户</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个用户拥有多个账号</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一对多查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span><br><span class="line">&lt;!--    一对多的查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAccount"</span> resultMap=<span class="string">"userMap2"</span>&gt;</span><br><span class="line">        select user.*,account.* from account,user where user.id=account.uid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;!--    配置resultMap 进行数据封装--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userMap2"</span> type=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        &lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span><br><span class="line">            column表示数据表中的字段名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>/&gt;</span><br><span class="line">        &lt;!--对账户信息进行数据的封装  这个看我们在User实体类中添加的 属性名以及类型--&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"accounts"</span> ofType=<span class="string">"jks_mybatis_domain.Account"</span>&gt;</span><br><span class="line">            &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">            &lt;result property=<span class="string">"uid"</span> column=<span class="string">"uid"</span>/&gt;</span><br><span class="line">            &lt;result property=<span class="string">"money"</span> column=<span class="string">"money"</span>/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    AccountMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(AccountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试一对多的查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findAccount();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210207234624733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>准备mysql数据库，创建表结构，添加几条记录。并需要建造一个中间的过渡表。要添加外键。</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装。<strong>考虑到封装的问题，需要在Role实体类中加入user的集合</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//角色与人员</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; users;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/720:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//多对多查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllDDD</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.AccountMapper"</span>&gt;</span><br><span class="line">    &lt;!--    多对多的查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAllDDD"</span> resultMap=<span class="string">"roleMap"</span>&gt;</span><br><span class="line">        select user.username,role.* from user,role,user_role where user.id=user_role.uid and role.id=user_role.rid</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--    配置resultMap 进行数据封装--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"roleMap"</span> type=<span class="string">"jks_mybatis_domain.Role"</span>&gt;</span><br><span class="line">        &lt;!--property 是JavaBean中的属性 就是数据表实体类中定义的属性</span><br><span class="line">            column表示数据表中的字段名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"rolename"</span> column=<span class="string">"rolename"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"roledesc"</span> column=<span class="string">"roledesc"</span>/&gt;</span><br><span class="line">        &lt;!--对账户信息进行数据的封装  这个看我们在User实体类中添加的 属性名以及类型--&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"users"</span> ofType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">            &lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    RoleMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(RoleMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试多对多</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindDDD</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//条件查询</span></span><br><span class="line">        List&lt;Role&gt; list = mapper.findAllDDD();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Role role :list)&#123;</span><br><span class="line">            System.out.println(role);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;MyBatis进阶&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;MyBatis的连接池&quot;&gt;&lt;a href=&quot;#MyBatis的连接池&quot; class=&quot;headerlink&quot; title=&quot;MyBatis的连接池&quot;&gt;&lt;/a&gt;MyBatis的连接池&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="http://yoursite.com/2021/02/06/MyBatis/"/>
    <id>http://yoursite.com/2021/02/06/MyBatis/</id>
    <published>2021-02-06T14:06:17.675Z</published>
    <updated>2021-02-06T14:06:25.234Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="MyBatis">TOC</a></p><h1 id="MyBatis框架的概述"><a href="#MyBatis框架的概述" class="headerlink" title="MyBatis框架的概述"></a>MyBatis框架的概述</h1><ol><li>MyBatis是一个基于Java的持久层框架，内部对JDBC做了封装。因此开发只需关注SQL语句部分，不用关注JDBC的代码。</li><li>MyBatis通过XML或者注解的方式将要执行的各种Statement对象配置起来，通过Java对象和statement中SQL的动态参数进行映射，并最终执行SQL语句。执行SQL后，最终将结果已Java对象返回</li><li>采用了ORM的思想。ORM一般指对象关系映射，用于实现面向对象编程语言里不同类型系统的数据之间的转换。</li></ol><h1 id="MyBatis使用"><a href="#MyBatis使用" class="headerlink" title="MyBatis使用"></a>MyBatis使用</h1><h2 id="案例一：入门程序"><a href="#案例一：入门程序" class="headerlink" title="案例一：入门程序"></a>案例一：入门程序</h2><p>需求：使用MyBatis从mysql数据库中查询数据<br>开发步骤</p><ol><li>准备mysql数据库，创建表结构，添加几条记录</li><li>创建Java工程，导入开发需要的jar包</li><li>编写实体类，和表结构对应，用来进行数据封装</li><li>编写映射配置文件（编写SQL语句）</li><li>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件</li><li>编写入门（MyBatis提供API）</li></ol><h3 id="MyBatis项目的创建"><a href="#MyBatis项目的创建" class="headerlink" title="MyBatis项目的创建"></a>MyBatis项目的创建</h3><ol><li>创建Maven的项目，普通java工程即可</li><li>引入坐标<pre><code>引入MyBatis的3.4.5的版本坐标引入MySQL驱动的jar包  引入Junit单元测试的jar包引入log4j的jar包 </code></pre>将log4j.properties 放在 main的resources文件下</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"> &lt;!--MyBatis--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;!--mysql驱动包--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;!--Junit单元测试--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">         &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;!--log4j日志--&gt;</span><br><span class="line">     &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在java文件下 创建一个domain包 编写数据表的实体类文件</li><li>下面要映射数据库文件。 首先编写UserMapper的接口和方法（就是以前的UserDao接口）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在resources目录下，创建mapper文件夹。编写UserMapper.xml的配置文件，导入约束文件。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    id属性 接口中方法的名称，为UserMapper接口中的方法名称。固定的</span><br><span class="line">    resultType属性 表明的是findAll方法返回值类型，全限定路径(包名+类名)</span><br><span class="line">    jks_mybatis_domain.User</span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from  user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>编写主配置文件（配置数据库连接相关的信息）在resources文件内 写入SqlMapConfig.xml </li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:sqlserver://localhost:3306/mybatisdemo"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>写一个测试类 正式开始。在test包内写 别再main包里，main包里就整体正式编译了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/514:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Test</span> 表示标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//调用SqlSession对象的方法 说白了就是根据这个配置xml</span></span><br><span class="line">        <span class="comment">// 通过名称空间，在找到id findAll 定位select标签中的sql语句</span></span><br><span class="line">        List&lt;User&gt; list =  session.selectList(<span class="string">"jks_mybatis_mapper.UserMapper.findAll"</span>);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user :list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 使用代理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//mapper指向的就是代理对象</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user :list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="实现条件查询：按照id查询唯一记录"><a href="#实现条件查询：按照id查询唯一记录" class="headerlink" title="实现条件查询：按照id查询唯一记录"></a>实现条件查询：按照id查询唯一记录</h2><p>项目与上述案例一致。</p></li><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过id主键查询一条数据 select * from user where id=?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">&lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">&lt;!--    #&#123;ODNL表达式&#125; 对象图导航语言，表达式语言。语法和EL表达式非常相似</span><br><span class="line">        EL表达式是只能在JSP页面中使用的，ODNL不仅可以在页面上使用，还可以在配置文件中使用--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"insert"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> &gt;</span><br><span class="line">        <span class="function">insert  into <span class="title">user</span><span class="params">(username,birthday,sex,address)</span> <span class="title">values</span><span class="params">(#&#123;XXX&#125;,#&#123;XXX&#125;,#&#123;XXX&#125;,#&#123;XXX&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//mapper指向的就是代理对象</span></span><br><span class="line">        User user = mapper.findUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="第一种方法-需要自己传入"><a href="#第一种方法-需要自己传入" class="headerlink" title="第一种方法 需要自己传入%"></a>第一种方法 需要自己传入%</h3><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    模糊查询，没有拼接% 调用方法的时候需要自己传入%--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUserByUsername"</span> parameterType=<span class="string">"java.lang.String"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where username like#&#123;username&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = mapper.findUserByUsername(<span class="string">"%柴%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user:list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种方法-不需要自己传入"><a href="#第二种方法-不需要自己传入" class="headerlink" title="第二种方法 不需要自己传入%"></a>第二种方法 不需要自己传入%</h3><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    模糊查询，没有拼接% 调用方法的时候需要自己传入%--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUserByUsername"</span> parameterType=<span class="string">"java.lang.String"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where username like <span class="string">'%$&#123;value&#125;'</span></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = mapper.findUserByUsername(<span class="string">"柴"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user:list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h3><ul><li>第一种采用的是预编译的方式，防止SQL注入问题；第二种是sql语句拼接的方式，不能防止SQL注入的问题</li><li>第二就是两个表达式的区别<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210206143227289.png#pic_center" alt="在这里插入图片描述"><h2 id="聚合函数查询-count、sum等"><a href="#聚合函数查询-count、sum等" class="headerlink" title="聚合函数查询 count、sum等"></a>聚合函数查询 count、sum等</h2></li></ul><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//count sum avg max min 聚合函数查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">findCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    集合函数查询--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findCount"</span> resultType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        <span class="function">select <span class="title">count</span><span class="params">(*)</span> from user</span></span><br><span class="line"><span class="function">    &lt;/select&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合函数查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = mapper.findCount();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增一条记录，并且可以在id自增的情况下，获取id号"><a href="#新增一条记录，并且可以在id自增的情况下，获取id号" class="headerlink" title="新增一条记录，并且可以在id自增的情况下，获取id号"></a>新增一条记录，并且可以在id自增的情况下，获取id号</h2><p>项目与上述案例一致。</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过id主键查询一条数据 select * from user where id=?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">&lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">&lt;!--    #&#123;ODNL表达式&#125; 对象图导航语言，表达式语言。语法和EL表达式非常相似</span><br><span class="line">        EL表达式是只能在JSP页面中使用的，ODNL不仅可以在页面上使用，还可以在配置文件中使用--&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;insert id=<span class="string">"insert"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span> &gt;</span><br><span class="line">            <span class="comment">/*查询id值 keyProperty为封装数据使用属性 order=“AFTER数据添加后进行操作 resultType=”返回值类型*/</span></span><br><span class="line">        &lt;selectKey keyProperty=<span class="string">"id"</span> order=<span class="string">"AFTER"</span> resultType=<span class="string">"java.lang.Integer"</span> &gt;</span><br><span class="line">            <span class="function">select <span class="title">last_insert_id</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">        insert  into <span class="title">user</span><span class="params">(username,birthday,sex,address)</span> <span class="title">values</span><span class="params">(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//加载主配置文件</span></span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">    SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"测试"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"北京"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存用户  调用接口 然后映射配置文件 sql语句 执行操作 返回结果（int类型）成功为1</span></span><br><span class="line">    <span class="keyword">int</span> result = mapper.insert(user);</span><br><span class="line">    <span class="comment">//记得要提交事务 不然数据库不会生效的 增删改需要 查不需要提交</span></span><br><span class="line">    session.commit();</span><br><span class="line">    <span class="comment">//打印主键的值</span></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    System.out.println(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新记录：限定id更改地址"><a href="#更新记录：限定id更改地址" class="headerlink" title="更新记录：限定id更改地址"></a>更新记录：限定id更改地址</h2><p>项目与上述案例一致。</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//修改记录，参数太长，我们可以把参数封装成类对象在引入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    修改--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;update id=<span class="string">"update"</span> parameterType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        update user set address=#&#123;address&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">7</span>);</span><br><span class="line">        user.setAddress(<span class="string">"柴犬的家乡"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//传递user给接口 返回结果 1为改变行数</span></span><br><span class="line">        <span class="keyword">int</span> result = mapper.update(user);</span><br><span class="line">        <span class="comment">//记得要提交事务 不然数据库不会生效的 增删改需要 查不需要提交</span></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定记录"><a href="#删除指定记录" class="headerlink" title="删除指定记录"></a>删除指定记录</h2><p>项目与上述案例一致。</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    删除--&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    parameterType  即方法参数的类型--&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"delete"</span> parameterType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用mapper写的delete接口 传入id参数</span></span><br><span class="line">        mapper.delete(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//记得要提交事务 不然数据库不会生效的 增删改需要 查不需要提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MyBatis参数详解"><a href="#MyBatis参数详解" class="headerlink" title="MyBatis参数详解"></a>MyBatis参数详解</h1><h2 id="方法参数的类型：parameterType"><a href="#方法参数的类型：parameterType" class="headerlink" title="方法参数的类型：parameterType"></a>方法参数的类型：parameterType</h2><ol><li><p>简单数据类型<br> 如：int、double、String类型<br> 需要写出其完整包路径：如java.lang.Integer<br> 当然其可以简写为：int integer 都可以，其实框架提供简写的方式。其自动帮你还原会完整路径了</p></li><li><p>POJO（JavaBean实体类）对象类型，默认是不能简写的。但可以通过配置来简化长度。<br>如：创建的数据表实体类User对象。写明他在java文件下的完整路径 如：jks_mybatis_domain.User</p></li><li><p>POJO包装对象类型<br> 包含更多的实体类。即一个大类包含其他的实体类。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Total</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自己的属性</span></span><br><span class="line">    <span class="keyword">private</span> String total;</span><br><span class="line">    <span class="comment">//user属性</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="comment">//role属性</span></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(String total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用封装类编写的话，例如我们查询所有User表的数据应该这么做：</p><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p></li><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写大实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试包装类查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByTotal</span><span class="params">(Total total)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--    包装类测试查询 找user表 要表明其user. --&gt;</span><br><span class="line">    &lt;!--    id属性 接口中方法的名称--&gt;</span><br><span class="line">    &lt;!--    resultType属性 方法返回值类型，全限定路径(包名+类名)--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByTotal"</span> parameterType=<span class="string">"jks_mybatis_domain.Total"</span> resultType=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">        select * from user where username = #&#123;user.username&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包装类的测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Total total = <span class="keyword">new</span> Total();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"柴犬"</span>);</span><br><span class="line">        total.setUser(user);</span><br><span class="line">        <span class="comment">//查询 调用所写接口</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findByTotal(total);</span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法返回值类型：resultType"><a href="#方法返回值类型：resultType" class="headerlink" title="方法返回值类型：resultType"></a>方法返回值类型：resultType</h2><ol><li><p>简单数据类型 同上<br> 如：int、double、String类型<br> 需要写出其完整包路径：如java.lang.Integer<br> 当然其可以简写为：int integer 都可以，其实框架提供简写的方式。其自动帮你还原会完整路径了</p></li><li><p>POJO（JavaBean实体类）对象类型，默认是不能简写的。但可以通过配置来简化长度。 同上<br>如：创建的数据表实体类User对象。写明他在java文件下的完整路径 如：jks_mybatis_domain.User</p></li><li><p>resultMap结果类型</p></li></ol><p>我们正常都是实体类与数据表由于字段值一致所以，不需要这个resultMap。但如果不一致，就需要了。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210206163509862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>resultMap可以指定POJO将查询结果映射为POJO，但需要POJO的属性名和sql查询的列名一致方可映射成功。如果sql查询字段名和POJO的属性名不一致，可以通过resultMap将字段名和属性名做一个对应关系。<br>resultMap实质上还需要将查询结果映射到POJO对象中<br>resultMap可以实现将查询结果映射为复杂类型的POJO，比如在查询结果映射对象中包括POJO和list实现一对一查询和一对多查询</p></blockquote><ol><li><p>准备mysql数据库，创建表结构，添加几条记录</p><ol start="2"><li><p>创建Java工程，导入开发需要的jar包</p></li><li><p>编写大实体类，和表结构对应，用来进行数据封装</p></li><li><p>编写映射配置文件（编写SQL语句）<br>用户映射接口（用于配置文件中的id）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: jks_mybatis_mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 凯凯超人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/2/513:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@content</span>:用户映射接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//演示resultMap配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射配置文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.prg/DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    namespace属性，名称空间</span><br><span class="line">    用来区分Mapper接口，推荐编写Mapper接口的全限定路径</span><br><span class="line">    jks_mybatis_mapper.UserMapper.findAll</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"jks_mybatis_mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUsers"</span> resultMap=<span class="string">"userMap"</span>&gt;</span><br><span class="line">        select  id as _id,username as _username,address as _address from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--    配置resultMap，用来进行数据封装 --&gt;</span><br><span class="line">    &lt;!--    id是resultMap唯一的名称，用于引用--&gt;</span><br><span class="line">    &lt;!--    type是进行封装数据的类型--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"userMap"</span> type=<span class="string">"jks_mybatis_domain.User"</span>&gt;</span><br><span class="line">    &lt;!--property 是JavaBean中的属性</span><br><span class="line">        column表示数据表中的字段名称</span><br><span class="line">    --&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"_id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"username"</span> column=<span class="string">"_username"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"address"</span> column=<span class="string">"_address"</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写主配置文件（配置数据库连接相关的信息），加载映射配置文件  <strong>无变化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境  --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置具体的环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型，使用本地事务的策略 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC" &gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 是否要使用连接池，内置的连接池 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span></span><br><span class="line">                          value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span></span><br><span class="line">                          value=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatisdemo?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"jksroot"</span> /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    引入映射的配置文件--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mappers/UserMapper.xml"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写最后实现方法。 推荐使用代理对象的方式</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    UserMapper mapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载主配置文件</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessonFactory对象</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工厂对象，获取到SqlSessonFactory对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取到代理对象，MyBatis框架生成代理对象</span></span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询 调用所写接口</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findUsers();</span><br><span class="line">        <span class="keyword">for</span>(User user1 :list)&#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主配置文件（配置数据库连接相关的信息）"><a href="#主配置文件（配置数据库连接相关的信息）" class="headerlink" title="主配置文件（配置数据库连接相关的信息）"></a>主配置文件（配置数据库连接相关的信息）</h1><h2 id="外部连接属性"><a href="#外部连接属性" class="headerlink" title="外部连接属性"></a>外部连接属性</h2><p>可以使用EL（${键}）表达式，将数据库连接相关信息，通过读取额外定义的配置文件。来获取，这样可以方便之后的修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--读取属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简化实体类的全路径"><a href="#简化实体类的全路径" class="headerlink" title="简化实体类的全路径"></a>简化实体类的全路径</h2><p>第一种可以，自定义简化名称。但要是简化个数太多，也很麻烦。在主配置文件中（注意配置的全在&lt; configuration &gt;内）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type="实体类的全路径"</span></span><br><span class="line"><span class="comment">         alias="起的别名"，不区分大小写</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"jks_mybatis_domain.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"jks_mybatis_domain.Role"</span> <span class="attr">alias</span>=<span class="string">"role"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种更为简单，直接引入一个包内所有的实体类。在主配置文件中（注意配置的全在&lt; configuration &gt;内）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置别名简单写法</span></span><br><span class="line"><span class="comment">            把该包下所有的实体类，都可以使用别名，别名就是类名（首字母大小写都可以）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"jks_mybatis_domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;MyBatis&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;MyBatis框架的概述&quot;&gt;&lt;a href=&quot;#MyBatis框架的概述&quot; class=&quot;headerlink&quot; title=&quot;MyBatis框架的概述&quot;&gt;&lt;/a&gt;MyBatis框架的概述&lt;/h1
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>框架基础</title>
    <link href="http://yoursite.com/2021/02/04/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/02/04/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/</id>
    <published>2021-02-04T13:31:44.804Z</published>
    <updated>2021-02-04T13:31:52.079Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="框架基础">TOC</a></p><h1 id="JAVA反射的概念"><a href="#JAVA反射的概念" class="headerlink" title="JAVA反射的概念"></a>JAVA反射的概念</h1><blockquote><p>JAVA反射机制是在<strong>运行状</strong>中，<br><strong>对于任意一个类，都能够知道这个类的所有属性和方法</strong>；<br><strong>对于任意一个对象，都能够调用它的任意一个方法和属性</strong>；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></blockquote><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><blockquote><p>我们知道类是具有相同属性或者行为的一类事物，那么<strong>类本身也可以再被抽象</strong>，因为<strong>类们也有共同的属性和行为（比如类都有属性，都有构造器，都有方法，都能调用方法），所以把类们又抽象成了一个类Class。</strong><br>众所周知Java有个Object 类，是所有Java 类的继承根源，其内声明了数个应该在所有Java类中被改写的方法：hashCode()、equals()、clone()、toString()、getClass()等。其中getClass()返回一个Class对象。<br>Class类十分特殊。它和一般类一样继承自Object，其实体用以表达Java程序运行时的classes和interfaces，也用来表达enum、array、primitive Java types（boolean, byte, char, short, int, long, float,double）以及关键词void。<br>当一个class被加载，或当加载器（classloader）的defineClass()被JVM调用，JVM 便自动产生一个Class 对象。</p></blockquote><p>Class中对应的层次还有以下类</p><ul><li>Field类：<strong>类属性</strong>的抽象 </li><li>Method类：<strong>类方法</strong>的抽象 </li><li>Constructor类:<strong>类构造器</strong>的抽象</li></ul><h3 id="Class类中要掌握的方法"><a href="#Class类中要掌握的方法" class="headerlink" title="Class类中要掌握的方法"></a>Class类中要掌握的方法</h3><p>获取类对象的方法有三种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式 通过Class.forName("类的全路径")</span></span><br><span class="line">Class&lt;?&gt; clazz1 = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line"><span class="comment">//第二种方式 通过调用该类的对象调用getClass()方法</span></span><br><span class="line">Class&lt;?&gt; clazz2 = object.getClass();</span><br><span class="line"><span class="comment">//第三种方式 通过类的名字打点class</span></span><br><span class="line">Class&lt;?&gt; clazz3 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><p>通过Class类获取属性、方法、构造器的方法为<br>获取类对象</p><ul><li>forName(String className)  <ul><li>static静态方法 </li><li>返回值为Class&lt;?&gt; </li><li>返回与带有给定字符串名的类或接口相关联的Class对象</li></ul></li></ul><p>获取类属性对象</p><ul><li><p>getDeclaredField(String name)  </p><ul><li>返回值为Field</li><li>返回一个Field对象，该对象反映此Class类对象 参数所对应的类属性对象<ul><li>getDeclaredFields() </li></ul></li><li>返回值为Field[]</li><li>返回一个Field对象的数组，该对象反映此Class类对象 所有的类属性对象</li></ul><p>获取类方法对象</p></li><li><p>getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes) …表示一个Class数组对象实例  可以这么表示 <code>new Class[]{} 大括号里是参数</code></p><ul><li>返回值为Method</li><li>返回一个Method对象，该对象反映此Class类对象 参数所对应的类方法对象<ul><li>getDeclaredMethods() </li></ul></li><li>返回值为Method[]</li><li>返回一个Method对象的数组，该对象反映此Class类对象 所有的类方法对象</li></ul></li></ul><p>获取类构造器对象</p><ul><li>getConstructor(Class&lt;?&gt;… parameterTypes) …表示一个Class数组对象实例  可以这么表示 <code>new Class[]{} 大括号里是参数</code><ul><li>返回值为Constructor&lt;?&gt;</li><li>返回一个Constructor对象，该对象反映此Class类对象 参数所对应的类公共构造方法对象<ul><li>getConstructors() </li></ul></li><li>返回值为Constructor&lt;?&gt;</li><li>返回一个Constructor对象的数组，该对象反映此Class类对象 所有的类公共构造方法对象<ul><li>newInstance() </li></ul></li><li>使用默认构造器创建此Class对象所表示类的一个新的实例 <h3 id="Method反射调用自身"><a href="#Method反射调用自身" class="headerlink" title="Method反射调用自身"></a>Method反射调用自身</h3></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object object,Object... args)</span><span class="comment">//对带有指定参数的指定对象调用 就是把后面的参数值放入第一个参数表示的构造的类实例对象中</span></span></span><br></pre></td></tr></table></figure><p>如果底层方法是实例方法，<strong>第一个参数就是该对象实例，第二个参数是方法的参数列表，invoke的返回值就是实例方法的返回值。</strong><br>如果底层方法是静态的，那么可以忽略指定的 object 参数。该参数可以为 null。<br>如果底层方法所需的形参数为 0，则所提供的 args 数组长度可以为 0 或 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//获得类的所有方法</span></span><br><span class="line">Method[] methods = class1.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line"> m.invoke(instance,<span class="keyword">new</span> Object[]&#123;<span class="string">"北京"</span>&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(<span class="string">"instance"</span>+instance);</span><br></pre></td></tr></table></figure><h3 id="Field类要掌握的方法"><a href="#Field类要掌握的方法" class="headerlink" title="Field类要掌握的方法"></a>Field类要掌握的方法</h3><ul><li>getType()<ul><li>返回类型为Class&lt;?&gt;</li><li>返回一个Class对象，它获取属性的具体类型     </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得方法所对应的属性</span></span><br><span class="line">Field field = class1.getDeclaredField(fieldName);</span><br><span class="line">System.out.println(<span class="string">"filed是"</span>+field);</span><br><span class="line"><span class="comment">//获取属性的具体类型，获得属性对应的类型</span></span><br><span class="line">Class&lt;?&gt; type = field.getType();</span><br></pre></td></tr></table></figure><ul><li>getName() <ul><li>返回类型String</li><li>返回此Field对象表示的字段的名称</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有方法</span></span><br><span class="line">Method[] methods = class1.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line">    <span class="comment">//获取所有方法的名字</span></span><br><span class="line">    String name = m.getName();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>set(Object object,Object value)<ul><li>返回类型void，没有返回值</li><li>返回此Field对象表示的字段设置为指定的新值</li></ul></li></ul><h3 id="Constructor类要掌握的方法"><a href="#Constructor类要掌握的方法" class="headerlink" title="Constructor类要掌握的方法"></a>Constructor类要掌握的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">(Object... initargs)</span> <span class="comment">//使用此Constructor对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例</span></span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Constructor&lt;?&gt; constructor1 = class1.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">String</span>.<span class="title">class</span>&#125;)</span>;</span><br><span class="line">Object instance1 = constructor1.newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"柴犬的家"</span>,<span class="number">1</span>,<span class="string">"柴犬"</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="案例：通过反射来拷贝对象"><a href="#案例：通过反射来拷贝对象" class="headerlink" title="案例：通过反射来拷贝对象"></a>案例：通过反射来拷贝对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setAddress(<span class="string">"长春"</span>);</span><br><span class="line">p.setName(<span class="string">"李四"</span>);</span><br><span class="line">p.setId(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Object object = copyObject(p);</span><br><span class="line">System.out.println(object);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">copyObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//获得传递过来的对象的属性和构造器</span></span><br><span class="line">Class&lt;? extends Object&gt; class1 = obj.getClass();</span><br><span class="line"><span class="comment">//获取该类对象的所有参数</span></span><br><span class="line">Field[] fields = class1.getDeclaredFields();</span><br><span class="line"><span class="comment">//获取该类的无参构造器</span></span><br><span class="line">Constructor&lt;? extends Object&gt; constructor = class1.getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line">Object instance = constructor.newInstance(<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line"><span class="keyword">for</span>(Field f :fields)&#123;</span><br><span class="line"><span class="comment">//获得属性的name</span></span><br><span class="line">String fname = f.getName();</span><br><span class="line"><span class="comment">//获得属性的类型</span></span><br><span class="line">Class&lt;?&gt; type = f.getType();</span><br><span class="line"><span class="comment">//获得属性对应的set方法</span></span><br><span class="line">String setMethodName = <span class="string">"set"</span>+fname.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase()+fname.substring(<span class="number">1</span>);</span><br><span class="line">String getMethodName = <span class="string">"get"</span>+fname.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase()+fname.substring(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//获得get方法</span></span><br><span class="line">Method gmethod = class1.getDeclaredMethod(getMethodName, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//调用get方法获得被拷贝的对象的一个属性值</span></span><br><span class="line">Object gresult = gmethod.invoke(obj, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//获得set方法</span></span><br><span class="line">Method smethod = class1.getDeclaredMethod(setMethodName, <span class="keyword">new</span> Class[]&#123;gmethod.getReturnType()&#125;);</span><br><span class="line">smethod.invoke(instance, <span class="keyword">new</span> Object[]&#123;gresult&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射方式访问私有方法"><a href="#反射方式访问私有方法" class="headerlink" title="反射方式访问私有方法"></a>反射方式访问私有方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;Hello&gt; hClass = Hello<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//获得sayHello方法</span></span><br><span class="line">Method method = hClass.getDeclaredMethod(<span class="string">"sayHello"</span>, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line"><span class="comment">//设置可访问私有方法</span></span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object result = method.invoke(hClass.newInstance(), <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射方式访问私有属性"><a href="#反射方式访问私有属性" class="headerlink" title="反射方式访问私有属性"></a>反射方式访问私有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;Hello&gt; hClass = Hello<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Field f = hClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">f.set(hClass.newInstance(), <span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h1><blockquote><p>代理模式的作用是：为其他对象提供一种以控制对方的访问。<br>在某种情况下，一个客户不想或者不能直接引用另一个对象可以在客户端和目标对象直接起到中介的作用。<br>代理的角色：<br><strong>第一种：抽象角色，声明真实对象和代理对象的共同接口。</strong><br>第二种：代理角色，代理对象角色内部含有对真实对象的引用，从而可以操纵真实的对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象，同时代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。<br><strong>第三种：真实角色，代理所代理的真实角色，是我们要引用的对象</strong></p></blockquote><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul><li>抽象角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HireHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hire</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HireHouseReal</span> <span class="keyword">implements</span> <span class="title">HireHouse</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hire</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"租房子"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HireHouseProxy</span> <span class="keyword">implements</span> <span class="title">HireHouse</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HireHouseReal hr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hire</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hr == <span class="keyword">null</span>)&#123;</span><br><span class="line">hr = <span class="keyword">new</span> HireHouseReal();</span><br><span class="line">System.out.println(<span class="string">"收租金和中介费和押金"</span>);</span><br><span class="line">hr.hire();</span><br><span class="line">System.out.println(<span class="string">"扣押金"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jdk动态代理"><a href="#Jdk动态代理" class="headerlink" title="Jdk动态代理"></a>Jdk动态代理</h2><p>jdk动态代理可以为所有带有接口实现类提供代理。动态代理开发步骤：</p><ol><li>创建一个实现接口InvocationHandler的类，它必须实现invoke方法</li><li>创建被代理的类和接口</li><li>通过Proxy.newProxyInstance来创建代理类</li><li>通过代理调用</li></ol><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">//接口方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterDemoImpl</span> <span class="keyword">implements</span> <span class="title">InterDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"doing"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyImpl</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被代理的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyImpl</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过反射方式来调用被代理的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object arg0, Method method, Object[] arg)</span><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"前置工作"</span>);</span><br><span class="line">Object result = method.invoke(obj, arg);</span><br><span class="line">System.out.println(<span class="string">"后置工作"</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建接口实现类</span></span><br><span class="line">InterDemoImpl idi = <span class="keyword">new</span> InterDemoImpl();</span><br><span class="line"><span class="comment">//创建代理的实现类</span></span><br><span class="line">DynamicProxyImpl dp = <span class="keyword">new</span> DynamicProxyImpl(idi);</span><br><span class="line"><span class="comment">//创建动态代理对象</span></span><br><span class="line">InterDemo id = (InterDemo) Proxy.newProxyInstance(idi.getClass().getClassLoader(), idi.getClass().getInterfaces(), dp);</span><br><span class="line">id.dosomething();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h1><blockquote><p>Annotation工作方式<br>从java1.5以后，jdk提供了注解开发，开发者可以自定义注解。Annotation并不影响代码的语义，但是它能够工作的方式被看做类似程序工具或者类库，它反过来对正在运行的程序语义有所影响，annotation可以从源文件、class文件、或者在运行时反射的多种方式被调用。</p></blockquote><h2 id="常见的标识性注解"><a href="#常见的标识性注解" class="headerlink" title="常见的标识性注解"></a>常见的标识性注解</h2><ul><li>Override：表示是重写的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Deprecated：过期的方法，不建议使用的<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210204160734280.png#pic_center" alt="在这里插入图片描述"><br>SuppressWarning消除警告：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getList</span><span class="params">()</span></span>&#123;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnn &#123;</span><br><span class="line"><span class="comment">//定义注解的属性，必须要加上()</span></span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义注解，当注解的属性名是value时，在对其赋值时可以不指定属性的名字，否则必须指定属性名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnn</span>(value = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><blockquote><p>注解@Retention可以用来修饰注解，是注解的注解，称为元注解。<br><strong>Retention注解有一个属性value，是RetentionPolicy类型的，Enum RetentionPolicy是一个枚举类型，</strong> 这个枚举决定了Retention注解应该如何去保持，也可理解为Rentention 搭配RententionPolicy使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RetentionPolicy有3个值：CLASS  RUNTIME   SOURCE</p><blockquote><p>1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；<br>2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；<br>3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；<br>这3个生命周期分别对应于：Java源文件(.java文件) —&gt; .class文件 —&gt; 内存中的字节码。<br><strong>要明确生命周期长度 SOURCE &lt; CLASS &lt; RUNTIME ，所以前者能作用的地方后者一定也能作用。</strong><br>一般如果需要在运行时去动态获取注解信息，那只能用 RUNTIME 注解，比如@Deprecated使用RUNTIME注解<br>如果要在编译时进行一些预处理操作，比如生成一些辅助代码（如 ButterKnife），就用 CLASS注解；<br>如果只是做一些检查性的操作，比如 @Override 和 @SuppressWarnings，使用SOURCE 注解。</p></blockquote><h3 id="Retention使用步骤"><a href="#Retention使用步骤" class="headerlink" title="@Retention使用步骤"></a>@Retention使用步骤</h3><p>创建自定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义注解的策略</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anndemo &#123;</span><br><span class="line"><span class="comment">//定义注解属性</span></span><br><span class="line">String [] value();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解在方法上必须通过反射的方式才能获得</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@Anndemo</span>(value=&#123;<span class="string">"test, test1"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"注解测试"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获得指定类的对象</span></span><br><span class="line">Class clazz = AnnTest1<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//获得指定类的方法</span></span><br><span class="line">Method method = clazz.getDeclaredMethod(<span class="string">"save"</span>, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line"><span class="comment">//判断某个类上是否存在指定的注解</span></span><br><span class="line"><span class="keyword">if</span>(method.isAnnotationPresent(Anndemo<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line"><span class="comment">//获得指定的注解</span></span><br><span class="line">Anndemo annotation = method.getAnnotation(Anndemo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//获得指定注解的内容</span></span><br><span class="line">String[] values = annotation.value();</span><br><span class="line"><span class="keyword">for</span>(String val : values)&#123;</span><br><span class="line">System.out.println(val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得指定方法上的所有注解</span></span><br><span class="line">Annotation[] declaredAnnotations = method.getDeclaredAnnotations();</span><br><span class="line"><span class="keyword">for</span>(Annotation ann : declaredAnnotations)&#123;</span><br><span class="line">System.out.println(ann.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><p>主要标注在注解上，表示被标注的注解可以标注在哪些域上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anndemo &#123;</span><br><span class="line"><span class="comment">//定义注解属性</span></span><br><span class="line">String [] value();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@target注解源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> @Target用来表示注解作用范围，超过这个作用范围，编译的时候就会报错。<br> java.lang.annotation.ElementType<br> Target通过ElementType来指定注解可使用范围的枚举集合，枚举集合如下：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210204212801165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;框架基础&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;JAVA反射的概念&quot;&gt;&lt;a href=&quot;#JAVA反射的概念&quot; class=&quot;headerlink&quot; title=&quot;JAVA反射的概念&quot;&gt;&lt;/a&gt;JAVA反射的概念&lt;/h1&gt;&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="http://yoursite.com/2021/02/03/Maven/"/>
    <id>http://yoursite.com/2021/02/03/Maven/</id>
    <published>2021-02-03T15:54:20.839Z</published>
    <updated>2021-02-03T15:54:24.644Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Maven">TOC</a></p><h1 id="Maven的概念"><a href="#Maven的概念" class="headerlink" title="Maven的概念"></a>Maven的概念</h1><h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><ul><li>Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。</li><li>理想的项目构建：高度自动化，跨平台，可重用的组件，标准化的</li><li>对于包依赖管理：自动下载，统一依赖管理</li><li>项目信息：项目名称描述等，开发人员信息，开发者信息等</li></ul><h2 id="项目构建的步骤"><a href="#项目构建的步骤" class="headerlink" title="项目构建的步骤"></a>项目构建的步骤</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201155940982.png#pic_center" alt="在这里插入图片描述"></p><h2 id="Maven的应用场景"><a href="#Maven的应用场景" class="headerlink" title="Maven的应用场景"></a>Maven的应用场景</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021020116002912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Maven模型"><a href="#Maven模型" class="headerlink" title="Maven模型"></a>Maven模型</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201163911794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>右边的三个仓库分别为  Maven官网中心仓库、私服仓库以及本地库 。 中间橙色的表示会自动下载一些插件jar包</p><h2 id="为什么使用Maven"><a href="#为什么使用Maven" class="headerlink" title="为什么使用Maven"></a>为什么使用Maven</h2><p>IDE？Eclipse？IDEA？</p><ul><li>手工操作较多，编译、测试、部署等工作都是独立的，很难一步完成</li><li><strong>每个人的IDE配置都不同，很容易出现本地代码换个地方编译就出错的情况</strong><br>Maven？</li><li>拥有约定，知道你的代码在哪里，放到哪里去</li><li>拥有一个生命周期，例如执行 mvn install 就可以自动执行编译，测试，打包等构建过程</li><li>只需要定义一个pom.xml,然后把源码放到默认的目录，Maven帮你处理其他事情<br>安装git</li><li>拥有依赖管理，仓库管理<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2></li><li>对第三方依赖包的管理<ul><li>可以连接互联网下载项目所需第三方jar包<ul><li>对自己开发的模块的管理</li><li>可以像引用第三方依赖包一样引用自己项目的依赖包</li></ul></li></ul></li></ul><h1 id="Maven操作"><a href="#Maven操作" class="headerlink" title="Maven操作"></a>Maven操作</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><blockquote><p>安装jdk1.8或以上版本<br>下载Maven 地址：<a href="http://maven.apache.org/download.html" target="_blank" rel="noopener">http://maven.apache.org/download.html</a><br>解压到相应目录即可(无中文路径)</p></blockquote><h2 id="Maven安装目录分析"><a href="#Maven安装目录分析" class="headerlink" title="Maven安装目录分析"></a>Maven安装目录分析</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201165642175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>bin：含有mvn运行的脚本</li><li>boot：含有plexus-classworlds类加载器框架</li><li>conf：含有settings.xml配置文件</li><li>lib：含有Maven运行时所需要的java类库</li><li>LICENSE.txt, NOTICE.txt, README.txt针对Maven版本，第三方软件等简要介绍</li></ul><h2 id="Maven的环境变量"><a href="#Maven的环境变量" class="headerlink" title="Maven的环境变量"></a>Maven的环境变量</h2><ul><li><p>设置MAVEN_HOME环境变量</p><ul><li>升级时只需要下载最新版本，解压缩重新设置MAVEN_HOME环境变量即可<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170048235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170310743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul></li><li><p>设置MAVEN_OPTS环境变量(可省略)</p><ul><li>-Xms128m -Xmx512m<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170511957.png#pic_center" alt="在这里插入图片描述"></li></ul></li><li><p>查看CMD 输入<code>mvn -version</code> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201170724563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Maven-Demo"><a href="#Maven-Demo" class="headerlink" title="Maven Demo"></a>Maven Demo</h2><h3 id="Maven项目目录"><a href="#Maven项目目录" class="headerlink" title="Maven项目目录"></a>Maven项目目录</h3></li><li><p>src/main/java —— 存放项目的.java文件</p></li><li><p>src/main/resources —— 存放项目资源文件，如spring, hibernate配置文件 </p></li><li><p>src/test/java —— 存放所有测试.java文件，如JUnit测试类 </p></li><li><p>src/test/resources —— 测试资源文件 </p></li><li><p>target —— 项目输出位置 </p></li><li><p>pom.xml </p></li></ul><h3 id="项目操作"><a href="#项目操作" class="headerlink" title="项目操作"></a>项目操作</h3><p>打开cmd命令行，进入项目根目录</p><blockquote><p>mvn compile ： 编译<br>mvn test ： 运行测试<br>mvn package ：打包<br>mvn clean ： 清除编译后的项目文件<br>mvn install ： 本地安装,到本地库</p></blockquote><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>如果这个项目需要依赖其他项目的话,依赖的那个项目首先要在本地库里。否则这个项目没法编译。</p><h2 id="Maven仓库配置"><a href="#Maven仓库配置" class="headerlink" title="Maven仓库配置"></a>Maven仓库配置</h2><h3 id="Maven仓库概念"><a href="#Maven仓库概念" class="headerlink" title="Maven仓库概念"></a>Maven仓库概念</h3><blockquote><p>用来<strong>统一存储所有Maven共享构建</strong>的位置就是仓库<br>根据Maven坐标定义每个构建在仓库中唯一存储路径</p></blockquote><p>仓库的分类</p><ul><li>本地仓库 <ul><li><code>•~/.m2/repository/ 可修改</code></li><li>•每个用户只有一个本地仓库<ul><li>远程仓库</li><li>中央仓库：Maven默认的远程仓库<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a></li><li>私服：是一种特殊的远程仓库，它是架设在局域网内的仓库<h3 id="Maven本地仓库配置"><a href="#Maven本地仓库配置" class="headerlink" title="Maven本地仓库配置"></a>Maven本地仓库配置</h3>全局本地仓库(所有操作系统用户均影响)<br>%MAVEN_HOME%\conf\settings.xml文件,修改该文件会影响所有使用该Maven的用户的本地仓库,例如:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201211656290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将框内的注释取消，内容改成我们需要存放的库位置<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201211845385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="IDEA整合Maven项目"><a href="#IDEA整合Maven项目" class="headerlink" title="IDEA整合Maven项目"></a>IDEA整合Maven项目</h2><h3 id="IDEA的Maven全局配置"><a href="#IDEA的Maven全局配置" class="headerlink" title="IDEA的Maven全局配置"></a>IDEA的Maven全局配置</h3>配置之前，我们需要先将Settings中访问的库改为阿里云镜像 这样更快。</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动IDEA后找到Settings<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201214313363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201215128721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>以上设置完成表示在本idea上,所有项目如未对Maven的配置进行单独配置,则默认均使用该Maven版本和本地库设置;</p><h3 id="IDEA创建Maven的Java项目"><a href="#IDEA创建Maven的Java项目" class="headerlink" title="IDEA创建Maven的Java项目"></a>IDEA创建Maven的Java项目</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201215328290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例如我们引入Maven官网库的一个jar包 例如fastjson包<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201220532425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载 下载量最多的那个包 <strong>点左边的数字</strong>不是点central<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201220637477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201220944683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>复制Maven中的代码到 IDEA项目中<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201234946106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果出现标红，我们尝试右上角的如图所示 刷新一下maven<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201235016212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="IDEA创建Maven的Java-web项目"><a href="#IDEA创建Maven的Java-web项目" class="headerlink" title="IDEA创建Maven的Java web项目"></a>IDEA创建Maven的Java web项目</h3><ol><li><p>勾选后，选择下面的webapp项点击下一步<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202131700253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>备注好项目名字等信息<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202132355892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>查看与自己的Maven库地址，以及下载存入本地库地址是否正确<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202132527185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>web项目则创建成功,接下来需要进行一些配置来确定web项目可以正常运行（仅仅是检查查看，可以忽略的）<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202140912849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202140928213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加war包的方法:<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141001234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021020214101517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>配置Tomcat服务器 与以前的操作一致<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141102705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021020214111712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141134293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141148321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141211448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141241819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>至此,在IDEA上使用Maven配置的Java web工程已经完成配置</p></li></ol><h2 id="IDEA导入既有Maven项目"><a href="#IDEA导入既有Maven项目" class="headerlink" title="IDEA导入既有Maven项目"></a>IDEA导入既有Maven项目</h2><ol><li>以导入刚才的MavenDemo项目的例子做示范:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202141435515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择以项目格式打开<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202143112831.png#pic_center" alt="在这里插入图片描述"></li><li>构建build 刷新maven即可</li><li><strong>如果是导入需要依赖这个项目的项目？  该怎么做</strong><br> 首先我们一定要将要依赖的那个mvn install一下 就是右边生命周期那点一下（可以先clean一下） 放到本地库以后，我们才能够依赖这个项目包。</li></ol><h2 id="Maven项目视图"><a href="#Maven项目视图" class="headerlink" title="Maven项目视图"></a>Maven项目视图</h2><p>Maven项目视图主要用于查看该maven项目的各项属性,同时也可以进行一些常见的maven的操作,比如打包,清理,测试等等;<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202145450167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Maven进阶"><a href="#Maven进阶" class="headerlink" title="Maven进阶"></a>Maven进阶</h1><h2 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h2><p>就像 Make 的 MakeFile、Ant 的 build.xml 一样，<strong>Maven 项目的核心是 pom.xml</strong>。POM( Project Object Model，项目对象模型 ) 定义了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><h3 id="坐标的概念"><a href="#坐标的概念" class="headerlink" title="坐标的概念"></a>坐标的概念</h3><p>在 Maven 中坐标是构件的唯一标识，<strong>Maven 坐标的元素包括 groupId、artifactId、version、packaging、classifier</strong>。上述5个元素中，<strong>groupId、artifactId、version 是必须定义的</strong>，packaging 是可选的 ( 默认为 jar )。</p><h3 id="坐标的意义"><a href="#坐标的意义" class="headerlink" title="坐标的意义"></a>坐标的意义</h3><ul><li>Maven世界拥有大量构建，我们需要找一个用来唯一标识一个构建的统一规范</li><li>拥有了统一规范，就可以把查找工作交给机器</li><li>说白了就是 根据坐标的信息找到那个依赖包 然后装进本地库<h3 id="坐标的含义"><a href="#坐标的含义" class="headerlink" title="坐标的含义"></a>坐标的含义</h3></li><li>groupId：组织标识，一般为：公司网址的反写+项目名</li><li>artifactId：项目名称，一般为：项目名-模块名</li><li>version：版本号 形式为0.0.1-SNAPSHOT：<ul><li>第一个 0 表示大版本号，第二个 0 表示分支版本号，第三个 0 表示小版本号</li><li>SNAPSHOT – 快照版本，ALPHA – 内侧版本，BETA – 公测版本，RELEASE – 稳定版本，GA – 正式发布<ul><li>packaging：打包的方式，如：pom, jar, maven-plugin, ejb, war, …</li><li>clissifier：用来帮助定义构件输出的一些附属构件。<h3 id="自己项目的坐标"><a href="#自己项目的坐标" class="headerlink" title="自己项目的坐标"></a>自己项目的坐标</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202153058568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="第三方项目坐标"><a href="#第三方项目坐标" class="headerlink" title="第三方项目坐标"></a>第三方项目坐标</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202153139203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="依赖的意义"><a href="#依赖的意义" class="headerlink" title="依赖的意义"></a>依赖的意义</h3></li></ul></li></ul></li></ul><blockquote><p>当编写Java代码时，我们总是需要一些库，例如，做单元测试我们需要JUnit库。<strong>对于更大的项目，我们可能需要创建自己的库并在不同的部分使用它的项目。不同的项目需要不同版本的库。</strong><br>保持项目最新的库JAR文件的正确版本不是一个容易的任务。<br>每个外部JAR可能还依赖于其他外部JAR文件等。以<strong>递归方式</strong>下载所有这些外部依赖JAR文件并确保下载正确的版本是一项巨大的任务。<br><strong>当项目越来越大，我们将需要越来越多的外部依赖。 Maven将下载它们并将它们放在您的<em>本地Maven存储库</em>中。</strong><br>我们可以在<strong>POM文件中的dependencies元素内指定依赖关系。</strong></p></blockquote><h3 id="依赖的使用"><a href="#依赖的使用" class="headerlink" title="依赖的使用"></a>依赖的使用</h3><p>例如我们的项目需要进行单元测试,则需要使用到junit-4.9.jar包,使用maven引用该依赖的方式如下:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154312798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>属性说明:</p><ul><li>三维坐标:引用依赖包的三维坐标,用来定位该依赖包;</li><li>scope: 控制该依赖包<strong>在什么情况下</strong>（即Maven的生命周期）会被加到 classpath 中;<h3 id="第三方依赖的查找方法"><a href="#第三方依赖的查找方法" class="headerlink" title="第三方依赖的查找方法"></a>第三方依赖的查找方法</h3>我们在不确定所需引用的第三方依赖包的坐标时,通过maven的中央仓库进行查找,网址: <a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a>;<br>以mybatis举例:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154457492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154512968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154530286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202154544649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2>Maven项目在开发工程中有三套classpath</li><li>主代码：main下面的都是主代码在编译的时候的依赖</li><li>测试代码：test下是测试代码编译的时候的依赖  junit</li><li>运行时：main代码在运行的时候对包的依赖  驱动程序</li></ul><p>依赖范围的使用,通过在引用第三方依赖时的<scope></scope>标签进行设置,例如:<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202160859515.png#pic_center" alt="在这里插入图片描述"><br>共 6 种 scope，包括：<strong>compile、provided、runtime、test、system、import</strong>。例如上图的junit,只在测试中使用,则选择test即可,<strong>默认为compile</strong></p><ul><li>Compile：编译依赖范围。默认使用此依赖范围，其下的maven依赖，对于编译，测试，运行classpath都有效。</li><li>Test：测试依赖范围。只对测试classpath有效，编译主代码或运行项目时无法使用此依赖。<strong>典型例子如junit。</strong></li><li>Provided：已提供依赖范围。其对于编译与测试classpath有效，运行时无效。如在web开发时，只有在编译和测试时才用到servlet-api，将其设置为此范围，在运行时servlet-api由web容器提供，无须依赖。并且在打war包时，此范围的依赖不会打在WEB-INF/lib下。</li><li>Runtime：运行时依赖范围。与provided相对，运行时classpath有效。<strong>典型例子如jdbc。</strong><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161106807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="依赖传递和可选依赖（不太重要）"><a href="#依赖传递和可选依赖（不太重要）" class="headerlink" title="依赖传递和可选依赖（不太重要）"></a>依赖传递和可选依赖（不太重要）</h2><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3>应用场景:</li><li>第一直接依赖:        HelloFriend项目依赖Hello项目    </li><li>第二直接依赖:        MakeFriend项目依赖HelloFriend项目<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161444939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="依赖范围对传递依赖的影响"><a href="#依赖范围对传递依赖的影响" class="headerlink" title="依赖范围对传递依赖的影响"></a>依赖范围对传递依赖的影响</h3>传递依赖是会受到依赖范围的影响的,具体来看结果如下:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161522391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><h3 id="依赖阻断"><a href="#依赖阻断" class="headerlink" title="依赖阻断"></a>依赖阻断</h3><p>我们使用<br>例如我们在HelloFriend项目里面的Hello依赖处添加该配置<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161616267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161634693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><p>如果我们需要在依赖中明确的排除掉某一依赖,则可以使用exclusion属性,排除掉引用的依赖,如图:<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202161900854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="仓库的概念"><a href="#仓库的概念" class="headerlink" title="仓库的概念"></a>仓库的概念</h3><blockquote><p>在 Maven 的术语中，仓库是一个位置（place）。 Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。 在 Maven中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。<br><strong>Maven仓库能帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR，ZIP，POM等等）的地方。</strong></p></blockquote><p>仓库的类型有:</p><ul><li>本地（local）</li><li>中央（central）</li><li>远程（remote） 即私服 一般只有大公司才有</li></ul><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><blockquote><p>Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。<br>运行Maven的时候，<strong>Maven所需要的任何构件都是直接从本地仓库获取的</strong>。<br>如果本地仓库没有，它会首先<strong>尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件</strong>。<br>默认情况下，不管Linux还是 Windows，每个用户在自己的用户目录下都有一个路径名为 .m2/respository/ 的仓库目录<br>Maven 本地仓库默认被创建在 %USER_HOME% 目录下。要修改默认位置，在 %Maven_HOME%\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。</p></blockquote><p>即设置Maven包内的settings文件 上面也提到过。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210201211845385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h3><blockquote><p>Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。<br>中央仓库包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。一般来说，简单的Java项目依赖的构件都可以在这里下载到。</p></blockquote><p>中央仓库的关键概念：</p><ul><li>这个仓库由 Maven 社区管理。</li><li>不需要配置。</li><li>需要通过网络才能访问。<h3 id="依赖搜索顺序"><a href="#依赖搜索顺序" class="headerlink" title="依赖搜索顺序"></a>依赖搜索顺序</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202171627741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期的概念"><a href="#生命周期的概念" class="headerlink" title="生命周期的概念"></a>生命周期的概念</h3></li></ul><blockquote><p>Maven的生命周期是对所有的构建过程进行抽象和统一。Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际的工作，生命周期只是定义了一系列的阶段，并确定这些阶段的执行顺序。而在执行这些阶段时，实际的工作还是由插件来完成的。这种思想与设计模式中的模板方法非常相似。</p></blockquote><p>Maven有三套相互独立的生命周期:</p><ul><li>Clean  clean生命周期的目的是清理项目</li><li>Default  default生命周期的目的是构建项目</li><li>site  site生命周期的目的是建立项目站点。<h3 id="完整生命周期"><a href="#完整生命周期" class="headerlink" title="完整生命周期"></a>完整生命周期</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202171836790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202171902957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><blockquote><p>用户在mvn命令后可以指定三个生命周期中的任何阶段，则Maven会按以下逻辑执行：<strong>首先会得到该阶段所属生命周期，从该生命周期中的第一个阶段开始按顺序执行，直至该阶段本身</strong>。例如执行mvn clean命令会依次执行clean生命周期中的pre-clean阶段及clean阶段。mvn命令后可以指定多个阶段，Maven会按照输入的顺序依次执行，每次执行都会按照之前描述的逻辑执行。<br>之前提到实际的工作还是由插件来完成的，这意味着插件需要和阶段绑定起来。Maven已经事先将很多核心插件绑定到对应的阶段，这样用户几乎不用配置就有构建Maven项目。Maven的内置绑定如下：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172010381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><h2 id="Maven继承和聚合"><a href="#Maven继承和聚合" class="headerlink" title="Maven继承和聚合"></a>Maven继承和聚合</h2><h3 id="继承的意义"><a href="#继承的意义" class="headerlink" title="继承的意义"></a>继承的意义</h3><blockquote><p>继承就是避免重复，maven的继承也是这样，它还有一个好处就是让项目更加安全。比如我们在项目开发的过程中，可能多个模块独立开发，但是多个模块可能依赖相同的公共模块，比如说每个模块都需要javaseo-utils，在编译的时候，maven-compiler-plugin插件也要被引入，maven仓库地址以及发布目录都是相同的配置。我们可以使用Maven的继承功能，把公共的配置信息写到父模块中，子模块只要继承了该父模块，也会继承父模块的配置信息。</p></blockquote><h3 id="可继承的POM元素"><a href="#可继承的POM元素" class="headerlink" title="可继承的POM元素"></a>可继承的POM元素</h3><blockquote><p><strong>groupId</strong> ：项目组 ID ，项目坐标的核心元素；<br><strong>version</strong> ：项目版本，项目坐标的核心元素；<br>description：项目的描述信息；<br>organization ：项目的组织信息；<br>inceptionYear ：项目的创始年份；<br>url ：项目的 url地址<br>develoers ：项目的开发者信息；<br>contributors ：项目的贡献者信息；<br>distributionManagerment ：项目的部署信息；<br>issueManagement ：缺陷跟踪系统信息；<br>ciManagement ：项目的持续继承信息；<br>scm ：项目的版本控制信息；<br>mailingListserv ：项目的邮件列表信息；<br><strong>properties</strong> ：自定义的 Maven 属性；<br><strong>dependencies</strong> ：项目的依赖配置；<br><strong>dependencyManagement</strong> ：醒目的依赖管理配置；<br>repositories ：项目的仓库配置；<br>build：包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等；<br>reporting ：包括项目的报告输出目录配置、报告插件配置等</p></blockquote><h3 id="IDEA实现Maven的继承"><a href="#IDEA实现Maven的继承" class="headerlink" title="IDEA实现Maven的继承"></a>IDEA实现Maven的继承</h3><ol><li>创建父类项目随意 然后创建三个子类项目<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172408553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172424963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172437996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>至此,一个由parent统一管理core,manage和portal的mavan项目就创建好了;<br>观察父子项目的pom文件配置<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172516132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210202172531708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="继承的依赖管理"><a href="#继承的依赖管理" class="headerlink" title="继承的依赖管理"></a>继承的依赖管理</h3>父类直接引用依赖,如果在父类的dependencies内直接引用依赖,则子类都会继承该依赖,父类写下。 则子类都会继承该依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>第二种是在父类内放入 依赖包但父类不依赖但规定版本设置，由子类自己调用</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   父类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   子类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="聚合管理"><a href="#聚合管理" class="headerlink" title="聚合管理"></a>聚合管理</h3><blockquote><p>我们在平时的开发中，项目往往会被划分为好几个模块，比如common公共模块、system系统模块、log日志模块、reports统计模块、monitor监控模块等等。这时我们肯定会出现这么一个需要，我们需要一次构件多个模块，而不用每个模块都去mvn;<br>————<br>以上面得父子项目为例,<strong>当我们对parent进行mvn install时,会对core,manage和portal项目均进行install操作</strong>:</p></blockquote><h3 id="properties属性的使用"><a href="#properties属性的使用" class="headerlink" title="properties属性的使用"></a>properties属性的使用</h3><p><strong>通过 properties元素用户可以定义一个或多个 maven 属性</strong>，然后在 maven 的其他地方使用 <strong>${属性名称}</strong> 的方式引用该属性，这种做法的意义在于消除重复和统一管理。比如，需要在多个地方重复声明同样的 SpringFramework 版本，现在只需要在一个地方声明就可以。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   父类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson-version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">fastjson-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Maven&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Maven的概念&quot;&gt;&lt;a href=&quot;#Maven的概念&quot; class=&quot;headerlink&quot; title=&quot;Maven的概念&quot;&gt;&lt;/a&gt;Maven的概念&lt;/h1&gt;&lt;h2 id=&quot;什么是Maven&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2021/01/31/Git/"/>
    <id>http://yoursite.com/2021/01/31/Git/</id>
    <published>2021-01-31T15:12:38.072Z</published>
    <updated>2021-01-31T15:12:45.242Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Git用于分布式管理">TOC</a></p><h1 id="Git安装与介绍"><a href="#Git安装与介绍" class="headerlink" title="Git安装与介绍"></a>Git安装与介绍</h1><h2 id="Git优势"><a href="#Git优势" class="headerlink" title="Git优势"></a>Git优势</h2><ul><li>大部分操作在本地完成，不需要联网</li><li>能够保证项目的完整性</li><li>尽可能的添加 而不是删除或者修改数据</li><li>分支操作非常快捷流畅</li><li>与Linux 全面兼容<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><h3 id="本地Windows"><a href="#本地Windows" class="headerlink" title="本地Windows"></a>本地Windows</h3>在git官网下下载 安装即可。<h3 id="虚拟机或者购买服务器上安装git"><a href="#虚拟机或者购买服务器上安装git" class="headerlink" title="虚拟机或者购买服务器上安装git"></a>虚拟机或者购买服务器上安装git</h3>安装git<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>测试git 是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130163355973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130163709805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="常见Git代码托管中心"><a href="#常见Git代码托管中心" class="headerlink" title="常见Git代码托管中心"></a>常见Git代码托管中心</h2><p>Git代码托管中心的任务：维护远程库</p><ul><li>局域网托管中心：<ul><li>GitLab服务器</li></ul></li><li>外网托管中心：<ul><li>GitHub</li><li>码元</li></ul></li></ul><h2 id="本地库和远程库"><a href="#本地库和远程库" class="headerlink" title="本地库和远程库"></a>本地库和远程库</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131143206481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="跨团队合作"><a href="#跨团队合作" class="headerlink" title="跨团队合作"></a>跨团队合作</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131143226978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h1><h2 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h2><blockquote><p>作用：区分不同开发人员的身份<br>辨析：这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关系。</p></blockquote><p>项目级别/仓库级别：仅在当前本地库范围内有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name user.name jks</span><br><span class="line">git config user.email 963561243@qq.com</span><br><span class="line">信息保存位置：./.git/config 文件</span><br></pre></td></tr></table></figure><p>系统用户级别：登录当前操作系统的用户范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name jks</span><br><span class="line">git config --global user.email 963561243@qq.com</span><br><span class="line">信息保存位置：~/.gitconfig 文件</span><br></pre></td></tr></table></figure><p>级别优先级</p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="上传增加文件"><a href="#上传增加文件" class="headerlink" title="上传增加文件"></a>上传增加文件</h2><ol><li>新建一个java文件，并写好内容保存<code>vi hello.java</code>  此时本地目录会有这个文件</li><li><strong>查看工作区、暂存区状态 <code>git status</code></strong></li><li>将文件创建映射到<strong>暂存区</strong><code>git add hello.java</code> </li><li>最终提交文件到<strong>本地库</strong> <code>git commit -m firstcommit</code>  firstcommit为自定义该阶段版本名字</li></ol><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><ol><li>删除hello.java文件  <code>vi hello.java</code>  本地目录这个文件会直接没有</li><li>查看此时状态 <code>git status</code>   </li><li>将文件删除映射到<strong>暂存区</strong><code>git add hello.java</code> </li><li>最终文件删除映射到<strong>本地库</strong> <code>git commit -m worldcommit</code>  worldcommit为自定义的该阶段版本名字</li></ol><h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2><p>查看历史记录 <code>git reflog</code>   例如：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130204330500.png#pic_center" alt="在这里插入图片描述"><br>前面的序号，是这步的一个唯一标识索引值 可用于恢复等操作。</p><h2 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h2><p>恢复特定的步骤 如恢复 第二步 b98594c。 也可以恢复回来，即文件的版本切换<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130232958686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>基于索引值操作[推荐]  <code>git reset --hard b98594c</code></li><li>使用^符号：只能后退  <code>git reset --hard HEAD^      注：一个^表示后退一步，n 个表示后退 n 步</code></li><li>使用<del>符号：只能后退  `git reset –hard HEAD</del>n    注：表示后退 n 步`</li><li>reset 命令的三个参数对比<ul><li>–soft 参数   仅仅在本地库移动 HEAD 指针</li><li>–mixed 参数  在本地库移动 HEAD 指针  重置暂存区</li><li>–hard 参数  在本地库移动 HEAD 指针  重置暂存区   重置工作区</li></ul></li></ul><h2 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h2><p>文件的不同版本之间的对比，可以看出来哪里改了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff [文件名]   将工作区中的文件和暂存区进行比较</span><br><span class="line">git diff [本地库中历史版本] [文件名]  将工作区中的文件和本地库历史记录比较</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130211723289.png#pic_center" alt="在这里插入图片描述"></p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="分支的意义"><a href="#分支的意义" class="headerlink" title="分支的意义"></a>分支的意义</h2><p>在版本控制过程中，使用多条线同时推进多个任务。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210130233247454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ol><li><p>创建分支   <code>git branch [分支名]</code></p></li><li><p>查看分支   <code>git branch -v</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013111185671.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>切换分支   <code>git checkout [分支名]</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131111954703.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>合并分支</p><ul><li>第一步：切换到接受修改的分支（被合并，增加新内容）上 <code>git checkout [被合并分支名]</code></li><li>第二步：执行 merge 命令  <code>git merge [有新内容分支名]</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131141035876.png#pic_center" alt="在这里插入图片描述"><br>冲突的表现<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131142250714.png#pic_center" alt="在这里插入图片描述"><br>冲突的解决</li></ul></li><li><p>第一步：编辑文件，删除特殊符号</p></li><li><p>第二步：把文件修改到满意的程度，保存退出</p></li><li><p>第三步：git add [文件名]</p></li><li><p>第四步：git commit -m “日志信息”</p><pre><code>注意：此时 commit 一定不能带具体文件名</code></pre></li></ol><h1 id="Git-基本原理"><a href="#Git-基本原理" class="headerlink" title="Git 基本原理"></a>Git 基本原理</h1><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144239775.png#pic_center" alt="在这里插入图片描述"><br>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下  几个共同点：</p><ul><li>不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。</li><li>哈希算法确定，输入数据确定，输出数据能够保证不变</li><li>哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大</li><li>哈希算法不可逆<br>Git 底层采用的是 SHA-1 算法。<br>哈希算法可以被用来验证文件。原理如下图所示：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144357250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Git 就是靠这种机制来从根本上保证数据完整性的。<h2 id="Git-保存版本的机制"><a href="#Git-保存版本的机制" class="headerlink" title="Git 保存版本的机制"></a>Git 保存版本的机制</h2><h3 id="集中式版本控制工具的文件管理机制"><a href="#集中式版本控制工具的文件管理机制" class="headerlink" title="集中式版本控制工具的文件管理机制"></a>集中式版本控制工具的文件管理机制</h3>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144513151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="Git-的文件管理机制"><a href="#Git-的文件管理机制" class="headerlink" title="Git 的文件管理机制"></a>Git 的文件管理机制</h3>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，  Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的工作方式可以称之为快照流。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131144822807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="Git-文件管理机制细节"><a href="#Git-文件管理机制细节" class="headerlink" title="Git 文件管理机制细节"></a>Git 文件管理机制细节</h3>Git 的“提交对象”<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131145348484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>提交对象及其父对象形成的链条<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114541689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="Git-分支管理机制"><a href="#Git-分支管理机制" class="headerlink" title="Git 分支管理机制"></a>Git 分支管理机制</h2><h3 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114545371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h3><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131145517638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114554015.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013114555062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131145609197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h1 id="GitHub实战"><a href="#GitHub实战" class="headerlink" title="GitHub实战"></a>GitHub实战</h1><h2 id="账号信息"><a href="#账号信息" class="headerlink" title="账号信息"></a>账号信息</h2>注册呗 GitHub 首页就是注册页面：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>比如我的叫</li><li>Email地址：<a href="mailto:963561243@qq.com">963561243@qq.com</a></li><li>Github账号：jks88990041</li></ul><h2 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h2><ol><li>创建一个Github库，点击<strong>new</strong><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131151137433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>填上仓库的名字，选择public，其他不填</li></ol><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131152045534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>打开后上端，为这个库需要git的地址<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131152323683.png#pic_center" alt="在这里插入图片描述"></p><ol start="3"><li>创建一个文件夹，作为我们项目目录文件，然后再这个文件夹下进行git操作</li><li>首先，先初始化库 <code>git init</code></li><li>可以创建一个初始的README.md文件 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br><span class="line">vi README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure><ul><li>连接github远程库 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//连接远程库</span><br><span class="line">git remote add origin https://github.com/jks88990041/jksFortest.git</span><br><span class="line">//可以查看连接的所有库的别名等</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li>推送  <code>git push [别名] [分支名]</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013115362575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131153802723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>出现如下表示 本地库连接成功<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131153934649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>打开该github库 可以看到 README.md文件<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021013115472993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="团队成员多人开发"><a href="#团队成员多人开发" class="headerlink" title="团队成员多人开发"></a>团队成员多人开发</h2></li><li>点击settings 左侧栏的Manage access 然后 邀请</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131162923322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>别的成员开发需要 拉取全部项目库内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jks88990041/jksFortest.git</span><br></pre></td></tr></table></figure><ul><li>做了n多操作修改后，需要上传效果。 即</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>远程库看到效果后，本地库不会有所改动的。因此本地库需要拉取远程库的内容。但不是克隆，因为我已经初始化整个包了，我只是更新。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pull=fetch+merge</span><br><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br><span class="line">//用pull即可</span><br><span class="line">git pull [远程库地址别名] [远程分支名]</span><br></pre></td></tr></table></figure><p>注：可能的冲突<br>冲突原因：</p><ul><li>程序员甲在A文件的第三行写了代码并提交到远程库</li><li>程序员乙在未更新代码的情况向下，也对A文件的第三行写了代码</li><li>git没法区别应该保留哪行代码，需要人为的干预</li></ul><p>解决冲突：</p><ul><li>程序员乙拉取远程库代码</li><li>程序员乙打开A文件，删除无用的头信息（git添加）</li><li>程序员乙保存A文件并添加到<strong>暂存区</strong></li><li>程序员乙提交更改到本地库（提交时不要加文件名）</li><li>程序员乙提交本地库<strong>到远程库</strong><br>注意事项：</li><li>项目管理人员就应该分块写，不然这样冲突不是很麻烦么</li></ul><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><p>以项目本人的身份进行fork 复制<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131170658162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="SSH-登录"><a href="#SSH-登录" class="headerlink" title="SSH 登录"></a>SSH 登录</h2><p>进入当前用户的家目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>删除.ssh 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rvf .ssh</span><br></pre></td></tr></table></figure><p>运行命令生成.ssh 密钥目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C 963561243@qq.com [注意：这里-C 这个参数是大写的 C]</span><br></pre></td></tr></table></figure><p>进入.ssh 目录查看文件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh</span><br><span class="line">$ ls -lF</span><br></pre></td></tr></table></figure><p>查看 id_rsa.pub 文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><blockquote><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys New SSH<br>Key 输入复制的密钥信息<br>回到 Git bash 创建远程地址别名 例如 git remote add origin_ssh <a href="mailto:git@github.com">git@github.com</a>:atguigu2018ybuq/huashan.git 推送文件进行测试</p></blockquote><h1 id="IDEA连接Github"><a href="#IDEA连接Github" class="headerlink" title="IDEA连接Github"></a>IDEA连接Github</h1><p>注意：第一次提交的时候，得新建一个库，不初始化。这个库最好和这个项目是对应的名字。你用其他初始化的库，就不对了。</p><ol><li>打开idea将配置Git</li></ol><blockquote><p>下面的git.exe是Idea自动检测到的，一般只要你安装了，idea会自动监测到，如果你的没有自动监测到，找到安装git路径，找到bin目录下的git.exe，导入即可，然后点击右边的Test测试，测试成功的话会显示你的git版本号，如下图<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131211938643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 2. 而后配置Github<br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131213855547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 3. 然后输入自己的用户名和密码，之后你会看到一条红色的报错信息，需要去你的github找token,这里就不说token怎么找了，附上别人的链接（<a href="https://blog.csdn.net/weixin_41637749/article/details/83791464" target="_blank" rel="noopener">点我！点我</a>）<br> 4. 配置好token 后 <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214031750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 5. 将当前项目纳入git版本控制体系中<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214205788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 看到项目文件文字颜色发生变化即正确<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214742120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>6. 将工作区内容添加到暂存区<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214841998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>项目文件的文字颜色再次发生变化<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131214932705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 7. 将暂存区的内容提交到git本地库<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215135247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215238597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><ol start="8"><li><p>将本地库的内容push到远程仓库<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215354221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215535915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击ok之后就会看到Idea右下角由pushing的进度条，中间会弹出一个github登录框（不同版本的框可能不一样哈），登上即可<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131215732976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>右下角出现成功即可 <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131224627868.png#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210131224851738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Git用于分布式管理&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Git安装与介绍&quot;&gt;&lt;a href=&quot;#Git安装与介绍&quot; class=&quot;headerlink&quot; title=&quot;Git安装与介绍&quot;&gt;&lt;/a&gt;Git安装与介绍&lt;/h1&gt;&lt;h2 id=&quot;Git优
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git精髓简略版</title>
    <link href="http://yoursite.com/2021/01/30/Git%E7%B2%BE%E9%AB%93%E7%AE%80%E7%95%A5%E7%89%88/"/>
    <id>http://yoursite.com/2021/01/30/Git%E7%B2%BE%E9%AB%93%E7%AE%80%E7%95%A5%E7%89%88/</id>
    <published>2021-01-30T15:11:23.225Z</published>
    <updated>2021-01-30T13:23:27.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="协同修改、数据备份、可将本地文件恢复到某一个历史状态"><a href="#协同修改、数据备份、可将本地文件恢复到某一个历史状态" class="headerlink" title="协同修改、数据备份、可将本地文件恢复到某一个历史状态"></a>协同修改、数据备份、可将本地文件恢复到某一个历史状态</h3><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><ul><li>SVN 集中式  增量式管理方式 就是每有增量保存状态叠加</li><li>Git 分布式 文件快照的方式  优势为 避免端点故障</li></ul><h3 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h3><ul><li>工作区:写代码  通过git add -&gt;暂存区:临时存储代码  git  commit -&gt; 本地库:历史版本</li></ul><h3 id="代码托管中心-维护远程库"><a href="#代码托管中心-维护远程库" class="headerlink" title="代码托管中心:维护远程库"></a>代码托管中心:维护远程库</h3><ul><li><p>局域网环境下</p><ul><li>GitLab服务器</li></ul></li><li><p>外网环境下</p><ul><li>GitHub</li><li>码云</li></ul></li></ul><h3 id="本地库与远程库"><a href="#本地库与远程库" class="headerlink" title="本地库与远程库"></a>本地库与远程库</h3><ul><li>团队内部协作</li><li>跨团队协作</li></ul><h2 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h2><h3 id="本地库操作"><a href="#本地库操作" class="headerlink" title="本地库操作"></a>本地库操作</h3><ul><li><p>本地库初始化</p><ul><li>git初始化： git init</li><li>命令：git add</li><li>.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改</li></ul></li><li><p>设置签名</p><ul><li><p>形式</p><ul><li><p>如: 用户名:tom Email地址: <a href="mailto:goodMorning@163.com">goodMorning@163.com</a></p></li><li><p>作用为:区分不同开发人员的身份</p></li><li><p>注意:  这里的签名形式和 登录远程库(代码托管中心)的账号密码  没有关系</p></li><li><p>命令</p><ul><li><p>项目级别/仓库级别：仅在当前本地库范围内有效</p><ul><li>git config user.name tom_pro</li><li>git config user.email <a href="mailto:goodMorning_pro@atguigu.com">goodMorning_pro@atguigu.com</a></li><li>信息保存位置：./.git/config 文件</li></ul></li><li><p>系统用户级别：登录当前操作系统的用户范围</p><ul><li>git config –global user.name tom_glb</li><li>git config –global <a href="mailto:goodMorning_pro@atguigu.com">goodMorning_pro@atguigu.com</a></li><li>信息保存位置：~/.gitconfig 文件</li></ul></li><li><p>级别优先级</p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别 的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul></li></ul></li></ul></li></ul></li><li><p>基本操作</p><ul><li><p>git status 查看工作区、暂存区状态</p></li><li><p>git add [file name] 将工作区的“新建/修改”添加到暂存区</p></li><li><p>git commit -m “commit message” [file name] 将暂存区的内容提交到本地库</p></li><li><p>查看历史记录 git log</p><ul><li><p>多屏显示控制方式： 空格向下翻页 b 向上翻页 q 退出</p></li><li><p>git log –pretty=oneline</p></li><li><p>git log –oneline</p></li><li><p>git reflog</p><ul><li>HEAD@{移动到当前版本需要多少步}</li></ul></li></ul></li><li><p>版本前进后退</p><ul><li><p>基于索引值操作[推荐]</p><ul><li>git reset –hard a6ace91</li></ul></li><li><p>使用^符号：只能后退</p><ul><li>git reset –hard HEAD^      注：一个^表示后退一步，n 个表示后退 n 步</li></ul></li><li><p>使用~符号：只能后退</p><ul><li>git reset –hard HEAD~n    注：表示后退 n 步</li></ul></li><li><p>reset 命令的三个参数对比</p><ul><li>–soft 参数   仅仅在本地库移动 HEAD 指针</li><li>–mixed 参数  在本地库移动 HEAD 指针  重置暂存区</li><li>–hard 参数  在本地库移动 HEAD 指针  重置暂存区   重置工作区</li></ul></li></ul></li><li><p>比较文件差异</p><ul><li>git diff [文件名]   将工作区中的文件和暂存区进行比较</li><li>git diff [本地库中历史版本] [文件名]  将工作区中的文件和本地库历史记录比较</li></ul></li><li><p>分支管理</p><ul><li><p>创建分支   git branch [分支名]</p></li><li><p>查看分支   git branch -v</p></li><li><p>切换分支   git checkout [分支名]</p></li><li><p>合并分支</p><ul><li><p>第一步：切换到接受修改的分支（被合并，增加新内容）上 git checkout [被合并分支名]</p></li><li><p>第二步：执行 merge 命令 git merge [有新内容分支名]</p></li><li><p>解决冲突</p><ul><li>第一步：编辑文件，删除特殊符号</li><li>第二步：把文件修改到满意的程度，保存退出</li><li>第三步：git add [文件名]</li><li>第四步：git commit -m “日志信息”     注意：此时 commit 一定不能带具体文件名</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h3><ul><li><p>创建远程库地址别名</p><ul><li>git remote -v 查看当前所有远程地址别名 git remote add [别名] [远程地址]</li></ul></li><li><p>克隆(非团队成员操作)</p><ul><li><p>命令: git clone [地址]</p><ul><li>完整的把远程库下载到本地</li><li>创建 origin 远程地址别名</li><li>初始化本地库</li></ul></li></ul></li><li><p>成为团队成员</p></li><li><p>拉取</p><ul><li><p>pull = fetch+merge</p><ul><li><p>git fetch [远程库地址别名][远程分支名]</p></li><li><p>git merge  [远程库地址别名/远程分支名]</p><ul><li>git merge jks123/master</li></ul></li></ul></li><li><p>单用 git pull jks123 master 也可以  不过容易产生冲突</p></li></ul></li><li><p>解决冲突</p><ul><li><p>如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉 取。</p></li><li><p>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</p></li><li><p>类比</p><ul><li>老王和老王媳妇</li></ul></li></ul></li><li><p>跨团队合作</p><ul><li>第三方人  fork</li><li>正常 clone  编辑 push 到远程一套 记得去掉凭证</li><li>Pull Request</li><li>审核人本人出 conmmit  那确认</li><li>本人 从远程库 pull 到本地即可</li></ul></li><li><p>SSH 替换HTTPS 登录</p><ul><li><p>好处：可以不用登录  缺点：只能有一个人</p></li><li><p>进入当前用户的家目录 $ cd ~</p></li><li><p>删除原有的ssh  rm -r .ssh/</p></li><li><p>运行命令生成.ssh 密钥目录 $ ssh-keygen -t rsa -C <a href="mailto:atguigu2018ybuq@aliyun.com">atguigu2018ybuq@aliyun.com</a></p></li><li><p>进入.ssh 目录查看文件列表  $ cd .ssh   $ ls -lF</p></li><li><p>查看 id_rsa.pub 文件内容  $ cat id_rsa.pub</p></li><li><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys</p></li><li><p>New SSH Key</p><ul><li>输入复制的密钥信息</li></ul></li><li><p>回到 Git bash 创建远程地址别名</p><ul><li>git remote add origin_ssh <a href="mailto:git@github.com">git@github.com</a>:atguigu2018ybuq/huashan.git</li></ul></li></ul></li></ul><h2 id="分支主题-3"><a href="#分支主题-3" class="headerlink" title="分支主题 3"></a>分支主题 3</h2><p><em>XMind - Trial Version</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;版本控制&quot;&gt;&lt;a href=&quot;#版本控制&quot; class=&quot;headerlink&quot; title=&quot;版本控制&quot;&gt;&lt;/a&gt;版本控
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2021/01/29/Linux/"/>
    <id>http://yoursite.com/2021/01/29/Linux/</id>
    <published>2021-01-29T15:30:52.504Z</published>
    <updated>2021-01-29T15:30:59.764Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Linux">TOC</a></p><h1 id="linux的文件规则"><a href="#linux的文件规则" class="headerlink" title="linux的文件规则"></a>linux的文件规则</h1><ul><li>除了/所有的字符都是合法的</li><li>有些字符不建议使用，如空格符，制表符，退格符和字符@#$()-等</li><li>避免使用.作为普通文件名作为第一个字符，因为第一个点的作为字符代表隐藏的文件</li><li>Linux的大小写是区分的</li></ul><h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><blockquote><p>蓝色：表示目录 青色：表示链接 黑色：表示文件</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129144832375.png#pic_center" alt="在这里插入图片描述"><br>根目录下，包括如下的几种目录<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129145021166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>/- 根<br>每一个文件和目录从根目录开始。<br>只有root用户具有该目录下的写权限。请注意，/root是root用户的主目录</li><li>/bin中 - 用户二进制文件<br>包含二进制可执行文件。<br>在单用户模式下，你需要使用的常见Linux命令都位于此目录下。系统的所有用户使用的命令都设在这里。<br>例如：ps、ls、ping、grep、cp<br>第一种方式:    只有a匹配的上 其他不合法</li><li>/sbin目录 - 系统二进制文件<br>就像/bin，/sbin同样也包含二进制可执行文件。<br>但是，在这个目录下的linux命令通常由系统管理员使用，对系统进行维护。例如：iptables、reboot、fdisk、ifconfig、swapon命令</li><li>/etc - 配置文件<br>包含所有程序所需的配置文件。<br>也包含了用于启动/停止单个程序的启动和关闭shell脚本。例如：/etc/resolv.conf、/etc/logrotate.conf</li><li>/dev - 设备文件<br>包含设备文件。<br>这些包括终端设备、USB或连接到系统的任何设备。例如：/dev/tty1、/dev/usbmon0</li><li>/proc - 进程信息<br>包含系统进程的相关信息。<br>这是一个虚拟的文件系统，包含有关正在运行的进程的信息。例如：/proc/{pid}目录中包含的与特定pid相关的信息。<br>这是一个虚拟的文件系统，系统资源以文本信息形式存在。例如：/proc/uptime</li><li>/var - 变量文件<br>var代表变量文件。<br>这个目录下可以找到内容可能增长的文件。<br>这包括 - 系统日志文件（/var/log）;包和数据库文件（/var/lib）;电子邮件（/var/mail）;打印队列（/var/spool）;锁文件（/var/lock）;多次重新启动需要的临时文件（/var/tmp）;</li><li>/tmp - 临时文件<br>包含系统和用户创建的临时文件。<br>当系统重新启动时，这个目录下的文件都将被删除。</li><li>/usr - 用户程序<br>包含二进制文件、库文件、文档和二级程序的源代码。<br>/usr/bin中包含用户程序的二进制文件。如果你在/bin中找不到用户二进制文件，到/usr/bin目录看看。例如：at、awk、cc、less、scp。<br>/usr/sbin中包含系统管理员的二进制文件。如果你在/sbin中找不到系统二进制文件，到/usr/sbin目录看看。例如：atd、cron、sshd、useradd、userdel。<br>/usr/lib中包含了/usr/bin和/usr/sbin用到的库。<br>/usr/local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在/usr/local/apache2中。</li><li>/home - HOME目录<br>所有用户用home目录来存储他们的个人档案。<br>例如：/home/john、/home/nikita</li><li>/boot - 引导加载程序文件<br>包含引导加载程序相关的文件。<br>内核的initrd、vmlinux、grub文件位于/boot下。<br>例如：initrd.img-2.6.32-24-generic、vmlinuz-2.6.32-24-generic</li><li>/lib - 系统库<br>包含支持位于/bin和/sbin下的二进制文件的库文件.<br>库文件名为 ld<em>或lib</em>.so.*<br>例如：ld-2.11.1.so，libncurses.so.5.7</li><li>/opt - 可选的附加应用程序<br>opt代表可选的。<br>包含从个别厂商的附加应用程序。<br>附加应用程序应该安装在/opt/或者/opt/的子目录下。</li><li>/mnt - 挂载目录<br>临时安装目录，系统管理员可以挂载文件系统。</li><li>/media - 可移动媒体设备<br>用于挂载可移动设备的临时目录。<br>举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器的/media/floppy;</li><li>/srv - 服务数据<br>srv代表服务。<br>包含服务器特定服务相关的数据。<br>例如，/srv/cvs包含cvs相关的数据。</li></ol><h1 id="Linux的常用命令"><a href="#Linux的常用命令" class="headerlink" title="Linux的常用命令"></a>Linux的常用命令</h1><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>命令格式：命令-选项参数<br>例：ls  -la /etc<br>说明： 1）当有多个选项时，可以写在一起。<br>          2）两个特殊的目录. 和.. ，分别代表当前<br>                目录和当前目录的父目录。<br>本节的要点</p><ul><li>文件处理命令</li><li>权限管理命令</li><li>文件搜索命令</li><li>帮助命令</li><li>压缩解压命令</li><li>网络通信命令</li><li>系统关机命令</li><li>Shell应用技巧<br><strong>/sbin和/usr/sbin下的命令是root执行的命令<br>/bin和/usr/bin下的命令是所有用户都可以执行的命令</strong><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3>命令名称：ls<br>命令英文原意：list<br>命令所在路径：/bin/ls<br>执行权限：所有用户<br><strong>功能描述：显示目录文件</strong><br>语法：<strong>ls 选项[-al] [文件或目录]</strong><br>-a  显示所有文件，包括隐藏文件（all）<br>-l  详细信息显示（long）<br>范例：drwxr-xr-x   2 root root  4096 Dec  3 06:18 bin<pre><code>第一个字符d是文件类型：</code></pre>d是目录<br>-是二进制文件<br>l软连接文件<br>第一列的后9个字符（rwxr-xr-x）是文件的权限<br>R是读，w是写，x是可执行<br>Rwx                        r-x                    r-x<br>所有者u(user)        所属组(group)                其他人o(other)<br>2代表硬链接数<br>root root：第一个root是所属用户，第二个root是所属组<br>4096：是文件的大小，以数据块来表示，一个数据块是512字节<br>Dec  3 06:18：文件的创建时间或最后最后修改时间<br>bin:文件名</li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>命令名称：cd<br>命令英文原意：change directory<br>命令所在路径：shell内置命令<br>执行权限：所有用户<br><strong>语法：cd [目录]</strong><br><strong>功能描述：切换目录</strong><br>范例：$ cd  /  切换到根目录<br>$ cd  ..  回到上一级目录</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>命令名称：pwd<br>命令英文原意：print working directory<br>命令所在路径：/bin/pwd<br>执行权限：所有用户<br><strong>语法：pwd</strong><br><strong>功能描述：显示当前所在的工作目录</strong><br>范例：$ pwd<br>/etc/rc5.d</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>命令名称：touch<br>命令所在路径：/bin/touch<br>执行权限：所有用户<br><strong>语法：touch [文件名]</strong><br><strong>功能描述：创建空文件</strong><br>范例：$ touch newfile</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>命令名称：mkdir<br>命令英文原意：make directories<br>命令所在路径：/bin/mkdir<br>执行权限：所有用户<br><strong>语法：mkdir  [目录名]</strong><br><strong>功能描述：创建新目录</strong><br>范例：$ mkdir newdir</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>命令名称：cp<br>命令英文原意：copy<br>命令所在路径：/bin/cp<br>执行权限：所有用户<br><strong>语法：cp -R [源文件或目录] [目的目录]</strong><br>-R  复制目录<br><strong>功能描述：复制文件或目录</strong></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>命令名称：mv<br>命令英文原意：move<br>命令所在路径：/bin/mv<br>执行权限：所有用户<br><strong>语法：mv  [源文件或目录] [目的目录]</strong><br><strong>功能描述：移动文件、更名</strong></p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>命令名称：rm<br>命令英文原意：remove<br>命令所在路径：/bin/rm<br>执行权限：所有用户<br><strong>语法：rm  -r [文件或目录]</strong><br>-r  删除目录<br><strong>功能描述：删除文件</strong></p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>命令名称：cat<br>命令英文原意：concatenate and display files<br>命令所在路径：/bin/cat<br>执行权限：所有用户<br><strong>语法：cat [文件名]</strong><br><strong>功能描述：显示文件内容</strong><br>范例：$ cat /etc/issue<br>$ cat /etc/services<br><strong>缺点：无法显示很长的文件</strong></p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>命令名称：more<br>命令所在路径：/bin/more<br>执行权限：所有用户<br><strong>语法：more [文件名]</strong><br>(空格) 或f  显示下一页<br>(Enter)  显示下一行<br>q或Q  退出<br><strong>功能描述：分页显示文件内容</strong><br>范例：$ more /etc/services</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>指令名称：head<br>指令所在路径：/bin/head<br>执行权限：All User<br><strong>语法：head -num [文件名]</strong><br>-num 显示文件的前num行<br><strong>功能描述：查看文件的前几行</strong><br>范例：$ head -20 /etc/services</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>指令名称：tail<br>指令所在路径：/bin/tail<br>执行权限：All User<br><strong>语法：tail -num [文件名]</strong><br>-num 显示文件的后num行<br>-f  动态显示文件内容<br><strong>功能描述：查看文件的后几行</strong><br>范例：$ tail -30 /etc/services</p><h3 id="In"><a href="#In" class="headerlink" title="In"></a>In</h3><p>命令名称：ln<br>命令英文原意：link<br>命令所在路径：/bin/ln<br>执行权限：所有用户<br><strong>语法：ln  -s [源文件] [目标文件]</strong><br>-s 创建软链接<br>功能描述：产生链接文件（类似win中的快捷方式）<br><strong>创建硬链接不需要使用-s, 类似拷贝，但是不同的两个文件会做同步更新</strong><br>范例：<br>$ ln -s /etc/issue /issue.soft<br>创建文件/etc/issue的软链接/issue.soft<br>$ ln  /etc/issue /issue.hard<br>创建文件/etc/issue的硬链接/issue.hard</p><h2 id="权限处理命令"><a href="#权限处理命令" class="headerlink" title="权限处理命令"></a>权限处理命令</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>命令名称：chmod<br>命令英文原意：change the permissions mode of a file<br>命令所在路径：/bin/chmod<br>执行权限：所有用户<br><strong>语法：chmod  [{ugo}{+-=}{rwx}] [文件或目录]<br>[mode=421 ] [文件或目录]</strong><br><strong>功能描述：改变文件或目录权</strong><br>在文件的权限中有三种用户u,     g,    o<br>范例：<br>$ chmod  g+w  file1<br>赋予文件file1所属组写权限<br>$ chmod  777 dir1<br>设定目录dir1为所有用户具有全部权限<br>使用数字的方式来授权<br><strong>r=4，w=2，x=1</strong></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129230952786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>命令名称：chown<br>命令英文原意：change file ownership<br>命令所在路径：/bin/chown<br>执行权限：所有用户<br><strong>语法：chown  [用户] [文件或目录]</strong><br><strong>功能描述：改变文件或目录的所有者</strong><br>范例：$ chown  nobody file1<br>改变文件file1的所有者为nobody</p><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>命令名称：chgrp<br>命令英文原意：change file group ownership<br>命令所在路径：/bin/chgrp<br>执行权限：所有用户<br><strong>语法：chgrp  [用户组] [文件或目录]</strong><br><strong>功能描述：改变文件或目录的所属组</strong><br>范例：$ chgrp adm file1<br>改变文件file1的所属组为adm</p><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>命令名称：which<br>命令所在路径：/usr/bin/which<br>执行权限：所有用户<br><strong>语法：which [命令名称]</strong><br><strong>功能描述：显示系统命令所在目录</strong><br>范例：$ which ls<br><strong>注意：只能查找命令文件</strong></p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>命令名称：find<br>命令所在路径：/usr/bin/find<br>执行权限：所有用户<br><strong>语法：find [搜索路径] [搜寻关键字]</strong><br><strong>功能描述：查找文件或目录</strong><br>范例：<br>$ find /etc -name init 不是模糊查询<br>在目录/etc中查找文件init<br>$find /etc –name <em>init<br>在目录etc中查询以init开头的文件<br>$find /etc –name *init</em><br>在目录etc中查询以包含init的文件<br>$find /etc –name init???<br>在目录etc中查询以init开头并且后面有三个字符的文件，？是单字符的匹配<br>$ find / -size +204800<br>在根目录下查找大于100MB的文件，size后面的数字的单位是数据块（512字节）</p><p>1M=102400k<br>1k=1024字节<br>0.5k=512<br>$ find / -user sam<br>在根目录下查找所有者为sam的文件</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>命令名称：grep<br>命令所在路径：/bin/grep<br>执行权限：所有用户<br><strong>语法：grep  [指定字串] [源文件]</strong><br><strong>功能描述：在文件中搜寻字串匹配的行并输出</strong><br>范例：# grep  ftp /etc/services</p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>命令名称：man<br>命令英文原意：manual<br>命令所在路径：/usr/bin/man<br>执行权限：所有用户<br><strong>语法：man [命令或配置文件]</strong><br><strong>功能描述：获得帮助信息</strong><br>范例：$ man ls<br>查看ls命令的帮助信息<br>$ man services<br>查看配置文件services的帮助信息</p><h2 id="解压压缩命令"><a href="#解压压缩命令" class="headerlink" title="解压压缩命令"></a>解压压缩命令</h2><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>命令名称：gzip<br>命令英文原意：GNU zip<br>命令所在路径：/bin/gzip<br>执行权限：所有用户<br><strong>语法：gzip 选项[文件]</strong><br><strong>功能描述：压缩文件</strong><br>压缩后文件格式：<strong>.gz</strong><br><strong>默认只能压缩文件，并且不保留原文件</strong></p><p>Linux压缩保留源文件的方法：<br>gzip –c filename &gt; filename.gz </p><h3 id="gunzip"><a href="#gunzip" class="headerlink" title="gunzip"></a>gunzip</h3><p>命令名称：gunzip<br>命令英文原意：GNU unzip<br>命令所在路径：/bin/gunzip<br>执行权限：所有用户<br><strong>语法：gunzip 选项[压缩文件]</strong><br><strong>功能描述：解压缩.gz的压缩文件</strong><br>范例：$ gunzip file1.gz</p><p>解压保留压缩包：gunzip -c 1.txt.gz &gt; 1.txt</p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>命令名称：tar<br>命令所在路径：/bin/tar<br>执行权限：所有用户<br><strong>语法：tar 选项[cvf] [目录]</strong><br>-c  产生.tar打包文件<br>-v  显示详细信息<br>-f  指定压缩后的文件名<br>-z  打包同时压缩<br><strong>功能描述：打包目录和文件</strong><br>压缩后文件格式：.tar.gz<br>范例：<br>$ tar -zcvf  dir1.tar.gz dir1<br>将目录dir1压缩成一个打包并压缩的文件</p><p>压缩</p><p>[root@linux ~]# tar -cvf /tmp/etc.tar /etc  仅打包，不压缩！<br>[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc  打包后，以 gzip 压缩</p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>命令名称：zip<br>命令所在路径：/usr/bin/zip<br>执行权限：所有用户<br>语法：<br><strong>zip 选项[-r] [压缩后文件名称] [文件或目录]</strong><br>-r  压缩目录<br><strong>功能描述：压缩文件或目录</strong><br>压缩后文件格式：<strong>.zip</strong><br><strong>可以压缩文件和目录，而且保留原文件</strong><br>范例：<br>$ zip services.zip  /etc/services<br>压缩文件<br>$ zip -r test.zip  /test<br>压缩目录</p><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>命令名称：unzip<br>命令所在路径：/usr/bin/unzip<br>执行权限：所有用户<br><strong>语法：unzip [压缩文件]</strong><br><strong>功能描述：解压.zip的压缩文件</strong><br>范例：$ unzip test.zip</p><h2 id="网络通信命令"><a href="#网络通信命令" class="headerlink" title="网络通信命令"></a>网络通信命令</h2><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>命令名称：ping<br>命令所在路径：/usr/sbin/ping<br>执行权限：root<br><strong>语法：ping 选项IP地址</strong><br><strong>功能描述：测试网络连通性</strong><br>范例：# ping 192.168.1.1</p><p><strong>查看防火墙状态：service iptables status</strong></p><p>关闭防火墙<br>（1）重启后永久性生效：<br>开启：chkconfig iptables on   关闭：chkconfig iptables off<br>（2） 即时生效，重启后失效：<br>        开启：service iptables start   关闭：service iptables stop<br>管理防火墙也可以使用图形界面<br>Setup</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>命令名称：ifconfig<br>命令所在路径：/usr/sbin/ifconfig<br>执行权限：所有用户<br><strong>语法：ifconfig 选项[-a] [网卡设备标识]</strong><br>-a  显示所有网卡信息<br><strong>功能描述：查看网络设置信息</strong><br>范例：# ifconfig  -a</p><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>命令名称：shutdown<br>命令所在路径：/usr/sbin/shutdown<br>执行权限：root<br><strong>语法：shutdown</strong><br><strong>功能描述：关机</strong><br>范例：# shutdown -h now</p><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><p>命令名称：reboot<br>命令所在路径：/usr/sbin/reboot<br>执行权限：root<br><strong>语法：reboot</strong><br><strong>功能描述：重启系统</strong><br>范例：# reboot</p><h2 id="shell应用技巧"><a href="#shell应用技巧" class="headerlink" title="shell应用技巧"></a>shell应用技巧</h2><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><blockquote><p>或&gt;&gt;  输出重定向<br><strong>将执行命令的结果输出到文件中</strong><br>范例：ls -l /tmp &gt; /tmp.msg<br><strong>将执行命令的结果追加到文件中</strong><br>date &gt;&gt; /tmp.msg</p></blockquote><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道：将一个命令的输出传送给另一个命令，<br>作为另一个命令的输入。<br>使用方法：<br>命令1|命令2|命令3……|命令n<br>范例：</p><ul><li>ls -l /etc | more</li><li>ls -l /etc | grep init</li><li>ls -l /etc | grep init | wc –l</li></ul><h3 id="命令替换符"><a href="#命令替换符" class="headerlink" title="命令替换符"></a>命令替换符</h3><p>命令替换：将一个命令的输出作为另一个<br>命令的参数。<br>格式为：命令1 <code>命令2</code><br>范例：<br>ls -l <code>which touch</code></p><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><p>Vim/Vi是一个功能强大的全屏幕文本编辑器，是Linux/UNIX上最常用的文本编辑器，它的作用是建立、编辑、显示文本文件。Vim/Vi 没有菜单，只有命令。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021012923194865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232000591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232015328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232029117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021012923204458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021012923205669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232108174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210129232119342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><h3 id="RPM包的管理"><a href="#RPM包的管理" class="headerlink" title="RPM包的管理"></a>RPM包的管理</h3><p>RPM软件包的一个例子<br>sudo-1.7.2p1-5.el5.i386.rpm<br>其中包括软件名(sudo)，版本号(1.7.2pl)，发行号<br>(5.el5)，和硬件平台(i386)。</p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p> #rpm -e sudo<br>注意：如果其它软件包有依赖关系，卸载时会<br>产生提示信息，可使用–nodeps强行卸载。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>#rpm -ivh sudo-1.7.2p1-5.el5.i386.rpm<br>挂载光盘：<br>mkdir /mnt/cdrom<br>mount /dev/cdrom /mnt/cdrom<br>查询：<br>rpm -q sudo   查询sudo软件包是否被安装<br>rpm -qa | grep samba        查询和Samba相关的软件包</p><p>其他安装选项：<br>–excludedocs<br>不安装软件包中的文档文件<br>–prefix PATH<br>将软件包安装到由PATH指定的路径下<br>–test<br>只对安装进行测试，并不实际安装</p><ul><li>软件包已被安装<br>rpm -ivh sudo-1.7.2p1-5.el5.i386.rpm<br>package sudo-1.7.2p1-5.el5.i386 is already installed<br>如果覆盖安装该软件包，可以在命令行上使用<br>–replacepkgs 选项。</li></ul><ul><li>未解决依赖关系<br>RPM软件包可能依赖于其它软件包，在安装了特<br>定的软件包之后才能安装该软件包。<br>rpm -ivh sudo-1.7.2p1-5.el5.i386.rpm<br>failed dependencies:<br>sudo is needed by bark-3.2-1l<br>你必须安装完所依赖的软件包，才能解决这个问<br>题，强制安装使用–nodeps 选项。</li></ul><h3 id="YUM包的管理"><a href="#YUM包的管理" class="headerlink" title="YUM包的管理"></a>YUM包的管理</h3><p>应用yum的好处</p><blockquote><p>自动解决软件包依赖关系<br>方便的软件包升级<br> 安装yum install<br> 检测升级yum check-update<br> 升级yum update<br> 软件包查询yum list<br>软件包信息yum info<br>卸载yum remove<br>帮助yum -help、man yum</p></blockquote><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>下载：<code>jdk-7u55-linux-i586.tar.gz</code><br>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar –zxvf jdk-7u55-linux-i586.tar.gz</span><br></pre></td></tr></table></figure><p>/usr/local/tools/jdk1.7.0_55<br>配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/softwire-package/jdk1.7.0_55</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure><h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><p>解压：<code>tar –zxvf apache-tomcat-7.0.42.tar.gz</code><br>    切换目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apache-tomcat-7.0.42/bin</span><br><span class="line">启动Tomcat：</span><br><span class="line">./startup.sh</span><br><span class="line">停止Tomcat：</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h3><p>安装redis步骤：</p><blockquote><p>先安装tcl wget <a href="http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz</a><br>//直接下载   tar xzvf tcl8.6.1-src.tar.gz  -C /usr/local/   cd<br>/usr/local/tcl8.6.1/unix/    ./configure   make   make install</p><p>再安装redis tar –zxvf redis-3.0.0.tar.gz cd redis-3.0.0 make make install</p><p>yum -y install gcc gcc-c++ autoconf automake</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Linux&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;linux的文件规则&quot;&gt;&lt;a href=&quot;#linux的文件规则&quot; class=&quot;headerlink&quot; title=&quot;linux的文件规则&quot;&gt;&lt;/a&gt;linux的文件规则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>企业信息系统实战</title>
    <link href="http://yoursite.com/2021/01/27/%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2021/01/27/%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/</id>
    <published>2021-01-27T08:11:12.329Z</published>
    <updated>2021-01-28T15:53:01.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="企业信息系统"><a href="#企业信息系统" class="headerlink" title="企业信息系统"></a>企业信息系统</h1><h2 id="第一章：需求"><a href="#第一章：需求" class="headerlink" title="第一章：需求"></a>第一章：需求</h2><h3 id="1-系统用户模块"><a href="#1-系统用户模块" class="headerlink" title="1. 系统用户模块"></a>1. 系统用户模块</h3><p>用户可以使用用户名和密码登录该系统。</p><p>系统登录页面需要对用户名和密码进行校验，用户名不能为空，密码非空，且长度在3-10位之间。</p><p>密码在数据库中存储的形式是以加密的方式存储的。加密算法采用的是MD5加密的方式。</p><p>如果系统用户登录失败时，给出系统提示。</p><p>用户点击退出管理按钮，跳转回用户的登录页面，完成用户退出的功能。</p><h3 id="2-员工管理模块"><a href="#2-员工管理模块" class="headerlink" title="2. 员工管理模块"></a>2. 员工管理模块</h3><p>员工查询功能，要求把所有的数据全部显示到页面上，并且提供分页。</p><p>员工的新增功能，需要对数据进行校验，保存成功后跳转到用户的列表页面。</p><p>修改员工，对数据进行校验，修改成功后跳转到用户的列表页面。</p><p>删除员工，对员工删除时需要先询问是否删除，用户点击确定才会删除，删除成功后跳转到用户列表页面。</p><h3 id="3-系统权限功能"><a href="#3-系统权限功能" class="headerlink" title="3. 系统权限功能"></a>3. 系统权限功能</h3><p>系统中的功能必须是在用户登录的情况下才能使用。如果没有登录，会跳转到登陆页面。</p><h2 id="第二章：数据库设计"><a href="#第二章：数据库设计" class="headerlink" title="第二章：数据库设计"></a>第二章：数据库设计</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h3><p>使用如下脚本语句创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> txweb;</span><br><span class="line"><span class="keyword">use</span> txweb;</span><br></pre></td></tr></table></figure><h3 id="2-用户表"><a href="#2-用户表" class="headerlink" title="2. 用户表"></a>2. 用户表</h3><p>用户表用来存储系统用户的数据，主要做用户登录的功能，表结构设计如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">30</span>),</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">nickname <span class="built_in">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'admin'</span>,<span class="string">'21232f297a57a5a743894a0e4a801fc3'</span>,<span class="string">'管理员'</span>);</span><br></pre></td></tr></table></figure><h3 id="3-员工表"><a href="#3-员工表" class="headerlink" title="3. 员工表"></a>3. 员工表</h3><p>员工表用来存储员工的数据，表结构设计如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_emp`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`ename`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sal`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`edate`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`districtid`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">20</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'美美'</span>, <span class="string">'20'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'1990-11-11'</span>, <span class="string">'2018-11-11'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'小凤'</span>, <span class="string">'25'</span>, <span class="string">'0'</span>, <span class="string">'8000'</span>, <span class="string">'1990-11-11'</span>, <span class="string">'2018-11-11'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'冠希'</span>, <span class="string">'35'</span>, <span class="string">'1'</span>, <span class="string">'12000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'熊大'</span>, <span class="string">'22'</span>, <span class="string">'1'</span>, <span class="string">'10000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'熊二'</span>, <span class="string">'111'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'5'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'光头强'</span>, <span class="string">'12'</span>, <span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'6'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'喜羊羊'</span>, <span class="string">'11'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'1980-01-01'</span>, <span class="string">'2018-01-01'</span>, <span class="string">'7'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'二狗'</span>, <span class="string">'20'</span>, <span class="string">'0'</span>, <span class="string">'10000'</span>, <span class="string">'2003-03-03'</span>, <span class="string">'2018-12-11'</span>, <span class="string">'8'</span>);</span><br></pre></td></tr></table></figure><h3 id="4-地区表"><a href="#4-地区表" class="headerlink" title="4. 地区表"></a>4. 地区表</h3><p>具体数据参见t_district.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_district`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父及地区关系'</span>,</span><br><span class="line">  <span class="string">`district`</span> <span class="built_in">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'地区名称'</span>,</span><br><span class="line">  <span class="string">`level`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'子属级别关系'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3432</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'全国地区表'</span>;</span><br></pre></td></tr></table></figure><h2 id="第三章：架构选择"><a href="#第三章：架构选择" class="headerlink" title="第三章：架构选择"></a>第三章：架构选择</h2><p>本项目采用MVC设计模式思想，使用<strong>JavaBean、Servlet和JSP做为MVC的组件进行开发</strong>。服务器端采用三层架构的方式，分成了<strong>表现层、业务层和持久层</strong>。<strong>表现层使用JSP和Servlet程序</strong>，与浏览器客户端进行数据的交互。<strong>业务层使用Service程序</strong>，进行业务逻辑处理和事务处理。<strong>持久层使用Dao程序</strong>，进行数据库的持久化操作。数据库使用MySQL数据库。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210128173646630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>系统前端使用HTML5、CSS和JQuery技术。页面数据校验使用JQuery框架的validate校验插件。</p><p>系统提示使用的是layer插件。</p><h2 id="第四章：搭建系统开发环境"><a href="#第四章：搭建系统开发环境" class="headerlink" title="第四章：搭建系统开发环境"></a>第四章：搭建系统开发环境</h2><h3 id="1-搭建系统开发环境"><a href="#1-搭建系统开发环境" class="headerlink" title="1. 搭建系统开发环境"></a>1. 搭建系统开发环境</h3><p>创建Javaweb项目，把所有的静态页面拷贝到项目中。</p><p>给工程引入开发的jar包。</p><p>把系统资源的所有文件拷贝到项目中。</p><h3 id="2-编写实体类"><a href="#2-编写实体类" class="headerlink" title="2. 编写实体类"></a>2. 编写实体类</h3><p>编写User实体类，表示系统用户实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Emp实体类，表示员工实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 员工名称</span></span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">// 入职日期</span></span><br><span class="line">    <span class="keyword">private</span> Date edate;</span><br><span class="line">    <span class="comment">// 地区ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer districtId;</span><br><span class="line">    <span class="comment">// 地区</span></span><br><span class="line">    <span class="keyword">private</span> District district;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer id, String ename, Integer age, Integer sex, Double sal, Date birthday, Date edate, Integer districtId, District district)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">        <span class="keyword">this</span>.edate = edate;</span><br><span class="line">        <span class="keyword">this</span>.districtId = districtId;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> District <span class="title">getDistrict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistrict</span><span class="params">(District district)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Integer sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> edate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEdate</span><span class="params">(Date edate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.edate = edate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDistrictId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> districtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistrictId</span><span class="params">(Integer districtId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.districtId = districtId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写District实体类，表示地区实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">District</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 地区ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 地区父ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="comment">// 地区名称</span></span><br><span class="line">    <span class="keyword">private</span> String district;</span><br><span class="line">    <span class="comment">// 地区级别</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDistrict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistrict</span><span class="params">(String district)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">District</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">District</span><span class="params">(Integer id, Integer pid, String district, Integer level)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写工具类"><a href="#3-编写工具类" class="headerlink" title="3. 编写工具类"></a>3. 编写工具类</h3><p>page</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 当前页</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> pageCode;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 总页数 = 总记录数/每页显示的记录的条数</span></span><br><span class="line">   <span class="comment">// private int totalPage;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 总记录数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> totalCount;</span><br><span class="line">   <span class="comment">// 每页显示的记录的条数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">   <span class="comment">// 每页显示的数据</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;T&gt; beanList;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pageCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageCode</span><span class="params">(<span class="keyword">int</span> pageCode)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.pageCode = pageCode;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取总页数totalPage也是属性</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 做计算，计算的结果直接返回给你</span></span><br><span class="line">      <span class="keyword">int</span> tp = totalCount / pageSize;</span><br><span class="line">      <span class="comment">// 说明整除，</span></span><br><span class="line">      <span class="keyword">if</span>(totalCount % pageSize == <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> tp;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> tp+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*public void setTotalPage(int totalPage) &#123;</span></span><br><span class="line"><span class="comment">      this.totalPage = totalPage;</span></span><br><span class="line"><span class="comment">   &#125;*/</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> totalCount;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pageSize;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getBeanList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> beanList;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanList</span><span class="params">(List&lt;T&gt; beanList)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.beanList = beanList;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MD5Utils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.json.JSONUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MD5加密的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用md5的算法进行加密</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">byte</span>[] secretBytes = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         secretBytes = MessageDigest.getInstance(<span class="string">"md5"</span>).digest(content.getBytes());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有md5这个算法！"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      String md5code = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, secretBytes).toString(<span class="number">16</span>);<span class="comment">// 16进制数字</span></span><br><span class="line">      <span class="comment">// 如果生成数字未满32位，需要前面补0</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span> - md5code.length(); i++) &#123;</span><br><span class="line">         md5code = <span class="string">"0"</span> + md5code;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> md5code;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JdbcUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类，使用连接池获取到连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接池对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource DATA_SOURCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 加载属性文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream inputStream = JdbcUtils.class.getResourceAsStream("/druid.properties");</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载属性文件</span></span><br><span class="line">            pro.load(inputStream);</span><br><span class="line">            <span class="comment">// 创建连接池对象</span></span><br><span class="line">            DATA_SOURCE = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从连接池中获取连接，返回。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DATA_SOURCE.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stmt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TxBeanUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.ConvertUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxBeanUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过BeanUtils类进行属性绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperties</span><span class="params">(Object object, Map&lt;String,String[]&gt; param)</span></span>&#123;</span><br><span class="line">        ConvertUtils.register(<span class="keyword">new</span> Converter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">convert</span><span class="params">(Class type, Object value)</span> </span>&#123;</span><br><span class="line">                SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> simpleDateFormat.parse(value.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(object,param);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五章：用户模块功能开发"><a href="#第五章：用户模块功能开发" class="headerlink" title="第五章：用户模块功能开发"></a>第五章：用户模块功能开发</h2><p>首先要设置，初始项目的首页为Login.jsp。通过web.xml进行设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置欢迎页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-用户登录功能代码实现"><a href="#1-用户登录功能代码实现" class="headerlink" title="1. 用户登录功能代码实现"></a>1. 用户登录功能代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">=====================用户登录的Servlet程序=========================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn_tx_servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.impl.userServiceImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.userService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userLoginServlet</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/27 17:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userLoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Servlet后是Service</span></span><br><span class="line">    <span class="comment">//注入 一个userService的对象</span></span><br><span class="line">    userService userService = <span class="keyword">new</span> userServiceImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 前台传递的用户名和密码参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//检验用户名和密码</span></span><br><span class="line">        User user = userService.getUser(username,password);</span><br><span class="line">        <span class="comment">//用户存在</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//把用户存入session</span></span><br><span class="line">            System.out.println(<span class="string">"登陆成功"</span>);</span><br><span class="line">            req.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">"pages/home.jsp"</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="comment">//用户不存在 表示用户名或密码错误 跳回登录页面 并且展示错误信息</span></span><br><span class="line">            req.setAttribute(<span class="string">"errorMsg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="comment">//转发回登录页面</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====================用户登录的Service程序 userServiceImpl=====================</span><br><span class="line"><span class="comment">//其通过实现接口userService方法   这个思想一定要有，不同的业务其实是根据参数的不同，写不同的类去实现接口方法。</span></span><br><span class="line"><span class="keyword">package</span> cn_tx_service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx.utils.MD5Utils;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.impl.userDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.userDao;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.userService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userServiceImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/27 19:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet后面是 Dao</span></span><br><span class="line">    userDao userDao = <span class="keyword">new</span> userDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把密码进行MD5加密</span></span><br><span class="line">        password = MD5Utils.encrypt(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(username,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====================用户登录的Dao程序 userDaoImpl=========================</span><br><span class="line"><span class="comment">//其通过实现接口userDao方法   这个思想一定要有，不同的业务其实是根据参数的不同，写不同的类去实现接口方法。</span></span><br><span class="line"><span class="keyword">package</span> cn_tx_service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx.utils.MD5Utils;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.impl.userDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.userDao;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.userService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userServiceImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/27 19:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet后面是 Dao</span></span><br><span class="line">    userDao userDao = <span class="keyword">new</span> userDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把密码进行MD5加密</span></span><br><span class="line">        password = MD5Utils.encrypt(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(username,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-用户退出功能代码实现"><a href="#2-用户退出功能代码实现" class="headerlink" title="2. 用户退出功能代码实现"></a>2. 用户退出功能代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn_tx_servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: userExistServlet</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userExistServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 用户退出功能 删除session</span></span><br><span class="line">        req.getSession().invalidate();</span><br><span class="line">        <span class="comment">// 跳转回登录页面  清除了所有request中的内容</span></span><br><span class="line">        resp.sendRedirect(<span class="string">"login.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六章：员工模块功能开发"><a href="#第六章：员工模块功能开发" class="headerlink" title="第六章：员工模块功能开发"></a>第六章：员工模块功能开发</h2><h3 id="1-获取地区列表的功能"><a href="#1-获取地区列表的功能" class="headerlink" title="1. 获取地区列表的功能"></a>1. 获取地区列表的功能</h3><p>前台页面（用ajax实现）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loadDistrict();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadDistrict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url : <span class="string">"/districtListServlet"</span>,</span><br><span class="line">        type : <span class="string">"get"</span>,</span><br><span class="line">        dataType : <span class="string">"json"</span>,</span><br><span class="line">        success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dh = <span class="string">"&lt;option value=''&gt;---请选择---&lt;/option&gt;"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> selected = data[i].id==$&#123;district == <span class="literal">null</span> ? <span class="string">"''"</span> : district&#125;?<span class="string">"selected"</span>:<span class="string">""</span>;</span><br><span class="line">                dh += <span class="string">"&lt;option value='"</span>+data[i].id+<span class="string">"'"</span>+selected+<span class="string">"&gt;"</span>+data[i].district+<span class="string">"&lt;/option&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">"#district"</span>).html(dh);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>后台业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">=================servlet程序==============================</span><br><span class="line"><span class="keyword">package</span> cn_tx_servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx_service.districtService;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.impl.districtServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: districtListServlet</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">districtListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    districtService districtService = <span class="keyword">new</span> districtServiceImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        JSONArray jsonArray = districtService.listDistrict();</span><br><span class="line">        <span class="comment">//设置响应类型</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/json;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(jsonArray.toJSONString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=======================service程序 实现接口==============================</span><br><span class="line"><span class="keyword">package</span> cn_tx_service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.District;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.districtDao;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.impl.districtDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn_tx_service.districtService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: districtServiceImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">districtServiceImpl</span> <span class="keyword">implements</span> <span class="title">districtService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入districtDao</span></span><br><span class="line">    districtDao districtDao = <span class="keyword">new</span> districtDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONArray <span class="title">listDistrict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;District&gt; list = districtDao.listDistricts();</span><br><span class="line">        JSONArray jsonArray = (JSONArray) JSONArray.toJSON(list);</span><br><span class="line">        <span class="keyword">return</span> jsonArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=======================dao程序 实现接口===================================</span><br><span class="line"><span class="keyword">package</span> cn_tx_dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn_tx.model.District;</span><br><span class="line"><span class="keyword">import</span> cn_tx.model.User;</span><br><span class="line"><span class="keyword">import</span> cn_tx.utils.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> cn_tx_dao.districtDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: 凯凯超人</span></span><br><span class="line"><span class="comment"> * title: districtDaoImpl</span></span><br><span class="line"><span class="comment"> * projectName: tx_eim</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * Date: 2021/1/28 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">districtDaoImpl</span> <span class="keyword">implements</span> <span class="title">districtDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;District&gt; <span class="title">listDistricts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建一个集合</span></span><br><span class="line">        List&lt;District&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user =<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获取数据库连接</span></span><br><span class="line">        connection = JdbcUtils.getConnection();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        String sql =<span class="string">"select * FROM t_district where pid=1"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="comment">// 如果存在结果集，则拼装user对象</span></span><br><span class="line">                District district = <span class="keyword">new</span> District(resultSet.getInt(<span class="number">1</span>),resultSet.getInt(<span class="number">2</span>),resultSet.getString(<span class="number">3</span>),resultSet.getInt(<span class="number">4</span>));</span><br><span class="line">                list.add(district);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-员工分页查询的功能"><a href="#2-员工分页查询的功能" class="headerlink" title="2. 员工分页查询的功能"></a>2. 员工分页查询的功能</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210128231250858.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">=================servlet程序==============================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取浏览器传递的所有参数</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="comment">// 参数列表</span></span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        TxBeanUtils.copyProperties(params,parameterMap);</span><br><span class="line">        <span class="comment">// 调用service 获取分页对象</span></span><br><span class="line">        Page&lt;Emp&gt; page = empService.listEmps(params);</span><br><span class="line">        <span class="comment">// 向request作用域内存入数据  用于回显</span></span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>,page);</span><br><span class="line">        request.setAttribute(<span class="string">"district"</span>,params.get(<span class="string">"qdistrict"</span>));</span><br><span class="line">        request.setAttribute(<span class="string">"ename"</span>,params.get(<span class="string">"qename"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"pages/emplist.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">=======================service程序==============================</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageCode  当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize  每页显示的条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EmpDao empDao = <span class="keyword">new</span> EmpDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Emp&gt; <span class="title">listEmps</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取页码</span></span><br><span class="line">        Integer pageCode = Integer.parseInt(params.get(<span class="string">"pageCode"</span>).toString());</span><br><span class="line">        <span class="comment">// 获取分页大小</span></span><br><span class="line">        Integer pageSize = Integer.parseInt(params.get(<span class="string">"pageSize"</span>).toString());</span><br><span class="line">        <span class="comment">// 计算分页起始位置</span></span><br><span class="line">        Integer start = (pageCode -<span class="number">1</span>)*pageSize;</span><br><span class="line">        params.put(<span class="string">"start"</span>,start);</span><br><span class="line">        <span class="comment">// 获取所有符合条件的员工数量</span></span><br><span class="line">        Integer count  = empDao.countEmps(params);</span><br><span class="line">        <span class="comment">// 获取所有符合条件的员工列表</span></span><br><span class="line">        List&lt;Emp&gt; emps = empDao.listEmps(params);</span><br><span class="line">        <span class="comment">// 封装Page对象  分页工具类</span></span><br><span class="line">        Page&lt;Emp&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pageCode,count,pageSize,emps);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">=======================dao程序===================================</span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">listEmps</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 创建一个集合</span></span><br><span class="line">        List&lt;Emp&gt; list =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取数据库链接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// sql语句</span></span><br><span class="line">            String sql = <span class="string">"SELECT * FROM t_emp e LEFT JOIN t_district d ON e.districtid=d.id where 1=1 "</span>;</span><br><span class="line">            <span class="comment">// 判断前台是否传递qename</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qename"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qename"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.ename LIKE '%"</span>+params.get(<span class="string">"qename"</span>)+<span class="string">"%'"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断前台是否传递districtid</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qdistrict"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qdistrict"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.districtid = "</span> + params.get(<span class="string">"qdistrict"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sql += <span class="string">" limit "</span> + params.get(<span class="string">"start"</span>) + <span class="string">","</span> + params.get(<span class="string">"pageSize"</span>);</span><br><span class="line">            statement = conn.createStatement();</span><br><span class="line">            rs = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">               Emp emp = <span class="keyword">new</span> Emp(rs.getInt(<span class="number">1</span>),rs.getString(<span class="number">2</span>),rs.getInt(<span class="number">3</span>),</span><br><span class="line">                       rs.getInt(<span class="number">4</span>),rs.getDouble(<span class="number">5</span>),rs.getDate(<span class="number">6</span>),</span><br><span class="line">                       rs.getDate(<span class="number">7</span>),rs.getInt(<span class="number">8</span>));</span><br><span class="line">               District district = <span class="keyword">new</span> District(rs.getInt(<span class="number">9</span>),rs.getInt(<span class="number">10</span>),rs.getString(<span class="number">11</span>),rs.getInt(<span class="number">12</span>));</span><br><span class="line">               emp.setDistrict(district);</span><br><span class="line">               list.add(emp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(conn,statement,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">countEmps</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 创建一个结果</span></span><br><span class="line">        Integer count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取数据库链接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// sql语句</span></span><br><span class="line">            String sql = <span class="string">"SELECT count(1) FROM t_emp e where 1=1 "</span>;</span><br><span class="line">            <span class="comment">// 判断前台是否传递qename</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qename"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qename"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.ename LIKE '%"</span>+params.get(<span class="string">"qename"</span>)+<span class="string">"%'"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断前台是否传递districtid</span></span><br><span class="line">            <span class="keyword">if</span>(params.get(<span class="string">"qdistrict"</span>) != <span class="keyword">null</span> &amp;&amp; !params.get(<span class="string">"qdistrict"</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                sql += <span class="string">" and e.districtid = "</span> + params.get(<span class="string">"qdistrict"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            statement = conn.createStatement();</span><br><span class="line">            rs = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(conn,statement,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-员工新增功能"><a href="#3-员工新增功能" class="headerlink" title="3. 员工新增功能"></a>3. 员工新增功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.tx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.impl.EmpServiceImpl;</span><br><span class="line"><span class="keyword">import</span> cn.tx.utils.TxBeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工添加或修改Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpAddServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有前台传来的参数</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">        <span class="comment">// 通过工具对emp进行赋值</span></span><br><span class="line">        TxBeanUtils.copyProperties(emp,map);</span><br><span class="line">        <span class="comment">// 调用service方法存储emp</span></span><br><span class="line">        empService.saveEmp(emp);</span><br><span class="line">        <span class="comment">// 跳转empListServlet以保证自动刷新列表</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/empListServlet"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        empDao.save(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"insert into t_emp values (null,?,?,?,?,?,?,?) "</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,emp.getEname());</span><br><span class="line">            ps.setInt(<span class="number">2</span>,emp.getAge());</span><br><span class="line">            ps.setInt(<span class="number">3</span>,emp.getSex());</span><br><span class="line">            ps.setDouble(<span class="number">4</span>,emp.getSal());</span><br><span class="line">            ps.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(emp.getBirthday().getTime()));</span><br><span class="line">            ps.setDate(<span class="number">6</span>, <span class="keyword">new</span> java.sql.Date(emp.getEdate().getTime()));</span><br><span class="line">            ps.setInt(<span class="number">7</span>,emp.getDistrictId());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-跳转到员工修改页面功能"><a href="#4-跳转到员工修改页面功能" class="headerlink" title="4. 跳转到员工修改页面功能"></a>4. 跳转到员工修改页面功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.tx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.impl.EmpServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转员工修改页面Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpUpdateuiServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取前台传递来的id</span></span><br><span class="line">        String sid = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">int</span> empId = Integer.parseInt(sid);</span><br><span class="line">        <span class="comment">// 通过该ID获取emp对象并展示</span></span><br><span class="line">        Emp emp = empService.getEmp(empId);</span><br><span class="line">        request.setAttribute(<span class="string">"emp"</span>,emp);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"pages/empupdate.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">getEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empDao.getEmp(empId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">  </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">getEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        Emp emp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select e.*,d.* from t_emp e LEFT JOIN t_district d on d.id=e.districtid where e.id=?"</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,empId);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                emp = <span class="keyword">new</span> Emp(rs.getInt(<span class="number">1</span>),rs.getString(<span class="number">2</span>),</span><br><span class="line">                        rs.getInt(<span class="number">3</span>),rs.getInt(<span class="number">4</span>),</span><br><span class="line">                        rs.getDouble(<span class="number">5</span>),rs.getDate(<span class="number">6</span>),</span><br><span class="line">                        rs.getDate(<span class="number">7</span>),rs.getInt(<span class="number">8</span>),</span><br><span class="line">                        <span class="keyword">new</span> District(rs.getInt(<span class="number">9</span>),rs.getInt(<span class="number">10</span>),rs.getString(<span class="number">11</span>),rs.getInt(<span class="number">12</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-修改员工功能"><a href="#5-修改员工功能" class="headerlink" title="5. 修改员工功能"></a>5. 修改员工功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line">同添加员工</span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveEmp</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        Integer empId = emp.getId();</span><br><span class="line">        <span class="comment">// 判断如果empId为空  则调用插入emp的方法 否则调用更新方法</span></span><br><span class="line">        <span class="keyword">if</span>(empId == <span class="keyword">null</span>)</span><br><span class="line">            empDao.save(emp);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            empDao.update(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"UPDATE t_emp SET ename=?,age=?,sex=?,sal=?,birthday=?,edate=?,districtid=? where id=?"</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,emp.getEname());</span><br><span class="line">            ps.setInt(<span class="number">2</span>,emp.getAge());</span><br><span class="line">            ps.setInt(<span class="number">3</span>,emp.getSex());</span><br><span class="line">            ps.setDouble(<span class="number">4</span>,emp.getSal());</span><br><span class="line">            ps.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(emp.getBirthday().getTime()));</span><br><span class="line">            ps.setDate(<span class="number">6</span>, <span class="keyword">new</span> java.sql.Date(emp.getEdate().getTime()));</span><br><span class="line">            ps.setInt(<span class="number">7</span>,emp.getDistrictId());</span><br><span class="line">            ps.setInt(<span class="number">8</span>,emp.getId());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-删除员工功能"><a href="#6-删除员工功能" class="headerlink" title="6. 删除员工功能"></a>6. 删除员工功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">======================servlet程序================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.tx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> cn.tx.service.impl.EmpServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工删除Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpDeleteServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    EmpService empService = <span class="keyword">new</span> EmpServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取前台传递的id</span></span><br><span class="line">        String sid = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">int</span> empId = Integer.parseInt(sid);</span><br><span class="line">        <span class="comment">// 调用service方法删除emp</span></span><br><span class="line">        empService.deleteEmp(empId);</span><br><span class="line">        <span class="comment">// 跳转empListServlet进行列表自动刷新</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"empListServlet"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==========================service程序=============================</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        empDao.deleteEmp(empId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">==========================dao程序======================================</span><br><span class="line">  </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(<span class="keyword">int</span> empId)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Emp&gt; emps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select e.*,d.pid,d.district,d.level from t_emp e LEFT JOIN t_district d ON e.districtid = d.id WHERE  id = ?"</span>;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,empId);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection,ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第七章：过滤器"><a href="#第七章：过滤器" class="headerlink" title="第七章：过滤器"></a>第七章：过滤器</h2><h3 id="1-检查用户权限的过滤器"><a href="#1-检查用户权限的过滤器" class="headerlink" title="1. 检查用户权限的过滤器"></a>1. 检查用户权限的过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证用户是否登陆的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求uri</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行静态资源</span></span><br><span class="line">        <span class="keyword">if</span>(uri.contains(<span class="string">"/css/"</span>) || uri.contains(<span class="string">"/js/"</span>) || uri.contains(<span class="string">"/images/"</span>))&#123;</span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行特殊请求 (登陆,退出,首页,登陆页面)</span></span><br><span class="line">        <span class="keyword">if</span>(uri.equals(<span class="string">"/userLoginServlet"</span>) || uri.equals(<span class="string">"/userExistServlet"</span>) || uri.equals(<span class="string">"/login.jsp"</span>)  || uri.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取session用户</span></span><br><span class="line">        User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">// 用户不为空 放行</span></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            request.setAttribute(<span class="string">"errorMsg"</span>,<span class="string">"您还没有登陆系统!!"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================配置文件信息================================</span><br><span class="line"></span><br><span class="line">    &lt;!--验证用户登陆的过滤器--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;LoginFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">tx</span>.<span class="title">filter</span>.<span class="title">LoginFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">LoginFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-解决乱码问题的过滤器"><a href="#2-解决乱码问题的过滤器" class="headerlink" title="2.解决乱码问题的过滤器"></a>2.解决乱码问题的过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拓薪教育：樱木老师</span></span><br><span class="line"><span class="comment"> * 腾讯课堂搜索：拓薪教育</span></span><br><span class="line"><span class="comment"> * 腾讯课堂直播间地址：https://ke.qq.com/course/149432</span></span><br><span class="line"><span class="comment"> * 加入QQ群领取免费资料和视频：QQ群号 344379612</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 解决post和get中文乱码问题的过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 拦截方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                   FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">      HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">      <span class="comment">// 对request包装增强</span></span><br><span class="line">      HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">      <span class="comment">// 放行</span></span><br><span class="line">      chain.doFilter(myrequest, response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义request对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">      <span class="keyword">this</span>.request = request;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 先获得请求方式</span></span><br><span class="line">      String method = request.getMethod();</span><br><span class="line">      <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</span><br><span class="line">         <span class="comment">// post请求</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理post乱码</span></span><br><span class="line">            request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</span><br><span class="line">         <span class="comment">// get请求</span></span><br><span class="line">         Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">         <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">            <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">               String[] values = parameterMap.get(parameterName);</span><br><span class="line">               <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 处理get乱码</span></span><br><span class="line">                        values[i] = <span class="keyword">new</span> String(values[i]</span><br><span class="line">                              .getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line">                     &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            hasEncode = <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">      String[] values = parameterMap.get(name);</span><br><span class="line">      <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">      Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">      String[] values = parameterMap.get(name);</span><br><span class="line">      <span class="keyword">return</span> values;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;企业信息系统&quot;&gt;&lt;a href=&quot;#企业信息系统&quot; class=&quot;headerlink&quot; title=&quot;企业信息系统&quot;&gt;&lt;/a&gt;企业信息系统&lt;/h1&gt;&lt;h2 id=&quot;第一章：需求&quot;&gt;&lt;a href=&quot;#第一章：需求&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2021/01/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/01/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-01-26T15:44:02.010Z</published>
    <updated>2021-01-26T15:44:09.197Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="正则表达式">TOC</a></p><h1 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h1><p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。<strong>正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。</strong><br>正则表达式类似于JSON,是一种通用的标准,被各种开发语言所支持,包括但不限于:Java,JavaScript,C,C++,C#,Python,SQL等等;<br>因为在<strong>Javaweb项目中正则一般用于前端验证</strong>,故此我们使用JavaScript来进行正则表达式的学习;</p><h1 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h1><p>第一种方式:    只有a匹配的上 其他不合法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^a$'</span>); <span class="comment">// 第一种方式</span></span><br></pre></td></tr></table></figure><p>第二种方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a$/</span>; <span class="comment">// 第二种方式 在js中推荐使用</span></span><br></pre></td></tr></table></figure><h1 id="正则表达式的匹配规则"><a href="#正则表达式的匹配规则" class="headerlink" title="正则表达式的匹配规则"></a>正则表达式的匹配规则</h1><h2 id="字符类匹配"><a href="#字符类匹配" class="headerlink" title="字符类匹配"></a>字符类匹配</h2><ul><li><strong>[abc]</strong> a、b 或 c 任意一个字符</li><li><strong>[^abc]</strong> 任何字符，除了 a、b 或 c ,单个字符</li><li><strong>[a-zA-Z]</strong> a 到 z 或 A 到 Z，两头的字母包括在内 </li><li><strong>[0-9]</strong> 0-9之间的任意字符<h2 id="元字符匹配"><a href="#元字符匹配" class="headerlink" title="元字符匹配"></a>元字符匹配</h2></li><li><strong>.</strong>    匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.|\n)”的模式</li><li><strong>\w</strong>    匹配字母、数字、下划线。等价于<strong>‘[A-Za-z0-9_]’</strong></li><li><strong>\W</strong>    匹配非字母、数字、下划线。等价于 <strong>‘[^A-Za-z0-9_]’</strong></li><li><strong>\s</strong>    匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <strong>[ \f\n\r\t\v]</strong></li><li><strong>\S</strong>    匹配任何非空白字符。等价于 <strong>[^ \f\n\r\t\v]</strong></li><li><strong>\d</strong>    匹配一个数字字符。等价于 <strong>[0-9]</strong></li><li><strong>\D</strong>    匹配一个非数字字符。等价于 <strong>[^0-9]</strong></li><li><strong>\b</strong>    匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’</li><li><strong>^</strong>    匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置</li><li>$    匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置</li></ul><h2 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h2><ul><li><strong>X?</strong>     一次或一次也没有 </li><li><strong>X*</strong>    零次或多次 </li><li><strong>X+</strong>     一次或多次 </li><li><strong>X{n}</strong> 恰好 n 次 </li><li><strong>X{n,}</strong> 至少 n 次</li><li><strong>X{n,m}</strong> 至少 n 次，但是不超过 m 次<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2>如果你想查找元字符本身的话，比如你查找<code>.</code>,或者 <code>*</code>,就出现了问题：你没法指定它们，因为它们会被解释成其它的意思。这时你就必须使用<code>\</code>来取消这些字符的特殊意义。因此，你应该使用<code>\.</code>和<code>\*</code>。当然，要查找<code>\</code>本身，你也得用<code>\\</code>.<br>例如：<code>www\.txjava\.cn匹配www.txjava.cn，c:\\windows匹配c:\windows.</code></li></ul><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复一个字符串又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。<br><code>(\d{1,3}\.){3}\d{1,3}</code>是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d{1,3}</code>匹配1到3位的数字，<code>(\d{1,3}\.){3}</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字<code>(\d{1,3})</code>。<br>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址(IP地址中每个数字都不能大于255)。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：<br>iPv4的ip地址都是<code>（1~225）.（0~255）.（0~255）.（1~255）</code>的格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">22</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|[<span class="number">1</span><span class="number">-9</span>])\.(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|\d)\.(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|\d)\.(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">1</span><span class="number">-9</span>]\d|[<span class="number">1</span><span class="number">-9</span>])</span><br></pre></td></tr></table></figure><h1 id="常见的正则表达式"><a href="#常见的正则表达式" class="headerlink" title="常见的正则表达式"></a>常见的正则表达式</h1><h2 id="数字校验"><a href="#数字校验" class="headerlink" title="数字校验"></a>数字校验</h2><blockquote><p>1.数字：<code>^[0-9]*$</code><br>2.n位的数字：<code>^\d{n}$</code><br>3.至少n位的数字：<code>^\d{n,}$</code><br>4.m-n位的数字：<code>^\d{m,n}$</code><br>5.零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code><br>6.非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code><br>7.带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code><br>8.正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code><br>9.有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code><br>10.有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code><br>11.非零的正整数：<code>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$</code><br>12.非零的负整数：<code>^\-[1-9][0-9] *$ 或 ^-[1-9]\d*$</code><br>13.非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code><br>14.非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code><br>15.非负浮点数：<code>^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code><br>16.非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code><br>17.正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code><br>18.负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code><br>19.浮点数：<code>^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></p></blockquote><h2 id="字符校验"><a href="#字符校验" class="headerlink" title="字符校验"></a>字符校验</h2><blockquote><p>1.汉字：<code>^[\u4e00-\u9fa5]{0,}$</code><br>2.英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code><br>3.长度为3-20的所有字符：<code>^.{3,20}$</code><br>4.由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code><br>5.由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code><br>6.由26个小写英文字母组成的字符串：<code>^[a-z]+$</code><br>7.由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code><br>8.由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code><br>9.中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code><br>10.中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code><br>11.可以输入含有<code>^%&amp;&#39;,;=?$\&quot;</code>等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code><br>12.禁止输入含有<del>“”的字符：`[^</del>\x22]+`</p></blockquote><h2 id="特殊需求校验"><a href="#特殊需求校验" class="headerlink" title="特殊需求校验"></a>特殊需求校验</h2><blockquote><p> 1.Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code><br>2.InternetURL：<code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code><br>3.手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code><br>4.国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code><br>5.身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code><br>6.短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code><br>7.帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code><br>8.密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code><br>9.日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code><br>10.一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code><br>11.一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p></blockquote><h1 id="正则表达式的语法明细"><a href="#正则表达式的语法明细" class="headerlink" title="正则表达式的语法明细"></a>正则表达式的语法明细</h1><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td>将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，”n”匹配字符”n”。”\n”匹配换行符。序列”\\“匹配”\“，”\(“匹配”(“。</td></tr><tr><td>^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td></tr><tr><td>*</td><td>零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td></tr><tr><td>+</td><td>一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td></tr><tr><td>?</td><td>零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是非负整数。正好匹配 n 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td></tr><tr><td>{n,}</td><td>n 是非负整数。至少匹配 n 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td></tr><tr><td>{n,m}</td><td>m 和 n 是非负整数，其中 n &lt;= m。匹配至少 n 次，至多 m 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td></tr><tr><td>?</td><td>当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td></tr><tr><td><strong>.</strong></td><td>匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td></tr><tr><td>(pattern)</td><td>匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 `(</td></tr><tr><td>(?=pattern)</td><td>执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，`’Windows (?=95</td></tr><tr><td>(?!pattern)</td><td>执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95</td></tr><tr><td>`x</td><td>y`</td></tr><tr><td>[xyz]</td><td>字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td></tr><tr><td>[^xyz]</td><td>反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td></tr><tr><td>[^a-z]</td><td>反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td></tr><tr><td>\b</td><td>匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td></tr><tr><td>\B</td><td>非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;正则表达式&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;正则表达式概述&quot;&gt;&lt;a href=&quot;#正则表达式概述&quot; class=&quot;headerlink&quot; title=&quot;正则表达式概述&quot;&gt;&lt;/a&gt;正则表达式概述&lt;/h1&gt;&lt;p&gt;正则表达式，又称正规表示法、常规表示
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://yoursite.com/2021/01/16/AJAX/"/>
    <id>http://yoursite.com/2021/01/16/AJAX/</id>
    <published>2021-01-16T15:38:10.424Z</published>
    <updated>2021-01-16T15:38:14.137Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="AJAX">TOC</a></p><h1 id="AJAX概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h1><p>AJAX（异步JavaScript和XML），其实一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX可以使网页实现<strong>异步更新</strong>。这意味着可以再不重新加载整个网页的情况下，对网页的某部分进行更新。同步更新那就只等是，必须重载整个网页面。 说白了就是我可以实现，不重载整个网页面，局部异步获取数据刷新。比如：在登陆注册的时候，他会提示我们用户名是否被注册，这个信息的显示并没有刷新页面，因此其为异步更新，即AJAX。<br>没有Ajax的网页 实现<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116153029804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>有Ajax的网页<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116155622148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>AJAX最大特点：页面无刷新的请求，ajax默认是异步的，速度快，用户体验好。</p><h1 id="AJAX工作原理"><a href="#AJAX工作原理" class="headerlink" title="AJAX工作原理"></a>AJAX工作原理</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116160026549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="AJAX使用"><a href="#AJAX使用" class="headerlink" title="AJAX使用"></a>AJAX使用</h1><p>一般我们都采用jQuery作为ajax的主体语言。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引入jQuery文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>AJAX请求第一个例子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userId"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点一下试试"</span> <span class="attr">onclick</span>=<span class="string">"sendAJAX()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 发送ajax请求的方法</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sendAJAX</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取输入框内容</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> id = $(<span class="string">"#userId"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url : <span class="string">"ajax/getName?id="</span>+id,<span class="comment">// ajax请求的url地址</span></span></span><br><span class="line"><span class="actionscript">            type : <span class="string">"get"</span>,<span class="comment">// 提交的方法</span></span></span><br><span class="line">            /*data : &#123;</span><br><span class="line"><span class="actionscript">              name : <span class="string">"zhangsan"</span></span></span><br><span class="line">            &#125;,*/</span><br><span class="line"><span class="actionscript">            success : <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123; <span class="comment">// ajax请求回调后执行的方法,data表示从服务器返回的数据</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// alert(data);</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#msg"</span>).html(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码表示的意思为:<br>使用get方法向ajax/getName的URL提交id数据,并且在服务器返回后弹出服务器返回内容</p><h1 id="AJAX参数说明"><a href="#AJAX参数说明" class="headerlink" title="AJAX参数说明"></a>AJAX参数说明</h1><ul><li>url：要求为String类型的参数，（默认为当前页地址）发送请求的地址</li><li>type：要求为String类型的参数，请求方式（post或get）<strong>默认为get</strong>。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持</li><li>timeout：要求为Number类型的参数，<strong>设置请求超时时间</strong>（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置</li><li>async：要求为Boolean类型的参数，<strong>默认设置为true</strong>，所有请求均为<strong>异步请求</strong>。如果需要发送同步请求，请将此选项设置为false。注意，<strong>同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行</strong></li><li>cache：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</li><li>data：<strong>要求为Object或String类型的参数</strong>，<strong>发送到服务器的数据</strong>。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2</li><li>dataType：要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：</li></ul><blockquote><p>xml：返回XML文档，可用JQuery处理。 html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串</p></blockquote><ul><li>beforeSend：要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest)&#123;</span><br><span class="line">   this;   //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>complete：要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest, textStatus)&#123;</span><br><span class="line">   this;    //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。<pre><code>(1)由服务器返回，并根据dataType参数进行处理后的数据。(2)描述状态的字符串。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(data, textStatus)&#123;</span><br><span class="line">   //data可能是xmlDoc、jsonObj、html、text等等</span><br><span class="line">   this;  //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>error：要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest, textStatus, errorThrown)&#123;</span><br><span class="line">   //通常情况下textStatus和errorThrown只有其中一个包含信息</span><br><span class="line">   this;   //调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>contentType：要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”,”json”。该默认值适合大多数应用场合。</li><li>dataFilter：要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(data, type)&#123;</span><br><span class="line">    //返回处理后的数据</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>global：要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，<strong>ajaxStart或ajaxStop可用于控制各种ajax事件</strong></li><li>ifModified：要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息</li><li>jsonp：要求为<strong>String类型</strong>的参数，<strong>在一个jsonp请求中重写回调函数的名字</strong>。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器</li><li>username：要求为String类型的参数，用于响应HTTP访问认证请求的用户名</li><li>password：要求为String类型的参数，用于响应HTTP访问认证请求的密码</li><li>processData：要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false</li><li>scriptCharset：要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用</li></ul><h1 id="AJAX实现用户名是否存在（假版本）"><a href="#AJAX实现用户名是否存在（假版本）" class="headerlink" title="AJAX实现用户名是否存在（假版本）"></a>AJAX实现用户名是否存在（假版本）</h1><p>html页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--onblur 对象失去焦点--&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">onblur</span>=<span class="string">"sendName()"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sendName</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val();</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url : <span class="string">"ajax/s2?username="</span>+username,</span></span><br><span class="line"><span class="actionscript">            type : <span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">            success : <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#msg"</span>).html(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取url传递过来的参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">"zhangsan"</span>))&#123;</span><br><span class="line">            result = <span class="string">"用户名已存在"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result = <span class="string">"用户名可用"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，看一下就懂。 可以尝试将数据写在域内读取，这个假的有点尴尬。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;AJAX&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;AJAX概述&quot;&gt;&lt;a href=&quot;#AJAX概述&quot; class=&quot;headerlink&quot; title=&quot;AJAX概述&quot;&gt;&lt;/a&gt;AJAX概述&lt;/h1&gt;&lt;p&gt;AJAX（异步JavaScript和XML），
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://yoursite.com/2021/01/16/JSON/"/>
    <id>http://yoursite.com/2021/01/16/JSON/</id>
    <published>2021-01-16T15:37:52.967Z</published>
    <updated>2021-01-16T15:38:00.149Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JSON">TOC</a></p><h1 id="JSON概述"><a href="#JSON概述" class="headerlink" title="JSON概述"></a>JSON概述</h1><h2 id="JSON是干嘛的？"><a href="#JSON是干嘛的？" class="headerlink" title="JSON是干嘛的？"></a>JSON是干嘛的？</h2><ul><li>JSON 指的为JavaScript 对象表示法，JavaScript Object Notation</li><li>JSON 是轻量级的<strong>文本数据交换格式</strong></li><li>JSON独立于语言，JSON使用Javascript语法来描述数据对象，但是JSON仍然独立于语言和平台。JSON解释器和JSON库支持许多不同的编程语言</li><li><strong>JSON具有自我描述性，更易理解</strong></li><li><strong>说白了其实 他就是个字符串，能够确切解析的特殊字符串</strong></li></ul><h2 id="JSON格式-两种形式"><a href="#JSON格式-两种形式" class="headerlink" title="JSON格式 两种形式"></a>JSON格式 两种形式</h2><h3 id="键值对集合"><a href="#键值对集合" class="headerlink" title="键值对集合"></a>键值对集合</h3><p>“名称/值”对的集合（A collection of name/value pairs）。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2021011620042574.png#pic_center" alt="在这里插入图片描述"></p><p>对象是一个无序的“‘名称/值’对”集合。一个对象以“{”开始，“}”结束。每个“名称”后跟一个“:”,“‘名称/值’ 对”之间使用“,”分隔。<br>示例：<code>var json = {“name”:”Jack”,”age”:90,”Marray”:true};</code></p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210116200948896.png#pic_center" alt="在这里插入图片描述"></p><p>数组是值（value）的有序集合。一个数组以“[”开始，“]”结束。值之间使用“,”分隔。<br>示例：<code>var json = [“Jack”,”Rose”,”Tom”,89,true,false];</code></p><h1 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h1><p>这只是JAVA实现的一种JSON包而已，还有其他的。JAVA本身是不能够解析JSON格式的，因此需要提前导入对应的JSON包。</p><h2 id="Java对象转JSON字符串-JSON对象"><a href="#Java对象转JSON字符串-JSON对象" class="headerlink" title="Java对象转JSON字符串/JSON对象"></a>Java对象转JSON字符串/JSON对象</h2><h3 id="JAVA中的Map格式"><a href="#JAVA中的Map格式" class="headerlink" title="JAVA中的Map格式"></a>JAVA中的Map格式</h3><ol><li>首先要将Map转化为<strong>JSONObject</strong>对象 <code>JSONObject jsonObject = (JSONObject) JSON.toJSON(map);</code> 注意<strong>需要强转</strong></li><li>可以通过<code>Object age = jsonObject.get(&quot;age&quot;);</code>通过键 获取对应的值</li><li>我们还可以网JSONObject中加入新的键值对 <code>jsonObject.put(&quot;hasSon&quot;,false);</code></li><li>`System.out.println(jsonObject.toJSONString());<pre><code>System.out.println(jsonObject);` 这两种其实是一样的，是方法的重写而已</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">map2JSON</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"Jack"</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>,<span class="number">90</span>);</span><br><span class="line">        map.put(<span class="string">"Marray"</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把一个JAVA对象转换成JSONObject</span></span><br><span class="line">        JSONObject jsonObject = (JSONObject) JSON.toJSON(map);</span><br><span class="line">        Object age = jsonObject.get(<span class="string">"age"</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        jsonObject.put(<span class="string">"hasSon"</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(jsonObject.toJSONString());</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JAVA中的List格式"><a href="#JAVA中的List格式" class="headerlink" title="JAVA中的List格式"></a>JAVA中的List格式</h3><p>List中存储的对象，这边是TxUser类。存储的是这个类的若干对象。</p><ol><li>/把集合转换成有序列表 使用的为<strong>JSONArray</strong>对象<pre><code>JSONArray jsonArray = (JSONArray) JSONArray.toJSON(list);  同样要注意**要强转**</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        List&lt;TxUser&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//        list.add("1");</span></span><br><span class="line"><span class="comment">//        list.add(2);</span></span><br><span class="line"><span class="comment">//        list.add(true);</span></span><br><span class="line"><span class="comment">//        list.add(8.8);</span></span><br><span class="line">        list.add(<span class="keyword">new</span> TxUser(<span class="string">"zhangsan"</span>,<span class="number">19</span>,<span class="number">1</span>,<span class="string">"北京海淀"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> TxUser(<span class="string">"liss"</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="string">"北京海淀"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把集合转换成有序列表</span></span><br><span class="line">        JSONArray jsonArray = (JSONArray) JSONArray.toJSON(list);</span><br><span class="line"><span class="comment">//        jsonArray.add("123456");</span></span><br><span class="line">        System.out.println(jsonArray);</span><br></pre></td></tr></table></figure><h3 id="JAVA中的JavaBean格式"><a href="#JAVA中的JavaBean格式" class="headerlink" title="JAVA中的JavaBean格式"></a>JAVA中的JavaBean格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bean2JSON</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">// 把JavaBean转换成JSONObject</span></span><br><span class="line">    JSONObject jsonObject = (JSONObject) JSON.toJSON(p);</span><br><span class="line">    System.out.println(jsonObject);</span><br><span class="line">    <span class="comment">//这种就是方法的重写</span></span><br><span class="line">    String jsonString = JSON.toJSONString(p);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON字符串-JSON对象转Java对象"><a href="#JSON字符串-JSON对象转Java对象" class="headerlink" title="JSON字符串/JSON对象转Java对象"></a>JSON字符串/JSON对象转Java对象</h2><h3 id="JAVA中的Map格式-1"><a href="#JAVA中的Map格式-1" class="headerlink" title="JAVA中的Map格式"></a>JAVA中的Map格式</h3><p>JSONObject 对象转换为 Map格式  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = JSON.parseObject(jsonString, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2Map</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"a"</span>,<span class="number">1</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"b"</span>,<span class="string">"bb"</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"c"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    JSONObject jsonObject = (JSONObject) JSON.toJSON(map);</span><br><span class="line">    Map&lt;String,Object&gt; map1 = JSON.parseObject(jsonString, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(map1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JAVA中的List格式-1"><a href="#JAVA中的List格式-1" class="headerlink" title="JAVA中的List格式"></a>JAVA中的List格式</h3><p>JSONArray 对象转换为 List格式  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = JSONArray.parseArray(jsonString, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    jsonArray.add(<span class="string">"a"</span>);</span><br><span class="line">    jsonArray.add(<span class="string">"b"</span>);</span><br><span class="line">    jsonArray.add(<span class="string">"c"</span>);</span><br><span class="line">    jsonArray.add(<span class="string">"d"</span>);</span><br><span class="line">    String jsonString = jsonArray.toJSONString();</span><br><span class="line">    List&lt;String&gt; list = JSONArray.parseArray(jsonString, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>JSONArray 对象转换为 List格式  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = JSONObject.parseObject(jsonString, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"id"</span>,<span class="number">1</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"birthday"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//变成字符串</span></span><br><span class="line">    String jsonString = jsonObject.toJSONString();</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">   </span><br><span class="line">    Person person = JSONObject.parseObject(jsonString, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JSON2ListInMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个map对象,模拟前台请求返回的数据</span></span><br><span class="line">    Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">"status"</span>,<span class="string">"success"</span>);</span><br><span class="line">    result.put(<span class="string">"code"</span>,<span class="string">"200"</span>);</span><br><span class="line">    List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">"李四"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">"王五"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="number">4</span>,<span class="string">"赵六"</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    result.put(<span class="string">"data"</span>,list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将map对象转换成JSON字符串</span></span><br><span class="line">    String jsonString = JSON.toJSONString(result);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对JSON字符串进行解析,获取Map对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接转换的话,data内的集合为JSONArray,集合内存储的为JSONObject</span></span><br><span class="line">    Map&lt;String,Object&gt; map = JSONObject.parseObject(jsonString, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把JSON字符串转换成JsonObject</span></span><br><span class="line">    JSONObject jsonObject = (JSONObject)JSONObject.parse(jsonString);</span><br><span class="line">    <span class="comment">// 获取JSONArray对象</span></span><br><span class="line">    JSONArray jsonArray = (JSONArray) jsonObject.get(<span class="string">"data"</span>);</span><br><span class="line">    <span class="comment">// 解析JSONArray对象获取Person集合</span></span><br><span class="line">    List&lt;Person&gt; array = JSONArray.parseArray(jsonArray.toJSONString(), Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 重新赋值到map</span></span><br><span class="line">    map.put(<span class="string">"data"</span>,array);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS操作JSON对象-熟悉"><a href="#JS操作JSON对象-熟悉" class="headerlink" title="JS操作JSON对象(熟悉)"></a>JS操作JSON对象(熟悉)</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line">    <span class="comment">// 创建一个数组并赋值</span></span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> Array();</span><br><span class="line">    list[<span class="number">0</span>] = <span class="string">"a"</span>;</span><br><span class="line">    list[<span class="number">1</span>] = <span class="string">"b"</span>;</span><br><span class="line">    list[<span class="number">2</span>] = <span class="string">"c"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个JSON对象并赋值</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">"id"</span>    :   <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>  :   <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"data"</span>  :   list,</span><br><span class="line">        <span class="string">"createDate"</span>    : <span class="keyword">new</span> Date()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台打印JSON对象</span></span><br><span class="line">    console.log(obj);</span><br><span class="line">    alert(obj.id);</span><br><span class="line">    alert(obj.name);</span><br><span class="line">    alert(obj.createDate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取JSON对象中的数组</span></span><br><span class="line">    <span class="keyword">var</span> data = obj.data;</span><br><span class="line">    alert(data);</span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">        alert(data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;JSON&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;JSON概述&quot;&gt;&lt;a href=&quot;#JSON概述&quot; class=&quot;headerlink&quot; title=&quot;JSON概述&quot;&gt;&lt;/a&gt;JSON概述&lt;/h1&gt;&lt;h2 id=&quot;JSON是干嘛的？&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>过滤器(Filter)与监听器(Listener)</title>
    <link href="http://yoursite.com/2021/01/15/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8(Listener)/"/>
    <id>http://yoursite.com/2021/01/15/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8(Listener)/</id>
    <published>2021-01-15T14:25:55.514Z</published>
    <updated>2021-01-15T14:26:02.792Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="过滤器与监听器">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>熟悉掌握过滤器的使用及生命周期</li><li>掌握过滤器的执行顺序和应用场景</li><li>了解监听器的概念及常用监听器</li><li>能够使用监听器完善在线人数统计的小例子</li></ul><h1 id="过滤器概述"><a href="#过滤器概述" class="headerlink" title="过滤器概述"></a>过滤器概述</h1><h2 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h2><blockquote><p>过滤器是JAVAWEB三大组件之一。<strong>用于拦截请求</strong>而不是处理请求，处理请求是Servlet做的。<br>当用户请求某个Servlet时，会先执行部署在这个请求上的Filter，若果Filter“放行”，那么会继续执行用户请求的Servlet；如果Filter不“放行”，那么就就此中断了。<br>话句话说，就是当用户请求某个Servlet时，TomCat会去执行注册在这个请求上的Filter，然后是否“放行”由Filter决定。可以理解为，<strong>Filter来决定是否调用Servlet</strong>。注意，<strong>当执行完成Servlet的代码后，还会继续执行Filter后面的代码</strong>。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114172023528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="构建过滤器步骤"><a href="#构建过滤器步骤" class="headerlink" title="构建过滤器步骤"></a>构建过滤器步骤</h2><p> 1.创建一个类，实现javax.servelt.Filter接口，并实现它的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过滤器被执行了 前"</span>);</span><br><span class="line">        <span class="comment">//表示对请求进行放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"过滤器被执行了 后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在web.xml中进行Filter配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    filter的声明</span></span><br><span class="line"><span class="comment">        指定filter的名称 filter-name</span></span><br><span class="line"><span class="comment">        指定filter的实现类 filter-class--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn_tx_Filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    filter的映射</span></span><br><span class="line"><span class="comment">        指定filter的名称</span></span><br><span class="line"><span class="comment">        要拦截的路径、用法和Servlet的url-pattern是一样的</span></span><br><span class="line"><span class="comment">        servlet-name 表示指向拦截的servlet 不建议这样使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url-pattern和Servlet的url-pattern的匹配规则一模一样</p><ul><li>完全路径匹配 以/开头 例如 /aaa /aaa/bbb</li><li>目录匹配 以/开头 例如 /aaa/* /*</li><li>扩展名匹配 <strong>不能以/开头</strong> 例如 <em>.do *.action ….<br>*</em>优先级： 完全路径匹配 &gt; 目录匹配 &gt; 扩展名匹配**</li></ul><p>当用户访问index.jsp页面时，会执行Filter中的<code>doFilter()</code>方法。而Filter必须要执行放行后，才能显示该页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示对请求进行放行</span></span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br></pre></td></tr></table></figure><h1 id="过滤器详解"><a href="#过滤器详解" class="headerlink" title="过滤器详解"></a>过滤器详解</h1><h2 id="过滤器的生命周期"><a href="#过滤器的生命周期" class="headerlink" title="过滤器的生命周期"></a>过滤器的生命周期</h2><ul><li><strong><code>init(FilterConfig)</code></strong>：从服务器启动时会<strong>创建Filter实例</strong>，并且<strong>每个类型的Filter只创建一个实例</strong>，从此不再创建。<strong>在创建完Filter实例后，会马上调用<code>init()</code>方法完成初始化工作</strong>，这个方法只会被<strong>执行一次</strong>。</li><li><strong><code>doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</code></strong>：会在用户每次访问“目标资源 web.xml下标签&lt; url-pattern &gt;对应的入口地址”时执行，如果需要“放行”，那么需要调用FilterChain的<strong><code>filterChain.doFilter(servletRequest,servletResponse)</code></strong>方法，如果不调用FilterChain的<code>doFilter()</code>方法，那么目标资源将无法被执行。</li><li><strong><code>destroy()</code></strong>：服务器会在创建Filter对象之后，把Filter对象放到缓存中一直使用，通常不会摧毁它。一般都是在TomCat服务器关了以后再销毁。<h2 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h2><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114172023528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果有两个过滤器（首先根据web.xml的定义配置前后顺序规定先后）</li><li>先执行Filter1的init()初始化，再执行Filter2()的初始化。</li><li>执行Filter1的doFilter()方法的前部分，读到开放通行，再执行Filter2的doFilter()方法的前部分</li><li>由于没有其他的过滤器了，继续执行Filter()的doFilter后部分</li><li>然后再回到Filter1的doFilter()的后部分<h2 id="过滤器应用场景（精通）"><a href="#过滤器应用场景（精通）" class="headerlink" title="过滤器应用场景（精通）"></a>过滤器应用场景（精通）</h2></li><li>执行目标资源之前做预处理工作，<strong>例如设置编码</strong>，这种试通常都会放行，只是在目标资源执行之前做一些准备工作；</li><li><strong>通过条件判断是否放行</strong>，例如校验当前用户是否已经登录，或者用户IP是否被禁用；</li><li>在目标资源执行后，做一些后续的特殊处理工作，例如把目标资源输出的数据进行处理；</li></ul><h2 id="过滤器设置目标资源（熟悉）"><a href="#过滤器设置目标资源（熟悉）" class="headerlink" title="过滤器设置目标资源（熟悉）"></a>过滤器设置目标资源（熟悉）</h2><p>在web.xml文件中部署Filter时，可以通过”*”来执行目标资源；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;FilterDemo3&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><p>这一特性与Servlet完全相同。因此，可以用来在用户访问敏感资源时，执行过滤器，例如：<code>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;</code>，可以把所有管理员才能访问的资源放到<code>/admin</code>路径下，这是可以通过过滤器来验证用户身份。<br>还可以为<code>&lt;filter-mapping&gt;</code>指定目标资源为某个Servlet，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;FilterServlet1&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn_tx_Servlet</span>.<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">FilterServlet1</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_Filter</span>.<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">FilterDemo3</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">FilterServlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户访问<a href="http://localhost:8080/项目路径/FilterServlet1，这时会执行对应的过滤器。" target="_blank" rel="noopener">http://localhost:8080/项目路径/FilterServlet1，这时会执行对应的过滤器。</a></p><h2 id="过滤器总结"><a href="#过滤器总结" class="headerlink" title="过滤器总结"></a>过滤器总结</h2><p>Filter的三个方法</p><ul><li><code>void init(FilterConfig filterConfig)</code>：在Tomcat启动时被调用</li><li><code>void doFilter(ServletRequest servletRequest,ServletResponse servletResponse, FilterChain filterChain)</code>：每次有请求都会调用该方法</li><li><code>void destroy()</code> ：在Tomcat关闭时被调用</li></ul><p>FilterConfig类：与ServletConfig相似，用来获取Filter的初始化参数</p><ul><li><p><code>ServletContext getServletContext()</code>：获取ServletContext的方法</p></li><li><p><code>String getFilterName()</code>：获取Filter的配置名称</p></li><li><p><code>String getInitParameter(String name)</code>：获取Filter的初始化配置，与web-xml的&lt; init-param &gt;标签元素对应</p></li><li><p><code>Enumeration getInitParameterNames()</code>：获取所有参数化参数的名称</p><p>FilterChain类</p></li><li><p><code>void doFilter(servletRequest,servletResponse)</code>：表示放行，执行下一个过滤器或者执行目标资源。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    String charset = filterConfig.getInitParameter(<span class="string">"charset"</span>);</span><br><span class="line">    System.out.println(charset);</span><br><span class="line">    Enumeration&lt;String&gt; names = filterConfig.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">        String name = names.nextElement();</span><br><span class="line">        String value = filterConfig.getInitParameter(name);</span><br><span class="line">        System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//FilterChain.doFilter 表示是放行,在该方法前的代码，我们称之为前置拦截</span></span><br><span class="line">    <span class="comment">//后面的代码，称之为后置拦截</span></span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器设置参数实现中文无乱码"><a href="#过滤器设置参数实现中文无乱码" class="headerlink" title="过滤器设置参数实现中文无乱码"></a>过滤器设置参数实现中文无乱码</h2><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    实现 改正乱码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn_tx_Filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn_tx_Servlet.EncodingServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodingServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/EncodingServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EncodingFilter.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String encode;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        encode = filterConfig.getInitParameter(<span class="string">"encode"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletResponse.setContentType(<span class="string">"text/html;charset="</span>+encode);</span><br><span class="line">        servletResponse.setCharacterEncoding(encode);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EncodingServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"测试中文乱码问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器 Listener"></a>监听器 Listener</h1><p><strong>比如用来统计某个网页同时在线的人数</strong></p><h2 id="监听器概述"><a href="#监听器概述" class="headerlink" title="监听器概述"></a>监听器概述</h2><p>在JAVAWEB被监听的事件源为：ServletContext、HttpSession、ServletRequest，即三大域对象</p><ul><li>监听域对象“创建”与“销毁”的监听器</li><li>监听域对象“操作域属性”的监听器</li><li>监听HttpSession的监听器</li></ul><p>创建Listener的步骤</p><ol><li>创建类实现 ServletContextListener类</li><li>联想打出对应的成员方法</li><li>web.xml 中 设置Listener标签</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn_tx_Listener.MyServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h2><p>ServletContextListener：<strong>Tomcat启动和关闭时</strong>调用下面两个方法：</p><ul><li><code>public void contextInitialized(ServletContextEvent sce)</code> ：ServletContext对象被创建后调用；</li><li><code>public void contextDestroyed(ServletContextEvent sce)</code>：ServletContext对象被销毁前调用；</li></ul><h2 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h2><p>HttpSessionListener：<strong>开始会话和结束时</strong>调用下面两个方法：</p><ul><li><code>public void sessionCreated(HttpSessionEvent se)</code> ：ServletContext对象被创建后调用；</li><li><code>public void sessionDestroyed(HttpSessionEvent se)</code>：ServletContext对象被销毁前调用；<h2 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h2>ServletRequestListener：开始请求和结束请求时调用下面两个方法</li><li><code>public void requestInitialized(ServletRequestEvent sre)</code> ：ServletContext对象被创建后调用；</li><li><code>public void requestDestroyed(ServletRequestEvent sre)</code>：ServletContext对象被销毁前调用；</li></ul><h2 id="监听器练习-在线人数"><a href="#监听器练习-在线人数" class="headerlink" title="监听器练习(在线人数)"></a>监听器练习(在线人数)</h2><p>一个现实人数的 jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;一只柴犬的网页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.getSession().setAttribute(<span class="string">"user"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h1&gt;当前在线人数:$&#123;online&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;a href="loginout.jsp"&gt;退出登录&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实现退出用户的jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户退出界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实现监听人数的 监听。 其实际就是通过ServletContext存储当前的访问数量，因为其是贯彻服务器始终的。每当有session对象存储时，表示有个人进来的，session对象被撤销时，表示有个人出去了。因此选择监听HttpSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span>, <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取到ServletContext对象</span></span><br><span class="line">        ServletContext context = sce.getServletContext();</span><br><span class="line">        <span class="comment">//把当前在线人数 初始化到ServletContext对象内</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext对象中 获取当前在线人数</span></span><br><span class="line">        Integer count = (Integer) context.getAttribute(<span class="string">"online"</span>);</span><br><span class="line">        <span class="comment">//把count+1 添加回ServletContext对象</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,++count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext对象中 获取当前在线人数</span></span><br><span class="line">        Integer count = (Integer) context.getAttribute(<span class="string">"online"</span>);</span><br><span class="line">        <span class="comment">//把count-1 添加回ServletContext对象</span></span><br><span class="line">        context.setAttribute(<span class="string">"online"</span>,--count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;过滤器与监听器&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;熟悉掌握过滤器的使用及生命周期&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EL表达式和JSTL标签库</title>
    <link href="http://yoursite.com/2021/01/14/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://yoursite.com/2021/01/14/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</id>
    <published>2021-01-14T14:56:45.629Z</published>
    <updated>2021-01-14T14:56:52.829Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="EL表达式和JSTL标签库">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>掌握EL表达式的运算，操作对象和内置对象的使用</li><li>掌握JSTL标签的核心标签库常用标签，并能使用JSTL格式化标签库处理相关格式化操作</li><li>了解JSTL函数库相关操作</li><li><strong>能够使用EL表达式和JSTL标签库完成一张用户表的增删改查</strong></li></ul><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><h2 id="EL表达式概述"><a href="#EL表达式概述" class="headerlink" title="EL表达式概述"></a>EL表达式概述</h2><blockquote><p>EL是一门表达式语言，它对应<code>&lt;%=...%&gt;</code>。在JSP中，表达式会被输出，所以EL表达式也会被输出<br>EL表达式的格式为：<code>${...}</code>，例如：<code>${1+2}</code><br>在使用EL表达式时，要求page指令的<code>isELIgnored</code>属性为false。这样JSP在编译成.java时，才不会忽视EL表达式。<br>如果想让EL表达式被JSP编译器忽略，那么可以<code>\${1+2}</code></p></blockquote><h2 id="EL表达式-1"><a href="#EL表达式-1" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>JSP是Servlet。通常编写的Servlet不需要输出HTML代码，而是转发到JSP页面。<br>换句话说就是，，Servlet不负责显示页面，显示页面这个功能由JSP来完成。而Servlet专注于控制层内容。</p><h2 id="EL表达式运算"><a href="#EL表达式运算" class="headerlink" title="EL表达式运算"></a>EL表达式运算</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114143231158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="EL表达式操作对象"><a href="#EL表达式操作对象" class="headerlink" title="EL表达式操作对象"></a>EL表达式操作对象</h2><ul><li>操作变量和常量 ：<code>${name}</code> 、<code>${8}</code> </li><li>操作List 和数组：<code>${list[0]}</code> 、<code>${arr[0]}</code> </li><li><strong>操作bean的属性：${person.name} 、${person[‘name’]} ，对应person.getName()方法</strong></li><li>操作Map的值：${map.key} 、${map[‘key’]} ，对应map.get(key)</li></ul><p>可以参考如下程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.Map"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.HashMap"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.List"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"EL.TxUser"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>EL表达式操作对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">name</span> =<span class="string">"txjava"</span>;</span></span><br><span class="line">    Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    map.put("akey","avalue");</span><br><span class="line">    map.put("bkey","bvalue");</span><br><span class="line">    map.put("ckey","cvalue");</span><br><span class="line">    List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    list.add(100);</span><br><span class="line">    list.add(200);</span><br><span class="line">    list.add(300);</span><br><span class="line"></span><br><span class="line">    TxUser txUser = new TxUser("柴犬",23);</span><br><span class="line">    //全域放入参数对象</span><br><span class="line">    pageContext.setAttribute("name",name);</span><br><span class="line">    pageContext.setAttribute("map",map);</span><br><span class="line">    pageContext.setAttribute("list",list);</span><br><span class="line">    pageContext.setAttribute("txUser",txUser);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取JAVA对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser['name']&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;txUser['age']&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取LIST对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;list[0]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;list[1]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;list[2]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>获取map对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;map.akey&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;map.get("akey")&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;map["akey"]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><h2 id="什么是内置对象（面试常问）"><a href="#什么是内置对象（面试常问）" class="headerlink" title="什么是内置对象（面试常问）"></a>什么是内置对象（面试常问）</h2><p>内置对象是JSP页面中无需创建就可以直接使用的变量。在JSP中一共有9个这样的对象！他们分别是：</p><ul><li><p>out(JspWriter) 最常用的方法是print()，向页面输出！它与response.getWriter()基本相同</p></li><li><p>config(ServletConfig) 在页面中基本没有用</p></li><li><p>page(当前JSP的真身类型) 基本没用。表示当前JSP页面的当前实例！在页面中使用this和使用page是相同的</p></li><li><p><strong>pageContext</strong>(PageContext) <strong>非常有用</strong></p></li><li><p>exception(Throwable) 类型为Throwable。它只能在错误页中可以使用</p></li><li><p><strong>request</strong>(HttpServletRequest) 与Servlet中的request一样，没有区别</p></li><li><p><strong>response</strong>(HttpServletResponse) 与Servlet中的response一样，没有区别</p></li><li><p><strong>application</strong>(ServletContext) 就是ServletContext的对象</p></li><li><p><strong>Session</strong>(HttpSession) 就是HttpSession对象</p><p>JSPdemo1.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内置对象测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">.out</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">out.print</span>("这是<span class="attr">JSP</span>内置对象的测试页面");</span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">response</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">response.getWriter</span>()<span class="attr">.write</span>("这是<span class="attr">response</span>打印的内容");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>request获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=request.getAttribute("rkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>session获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=session.getAttribute("skey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>application获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=application.getAttribute("ckey")%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而对应的Servlet 基于HttpServlet</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向request存入内容</span></span><br><span class="line">req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue1"</span>);</span><br><span class="line"><span class="comment">//向session中存入内容</span></span><br><span class="line">req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue2"</span>);</span><br><span class="line"><span class="comment">//向servletcontext存入内容</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue3"</span>);</span><br><span class="line"><span class="comment">//页面跳转-请求转发</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"JSPdemo1.jsp"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><h2 id="EL表达式内置对象"><a href="#EL表达式内置对象" class="headerlink" title="EL表达式内置对象"></a>EL表达式内置对象</h2><p>在EL表达式中，无需创建就可以使用的对象称之为EL隐藏（隐含、内置）对象。在EL中一共有11个隐藏对象，它们都与Map相似。其中10个是Map，一个是PageContext；</p><h3 id="参数隐藏对象"><a href="#参数隐藏对象" class="headerlink" title="参数隐藏对象"></a>参数隐藏对象</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL隐藏对象测试页1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"cname"</span>,<span class="string">"yuxue"</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;%--    从url内可传参或者表单上传,例如username的<span class="number">3</span>种方式--%&gt;</span><br><span class="line">    $&#123;param.username&#125;</span><br><span class="line">    $&#123;param.get(<span class="string">"username"</span>)&#125;</span><br><span class="line">    $&#123;param[<span class="string">'username'</span>]&#125;</span><br><span class="line">    &lt;p&gt;|$&#123;param.password&#125;|&lt;/p&gt;</span><br><span class="line">&lt;%--    从url内可传参或者表单上传 多参形式--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;paramValues.like[0]&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;paramValues.like[1]&#125;&lt;/p&gt;</span><br><span class="line">&lt;%--    获取请求头信息 两种方式--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;header.HOST&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;header.get("HOST")&#125;&lt;/p&gt;</span><br><span class="line">&lt;%--    获取初始化参数 两种方式--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;initParam.get("user")&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;initParam.user&#125;&lt;/p&gt;</span><br><span class="line">&lt;%--    获取cookie的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;cookie.cname.name&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;$&#123;cookie.cname.value&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="域隐藏对象（精通）"><a href="#域隐藏对象（精通）" class="headerlink" title="域隐藏对象（精通）"></a>域隐藏对象（精通）</h3><p>当EL中给出不是隐藏对象时，表示在四个域中查找数据。例如：${a}. 查找的优先级顺序为顺序依次为page、request、session、application<br>Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue"</span>);</span><br><span class="line">req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue"</span>);</span><br><span class="line">getServletContext().setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue"</span>);</span><br><span class="line">req.getRequestDispatcher(<span class="string">"EL4.jsp"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL隐藏对象测试页2&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">"pkey"</span>,<span class="string">"pvalue"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%--获取pageContext的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;pageContext.pkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取request的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;requestScope.rkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取session的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;sessionScope.skey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取application的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;applicationScope.ckey&#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &lt;%--获取pageContext的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;pkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取request的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;rkey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取session的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;skey&#125;&lt;/p&gt;</span><br><span class="line">    &lt;%--获取application的值--%&gt;</span><br><span class="line">    &lt;p&gt;$&#123;ckey&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="PageContext对象的一些方法"><a href="#PageContext对象的一些方法" class="headerlink" title="PageContext对象的一些方法"></a>PageContext对象的一些方法</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114164239239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="JSTL标签（精通）"><a href="#JSTL标签（精通）" class="headerlink" title="JSTL标签（精通）"></a>JSTL标签（精通）</h1><h2 id="JSTL概述"><a href="#JSTL概述" class="headerlink" title="JSTL概述"></a>JSTL概述</h2><h3 id="JSTL是什么"><a href="#JSTL是什么" class="headerlink" title="JSTL是什么"></a>JSTL是什么</h3><p>JSP标准标记库是一个实现Web应用程序中常见的通用功能的定制标记库集。这些功能包括迭代和条件判断、数据管理格式化、XML操作以及<strong>数据库访问</strong>。</p><h3 id="导入标签库"><a href="#导入标签库" class="headerlink" title="导入标签库"></a>导入标签库</h3><p>JSTL是第三方的，所以要导包。<br>导包后，在jsp文件头部，联想写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br></pre></td></tr></table></figure><p>并且要在WEB-INF下新建一个文件夹lib，并把原来的两个jar包放入。</p><h2 id="JSTL核心库（要非常熟）"><a href="#JSTL核心库（要非常熟）" class="headerlink" title="JSTL核心库（要非常熟）"></a>JSTL核心库（要非常熟）</h2><h3 id="c-out和c-set"><a href="#c-out和c-set" class="headerlink" title="c:out和c:set"></a>c:out和c:set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"key"</span>,<span class="string">"&lt;h4&gt;啦啦啦&lt;/h4&gt;"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;c:out&lt;/h3&gt;</span><br><span class="line">&lt;%--    c：out标签，表示在页面输出内容--%&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"1"</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">&lt;%--    <span class="keyword">default</span>属性表示该内容如果为空 则替换为<span class="keyword">default</span>所设置的值--%&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;pageScope.username&#125;"</span> <span class="keyword">default</span>=<span class="string">"空的"</span> /&gt;</span><br><span class="line">&lt;%--    escapeXml表示是否忽略xml的标签，默认为<span class="keyword">true</span>表示忽略，不建议设置为<span class="keyword">false</span>--%&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;pageScope.key&#125;"</span> <span class="keyword">default</span>=<span class="string">"空的"</span> escapeXml=<span class="string">"false"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;c:set&lt;/h3&gt;</span><br><span class="line">&lt;%--  value表示值  <span class="keyword">var</span>表示变量名称 其默认存在page中 不在其他<span class="number">3</span>个域内 --%&gt;</span><br><span class="line">    &lt;c:set value=<span class="string">"yuxue"</span> <span class="keyword">var</span>=<span class="string">"ckey"</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;ckey&#125;"</span>/&gt;</span><br><span class="line">&lt;%--如果我想存在其他域内可以通过scope 设置--%&gt;</span><br><span class="line">    &lt;c:set value=<span class="string">"yuxue1"</span> <span class="keyword">var</span>=<span class="string">"skey"</span> scope=<span class="string">"session"</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;sessionScope.skey&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="c-if和c-choose"><a href="#c-if和c-choose" class="headerlink" title="c:if和c:choose"></a>c:if和c:choose</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;h3&gt;c:if&lt;/h3&gt;</span><br><span class="line">    &lt;c:set <span class="keyword">var</span>=<span class="string">"str"</span> value=<span class="string">"hello"</span>/&gt;</span><br><span class="line">&lt;%--    cif标签表示 判断等式是否成立，如果成立则执行cif标签内的内容</span><br><span class="line">        test属性 必须为一个<span class="keyword">boolean</span>类型--%&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;not empty str&#125;"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;str&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;c:choose&lt;/h3&gt;</span><br><span class="line">    &lt;c:set <span class="keyword">var</span>=<span class="string">"score"</span> value=<span class="string">"90"</span>/&gt;</span><br><span class="line">&lt;%--    choose表示 多重判断</span><br><span class="line">        c:when表示判断该等式是否成立，如成立则不向下进行计算</span><br><span class="line">        c:otherwise表示<span class="keyword">else</span> 当上面所有等式均不成立的情况下，则执行otherwise内的内容。--%&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=90&#125;"&gt;A级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=80&#125;"&gt;B级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=70&#125;"&gt;C级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test="$&#123;score&gt;=60&#125;"&gt;D级&lt;/c:when&gt;</span><br><span class="line">        &lt;c:otherwise&gt;E级&lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h3 id="c-forEach"><a href="#c-forEach" class="headerlink" title="c:forEach"></a>c:forEach</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">   &lt;%</span><br><span class="line">        String[] strs = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">        pageContext.setAttribute(<span class="string">"strs"</span>,strs);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="number">300</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"yuxue"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">        map.put(<span class="string">"chunxia"</span>,<span class="string">"liyuan"</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"map"</span>,map);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;c:forEach&lt;/h3&gt;</span><br><span class="line">&lt;%--    c:forEach 表示循环</span><br><span class="line">        begin 表示从哪里开始</span><br><span class="line">        end 表示从哪里结束</span><br><span class="line">        <span class="keyword">var</span> 表示从循环中的变量--%&gt;</span><br><span class="line">    &lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> <span class="keyword">var</span>=<span class="string">"num"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;num&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--    遍历数组</span><br><span class="line">        items 表示要遍历哪个数组--%&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;strs&#125;"</span> <span class="keyword">var</span>=<span class="string">"str"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;str&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--    遍历集合</span><br><span class="line">            items 表示要遍历哪个数组--%&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"i"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;i&#125;"</span>/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--    遍历map</span><br><span class="line">        取map的key 需要使用.key进行获取</span><br><span class="line">        取map的value 需要使用.value进行获取--%&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;map&#125;"</span> <span class="keyword">var</span>=<span class="string">"m"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"$&#123;m.key&#125;"</span>/&gt;：&lt;c:out value=<span class="string">"$&#123;m.value&#125;"</span>/&gt;&lt;br&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        List&lt;TxUser&gt; txUsers =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"李远"</span>,<span class="number">72</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"柴犬"</span>,<span class="number">65</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"哈士奇"</span>,<span class="number">90</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"柯基"</span>,<span class="number">105</span>));</span><br><span class="line">        txUsers.add(<span class="keyword">new</span> TxUser(<span class="string">"总分"</span>,<span class="number">332</span>));</span><br><span class="line">        pageContext.setAttribute(<span class="string">"users"</span>,txUsers);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;c:forEach&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table border=<span class="string">"1"</span> cellpadding=<span class="string">"0"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;分数年龄&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;step&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;end&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;begin&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;current&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;last&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;first&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;count&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;index&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">&lt;%--            step 表示步數 一步循环跳过几个元素</span><br><span class="line">                varStatus 表示循环状态--%&gt;</span><br><span class="line">            &lt;c:forEach items=<span class="string">"$&#123;users&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;user.name&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;user.age&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.step&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.end&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.begin&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.current&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.last&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.first&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.count&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:out value="$&#123;vs.index&#125;"/&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">        &lt;/table&gt;</span><br></pre></td></tr></table></figure><h2 id="JSTL格式化标签库"><a href="#JSTL格式化标签库" class="headerlink" title="JSTL格式化标签库"></a>JSTL格式化标签库</h2><p>JSTL是第三方的，所以要导包。<br>导包后，在jsp文件头部，联想写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br></pre></td></tr></table></figure><p>并且要在WEB-INF下新建一个文件夹lib，并把原来的两个jar包放入。</p><h3 id="fmt-formatDate"><a href="#fmt-formatDate" class="headerlink" title="fmt:formatDate"></a>fmt:formatDate</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114222507952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    &lt;%</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        pageContext.setAttribute(<span class="string">"date1"</span>,now);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;fmt&lt;/h3&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;now&#125;"</span>/&gt;&lt;br&gt;</span><br><span class="line">    &lt;fmt:formatDate value=<span class="string">"$&#123;date1&#125;"</span> pattern=<span class="string">"yyyy-MM-dd"</span>/&gt;</span><br><span class="line">    &lt;fmt:formatDate value=<span class="string">"$&#123;date1&#125;"</span> pattern=<span class="string">"yyyy-MM-dd hh:mm:ss"</span>/&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(1):&lt;fmt:formatDate type="time" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(2):&lt;fmt:formatDate type="date" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(3):&lt;fmt:formatDate type="both" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(4):&lt;fmt:formatDate type="both" dateStyle="short" timeStyle="short" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(5):&lt;fmt:formatDate type="both" dateStyle="medium" timeStyle="medium" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(6):&lt;fmt:formatDate type="both" dateStyle="long" timeStyle="long" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;日期格式化(7):&lt;fmt:formatDate pattern="yyyy-MM-dd" value="$&#123;date1&#125;"/&gt; &lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="fmt-formatNumber"><a href="#fmt-formatNumber" class="headerlink" title="fmt:formatNumber"></a>fmt:formatNumber</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210114222707192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">123.456</span>;</span><br><span class="line">    pageContext.setAttribute(<span class="string">"num1"</span>,num);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;数字格式化(1):&lt;fmt:formatNumber  value="$&#123;num1&#125;" type="currency"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(2):&lt;fmt:formatNumber type="number" maxIntegerDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(3):&lt;fmt:formatNumber type="number" maxFractionDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(4):&lt;fmt:formatNumber type="number" groupingUsed="false" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(5):&lt;fmt:formatNumber type="percent" maxIntegerDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(6):&lt;fmt:formatNumber type="percent"  minFractionDigits="10" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(7):&lt;fmt:formatNumber type="percent" maxIntegerDigits="3" value="$&#123;num1&#125;"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(8):&lt;fmt:formatNumber type="number"  value="$&#123;num1&#125;" pattern="0.00‰"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;数字格式化(9):&lt;fmt:formatNumber type="number"  value="$&#123;num1&#125;" pattern="0.00%"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;fmt:setLocale value=<span class="string">"en_US"</span>/&gt;</span><br><span class="line">    &lt;fmt:formatNumber value=<span class="string">"$&#123;num1&#125;"</span> type=<span class="string">"currency"</span>/&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="fmt-parseNumber"><a href="#fmt-parseNumber" class="headerlink" title="fmt:parseNumber"></a>fmt:parseNumber</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">double</span> jks = <span class="number">123.456</span>;</span><br><span class="line">    pageContext.setAttribute(<span class="string">"jks"</span>,jks);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;fmt:parseNumber <span class="keyword">var</span>=<span class="string">"i"</span> type=<span class="string">"number"</span> value=<span class="string">"$&#123;num1&#125;"</span>/&gt;</span><br><span class="line">&lt;p&gt;数字解析(1):&lt;c:out value="$&#123;i&#125;"/&gt;&lt;/p&gt;</span><br><span class="line">&lt;fmt:parseNumber <span class="keyword">var</span>=<span class="string">"i"</span> integerOnly=<span class="string">"true"</span> type=<span class="string">"number"</span> value=<span class="string">"$&#123;num1&#125;"</span>/&gt;</span><br><span class="line">&lt;p&gt;数字解析(2):&lt;c:out value="$&#123;i&#125;"/&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="JSTL函数库-用的不多"><a href="#JSTL函数库-用的不多" class="headerlink" title="JSTL函数库(用的不多)"></a>JSTL函数库(用的不多)</h2><h3 id="什么是EL函数库"><a href="#什么是EL函数库" class="headerlink" title="什么是EL函数库"></a>什么是EL函数库</h3><p>EL函数库是由第三方对EL的扩展，其是由JSTL添加的。其定义一些有返回值的静态方法。然后通过EL语言来调用他们！当然，不只是JSTL可以定义EL函数库，自己也是可以定义的。<br>EL函数库包含了很多对字符串的操作方法，以及对集合对象的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;EL表达式和JSTL标签库&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;掌握EL表达式的运算，操作对象和
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="http://yoursite.com/2021/01/14/JSP/"/>
    <id>http://yoursite.com/2021/01/14/JSP/</id>
    <published>2021-01-13T16:20:55.219Z</published>
    <updated>2021-01-13T16:21:02.353Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JSP">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>掌握jsp的本质，并熟悉使用JSP相关语法。<strong>能够使用JAVA代码和html拼装成完整页面</strong></li><li><strong>熟练掌握JSP常用内置对象</strong> 9个</li><li><strong>JSP四个域对象倒背如流，并知晓每个对象的作用</strong></li><li><strong>熟练掌握JSP指令，能解决JSP页面中文乱码问题</strong></li><li><strong>了解JSP动态标签，知晓其含义并能够使用</strong></li></ul><h1 id="JSP概述"><a href="#JSP概述" class="headerlink" title="JSP概述"></a>JSP概述</h1><h2 id="什么是JSP（Java-Server-page）"><a href="#什么是JSP（Java-Server-page）" class="headerlink" title="什么是JSP（Java Server page）"></a>什么是JSP（Java Server page）</h2><p>html+java代码+JSP动态标签 =jsp<br>在静态页面上添加动态信息。<br><strong>简单的说就是就是在前端页面上添加Servlet的代码。</strong></p><blockquote><p>当客户请求的为JSP页面时，服务器会查看JSP对应的Servlet是否存在，如果存在，那么直接调用Servlet的service()方法来处理请求。如果不存在，那么服务器会先把<strong>JSP编译成.java，再把.java编译成.class</strong>。<strong>然后调用service()方法。</strong><br>当这个JSP页面，第二次处理请求时，就会直接调用自身的service()方法</p></blockquote><h2 id="JSP和Servlet有啥不同"><a href="#JSP和Servlet有啥不同" class="headerlink" title="JSP和Servlet有啥不同"></a>JSP和Servlet有啥不同</h2><p>JSP是Servlet。通常编写的Servlet不需要输出HTML代码，而是转发到JSP页面。<br>换句话说就是，，Servlet不负责显示页面，显示页面这个功能由JSP来完成。而Servlet专注于控制层内容。</p><h2 id="JSP的注释"><a href="#JSP的注释" class="headerlink" title="JSP的注释"></a>JSP的注释</h2><p>语法:<code>&lt;%----%&gt;</code><br>其中JSP只有如上一种注释，注释的内容会被JSP编译系统忽略。<br>Html注释和jsp注释二者的区别</p><ul><li><code>&lt;!----!&gt;</code>：Tomcat不把它当注释，和其他东西一样，会发送到客户端。但浏览器不会显示它，因为浏览器知道它是注释。</li><li><code>&lt;%----%&gt;</code>：Tomcat在生成“真身”时，就会忽略它，因为Tomcat认识它，知道它是注释。所以在“真身”中就没有它，也不会发现到客户端，也就是说，客户端永远看不到他。</li></ul><h1 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h1><h2 id="什么是内置对象（面试常问）"><a href="#什么是内置对象（面试常问）" class="headerlink" title="什么是内置对象（面试常问）"></a>什么是内置对象（面试常问）</h2><p>内置对象是JSP页面中无需创建就可以直接使用的变量。在JSP中一共有9个这样的对象！他们分别是：</p><ul><li><p>out(JspWriter) 最常用的方法是print()，向页面输出！它与response.getWriter()基本相同</p></li><li><p>config(ServletConfig) 在页面中基本没有用</p></li><li><p>page(当前JSP的真身类型) 基本没用。表示当前JSP页面的当前实例！在页面中使用this和使用page是相同的</p></li><li><p><strong>pageContext</strong>(PageContext) <strong>非常有用</strong></p></li><li><p>exception(Throwable) 类型为Throwable。它只能在错误页中可以使用</p></li><li><p><strong>request</strong>(HttpServletRequest) 与Servlet中的request一样，没有区别</p></li><li><p><strong>response</strong>(HttpServletResponse) 与Servlet中的response一样，没有区别</p></li><li><p><strong>application</strong>(ServletContext) 就是ServletContext的对象</p></li><li><p><strong>Session</strong>(HttpSession) 就是HttpSession对象</p><p>JSPdemo1.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内置对象测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">.out</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">out.print</span>("这是<span class="attr">JSP</span>内置对象的测试页面");</span></span><br><span class="line"><span class="tag">        //内置对象<span class="attr">response</span>的使用</span></span><br><span class="line"><span class="tag">        <span class="attr">response.getWriter</span>()<span class="attr">.write</span>("这是<span class="attr">response</span>打印的内容");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>request获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=request.getAttribute("rkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>session获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=session.getAttribute("skey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>application获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=application.getAttribute("ckey")%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而对应的Servlet 基于HttpServlet</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向request存入内容</span></span><br><span class="line">req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue1"</span>);</span><br><span class="line"><span class="comment">//向session中存入内容</span></span><br><span class="line">req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue2"</span>);</span><br><span class="line"><span class="comment">//向servletcontext存入内容</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue3"</span>);</span><br><span class="line"><span class="comment">//页面跳转-请求转发</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"JSPdemo1.jsp"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><h2 id="JSP四个域对象"><a href="#JSP四个域对象" class="headerlink" title="JSP四个域对象"></a>JSP四个域对象</h2><h3 id="域的范围和属性管理"><a href="#域的范围和属性管理" class="headerlink" title="域的范围和属性管理"></a>域的范围和属性管理</h3><ul><li><p>pageContext 范围：当前页面之内有效</p></li><li><p>request 范围：当前的请求内有效</p></li><li><p>session 范围：当前的会话内有效</p></li><li><p>application 范围：当前这次服务器生命周期内有效</p><p>域对象的共同特地是都管理域中的属性，他们有着相同的方法</p></li><li><p><code>void setAttribute(String name,Object value)</code></p></li><li><p><code>Object getAttribute(String name,Object value)</code></p></li><li><p><code>void removeAttribute(String name,Object value)</code></p></li></ul><p>Servlet端 存入数据，请求跳转到前端jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//向request存入内容</span></span><br><span class="line">    req.setAttribute(<span class="string">"rkey"</span>,<span class="string">"rvalue1"</span>);</span><br><span class="line">    <span class="comment">//向session中存入内容</span></span><br><span class="line">    req.getSession().setAttribute(<span class="string">"skey"</span>,<span class="string">"svalue2"</span>);</span><br><span class="line">    <span class="comment">//向servletcontext存入内容</span></span><br><span class="line">    ServletContext context = getServletContext();</span><br><span class="line">    context.setAttribute(<span class="string">"ckey"</span>,<span class="string">"cvalue3"</span>);</span><br><span class="line">    <span class="comment">//页面跳转-请求转发</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">"JSPdemo1.jsp"</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSPdemo1.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>域对象测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //向<span class="attr">pageContext</span>内存入内容</span></span><br><span class="line"><span class="tag">        <span class="attr">pageContext.setAttribute</span>("<span class="attr">pkey</span>","<span class="attr">pvalue2</span>");</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>pageContext<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=pageContext.getAttribute("pkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>request获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=request.getAttribute("rkey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>session获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=session.getAttribute("skey")%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>application获取内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=application.getAttribute("ckey")%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pageContext基本可以实现所有的参数获取。<br>用<code>Object findAttribute(String name)</code> 可以再所有范围内查找数据，顺序依次为page、request、session、application。如果前一个范围内查找到数据，那么就直接返回，不会继续查找</strong></p><h1 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h1><h2 id="什么是JSP指令"><a href="#什么是JSP指令" class="headerlink" title="什么是JSP指令"></a>什么是JSP指令</h2><p>JSP指令的格式为<code>&lt;%@指令名attr1=&quot;&quot;  attr2=&quot;&quot; %&gt;</code>一般都会把JSP指令放到JSP文件的最上面，但不是必须的。<br>其实创建的时候就已经自动生成了设定编码的JSP指令<code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code><br>JSP的三大指令分别为：page、include、taglib，最为常用，也最为复杂的是page指令</p><h2 id="page指令的errorPage和isErrorPage"><a href="#page指令的errorPage和isErrorPage" class="headerlink" title="page指令的errorPage和isErrorPage"></a>page指令的errorPage和isErrorPage</h2><p>其就是为了当出现一些特定错误的时候，页面跳转到对应的错误页面。并且使用之前的exception(Throwable) 显示错误信息。不过要提前设定<code>&lt;%@ page isErrorPage=&quot;true&quot; %&gt;</code></p><p>出错JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page errorPage=<span class="string">"error.jsp"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b=a/<span class="number">0</span>;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>跳转的错误显示页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isErrorPage=<span class="string">"true"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;这是一个错误页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;这是错误页面，你的页面出现了问题，错误内容如下：&lt;/h1&gt;</span><br><span class="line">    &lt;%=exception.getMessage()%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>同时可以在web.xml中设置 跳转到对应的错误项。如下为出现404错误，跳转到的error,jsp中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">    &lt;location&gt;/error.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><h2 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h2><p>include指令的意思是静态包含。其指令只有一个属性：file，指定要包含的页面，例如：<code>&lt;%@ include file=&quot;JPSdemo3.jsp&quot;%&gt;</code>  放在<code>&lt;body&gt;</code>标签中。</p><blockquote><p>静态包含：当1.jsp页面包好2.jsp页面后，在编译1.jsp页面时，需要把1.jsp与2.jsp页面合并成一个文件，然后再编译成Servlet(JAVA文件)</p></blockquote><h2 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h2><p>在JSP页面中使用第三方的标签库时，需要使用taglib指令来“导包”。放在开头例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jst1/core"</span> %&gt;</span><br></pre></td></tr></table></figure><ul><li>prefix表示标签的前端，这个名字可以随便起</li><li>uri是由第三方标签库定义的，所以需要第三方定义的uri</li></ul><p>这是响应工作的一部分，所以这个方法是response对象的。并且<strong>Cookie是HTTP协议中的内容</strong>，所以<strong>保存Cookie是HttpServletResponse类的方法</strong>。</p><h1 id="JSP动态标签（了解即可）"><a href="#JSP动态标签（了解即可）" class="headerlink" title="JSP动态标签（了解即可）"></a>JSP动态标签（了解即可）</h1><h2 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h2><p>include标签是动态包含，与include指令不同，include标签与<code>RequestDispatcher.include()</code>方法的功能是相同的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSPA<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--动态</span> 这么跳转即可<span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"JPSdemo3.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="forward标签"><a href="#forward标签" class="headerlink" title="forward标签"></a>forward标签</h2><p>相当于跳转，不过最后地址栏还是源地址。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;JSPA&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--去显示JPSdemo3.jsp中的内容--%&gt;</span><br><span class="line">&lt;jsp:forward page="JPSdemo3.jsp"&gt;&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;JSP&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;掌握jsp的本质，并熟悉使用JSP相关语法。&lt;str
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>会话对象 Session and Cookie</title>
    <link href="http://yoursite.com/2021/01/13/%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1%20Session%20and%20Cookie/"/>
    <id>http://yoursite.com/2021/01/13/%E4%BC%9A%E8%AF%9D%E5%AF%B9%E8%B1%A1%20Session%20and%20Cookie/</id>
    <published>2021-01-13T11:28:03.179Z</published>
    <updated>2021-01-13T11:28:10.355Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC](会话对象<br>Session and Cookie )</p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>熟练掌握Cookie的概念,使用,及生命周期;</li><li>能够使用Cookie存储中文并了解Cookie的路径作用;</li><li>掌握Session的原理及使用方法;</li><li><strong>能够详细说明Cookie和Session的区别;</strong></li><li><strong>能够独立完成自动登陆</strong></li></ul><h1 id="Cookie概述-熟练"><a href="#Cookie概述-熟练" class="headerlink" title="Cookie概述(熟练)"></a>Cookie概述(熟练)</h1><h2 id="什么叫Cookie"><a href="#什么叫Cookie" class="headerlink" title="什么叫Cookie"></a>什么叫Cookie</h2><p>Cookie翻译成中文是小甜点，小饼干的意思。<strong>在HTTP中它表示服务器送给客户端浏览器的小甜点。</strong>其实Cookie就是一个键和一个值构成的，<strong>随着服务器端的响应发送给客户端浏览器</strong>。<strong>然后客户端浏览器会把Cookie保存起来，<em>当下一次再访问服务器时把Cookie再发送给服务器</em>。</strong><br>不同的浏览器不共享Cookie</p><h2 id="Cookie的作用"><a href="#Cookie的作用" class="headerlink" title="Cookie的作用"></a>Cookie的作用</h2><p>Cookie的作用可大了，但无论怎么夸大Cookie的作用都离不开“<strong>跟踪客户端状态</strong>”这句话。</p><ol><li>Cookie是服务器保存在客户端的信息</li><li>然后客户端会在下次请求时把Cookie在还给服务器</li><li>服务器就可以通过信息来识别客户端了<h1 id="Cookie示例-精通"><a href="#Cookie示例-精通" class="headerlink" title="Cookie示例(精通)"></a>Cookie示例(精通)</h1><h2 id="保存Cookie到客户端"><a href="#保存Cookie到客户端" class="headerlink" title="保存Cookie到客户端"></a>保存Cookie到客户端</h2>这是响应工作的一部分，所以这个方法是response对象的。并且<strong>Cookie是HTTP协议中的内容</strong>，所以<strong>保存Cookie是HttpServletResponse类的方法</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Cookie</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line"><span class="comment">//把cookie添加到响应对象内</span></span><br><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>访问路径后，可以在请求的响应头中看到所存入的cookie<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112151657647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到Response Headers 中 Set-Cookie 中存入了刚才我们放的cookie信息。同样根据浏览器的开发者工具我们可以看到<code>http://localhost:8080</code>的网址的cookie中被加入了username=chaiquan的信息:</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112151923827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注意：</strong></p><ul><li>不同次的存入cookie，因为键是唯一的，相同键的值会被覆盖。同一时间只能够存在唯一的一对键值对。</li><li>同时后续请求，请求头都会带上存储的Cookie<h2 id="服务器端读取Cookie"><a href="#服务器端读取Cookie" class="headerlink" title="服务器端读取Cookie"></a>服务器端读取Cookie</h2>如果浏览器保存了Cookie，那么会在下一次请求时把Cookie放到<strong>请求头</strong>中发送给服务器，这时服务器需要<strong>在请求中读取Cookie</strong>。既然是<strong>在请求中读取</strong>，那么当然是<strong>使用request对象</strong>来读取了。<br>循环遍历Cookie 的每一条键值对 cookie 取键与取值的方法为</li><li>取键 cookie.getName();</li><li>取值 cookie.getValue();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="comment">//输出所有的键值对</span></span><br><span class="line">        System.out.println(cookie.getName() +<span class="string">":"</span>+ cookie.getValue());</span><br><span class="line">        <span class="comment">//去对应键的值</span></span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"username"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"输出username的值"</span>);</span><br><span class="line">            System.out.println(cookie.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cookie生命周期-熟练"><a href="#Cookie生命周期-熟练" class="headerlink" title="Cookie生命周期(熟练)"></a>Cookie生命周期(熟练)</h1><p>Cookie会在客户端存活多久呢？这就是Cookie的生命了。<strong>默认情况下，Cookie只在浏览器的内存中存活</strong>，也就是说，<strong>当你关闭浏览器后，Cookie就会消失</strong>！<br>可以使用<code>Cookie#setMaxAge(int expiry)</code>来设置Cookie的存活时间。<strong>参数expiry表示Cookie存活的秒数</strong>。</p><ul><li>cookie.setMaxAge(60*60)：表示cookie对象可存活1小时。就算关闭浏览器，就算重启客户端电脑，cookie也会存活1小时。因为当maxAge大于0时，浏览器不仅会把cookie保存在浏览器内存中，还会把cookie保存到硬盘上。</li><li>cookie.setMaxAge(-1)：cookie的maxAge属性的默认值就是-1（其实只要是负数都是一个意思），表示只在浏览器内存中存活。一旦关闭浏览器窗口，那么cookie就会消失。</li><li>cookie.setMaxAge(0)：cookie被作废！表示cookie即不在内存中存活，也不在硬盘上存活，这<strong>样的cookie设置只有一个目的，那就是覆盖客户端原来的这个cookie，使其作废</strong>。<h1 id="Cookie的路径-不常用"><a href="#Cookie的路径-不常用" class="headerlink" title="Cookie的路径(不常用)"></a>Cookie的路径(不常用)</h1><h2 id="Cookie的path属性"><a href="#Cookie的path属性" class="headerlink" title="Cookie的path属性"></a>Cookie的path属性</h2>Cookie还有一个path属性，可以通过Cookie#setPath(String)方法来设置。这个路径就是请求的路径。例如在请求:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/cookie_demo/path</span><br></pre></td></tr></table></figure><p>服务器响应了一个Cookie，那么这个Cookie的默认路径是/cookie_demo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/cookie_demo/path/son</span><br></pre></td></tr></table></figure><p>服务器响应了一个Cookie，那么这个Cookie的默认路径就是/cookie_demo/path。<br>其可以在浏览器当中查看。例如谷歌浏览器：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112185659870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Cookie-路径的作用"><a href="#Cookie-路径的作用" class="headerlink" title="Cookie 路径的作用:"></a>Cookie 路径的作用:</h2><ul><li><p>首先声明一点，path不是指Cookie在客户端存放的路径！！！不同的浏览器存放Cookie的路径是不同的！！！你不能通过Cookie的path来指定Cookie文件的存放路径！！！</p><p>假设你的浏览器当前已经有了两个Cookie：</p></li></ul><ul><li>cookie1:name=path1;value=pathvalue1;path=/cookie_demo</li><li>cookie2:name=path1;value=pathvalue2;path=/cookie_demo/path</li></ul><p>区别在于</p><ul><li>当访问<a href="http://localhost:8080/cookie_demo/*时，请求头中会包含cookie1，而不会包含cookie2。" target="_blank" rel="noopener">http://localhost:8080/cookie_demo/*时，请求头中会包含cookie1，而不会包含cookie2。</a></li><li>当访问<a href="http://localhost:8080/cookie_demo/path/*时，请求头中会包含cookie1和cookie2。" target="_blank" rel="noopener">http://localhost:8080/cookie_demo/path/*时，请求头中会包含cookie1和cookie2。</a></li></ul><p><strong>也就是说，在访问子路径时，会包含其父路径的Cookie，而在访问父路径时，不包含子路径的Cookie。</strong></p><h2 id="Cookie路径的使用"><a href="#Cookie路径的使用" class="headerlink" title="Cookie路径的使用"></a>Cookie路径的使用</h2><p>如果你想在BServlet中设置的Cookie，在客户端访问AServlet时也包含在请求头中，那么就需要设置BServlet中的Cookie的path：</p><ul><li>c2.setPath(“/cookie_demo”)：硬编码；</li><li>c2.setPath(request.getContextpath() + “/”)：活编码。</li></ul><p>这样就可以设置Cookie的路径，保存在访问AServlet时，也会包含BServlet中添加的Cookie。<br>Cookie的SetPath设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie。</p><blockquote><p>首先默认情况如果不设置cookie的path，默认是 /项目名称/当前路径的上一层地址如：<br>请求路径：/cookie_demo/servlet/login，<br>cookie的路径：/cookie_demo/servlet</p></blockquote><p>如果我们设置path，如果当前访问的路径包含了cookie的路径（当前访问路径在cookie路径基础上要比cookie的范围小）cookie就会加载到request对象之中。</p><h1 id="Cookie保存中文-熟练-Tom9是可以使用中文的-针对Tom7版本"><a href="#Cookie保存中文-熟练-Tom9是可以使用中文的-针对Tom7版本" class="headerlink" title="Cookie保存中文(熟练) Tom9是可以使用中文的 针对Tom7版本"></a>Cookie保存中文(熟练) Tom9是可以使用中文的 针对Tom7版本</h1><p>Tom7 中  。Cookie中是不可以设置中文的，但可以使用<code>URLEncodor.encode()</code>方法<strong>编码</strong>后在存放到Cookie中。在获取Cookie时，需要先使用<code>URLDecoder.decode()</code>方法<strong>解码</strong>，再使用。<br>添加cookie:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Cookie</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>,<span class="string">"柴犬"</span>);</span><br><span class="line"><span class="comment">//编码 </span></span><br><span class="line">URLEncoder.encode(username,<span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure><p>读取cookie:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"username"</span>))</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">            username = URLDecoder.decode(cookie.getValue(),<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"password"</span>))</span><br><span class="line">            password = cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpSession概述-熟练"><a href="#HttpSession概述-熟练" class="headerlink" title="HttpSession概述(熟练)"></a>HttpSession概述(熟练)</h1><p>会话跟踪之session</p><blockquote><p><strong>session也是域对象之一</strong>，它的范围是在一个会话范围内有效。session既然是域对象，那么当然就要有<code>getAttribute()</code>和<code>setAttribute()</code>系列方法了。<br>在一个会话内共享一个session对象，所以session中可以保存一个会话内的数据。例如当前用户的信息。</p></blockquote><ul><li>session的范围大于request，<strong>可以在一个会话中多个请求之间共享数据</strong>。</li><li>但session的范围小于ServletContext(application)，<strong>session不能在多个用户之间共享数据</strong>。</li></ul><p>目前所学过的域对象的作用范围：</p><blockquote><pre><code>**ServletContext &gt;    HttpSession    &gt;    HttpServletRequest**</code></pre></blockquote><p><strong>获取session对象</strong></p><ul><li><p>使用<code>request.getSession()</code>方法就可以获取session对象。 <strong>存入的键值对参数，是存在sussionid对应的session对象中，存在于服务器的session池中</strong></p><p>类TxUser</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TxUser&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Session_demo1 存入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求对象</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"><span class="comment">//向session内存入内容</span></span><br><span class="line">session.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"txuser"</span>,<span class="keyword">new</span> TxUser(<span class="string">"admin"</span>,<span class="string">"123456"</span>));</span><br><span class="line">resp.getWriter().write(<span class="string">"success!!!"</span>);</span><br></pre></td></tr></table></figure><p>Session_demo2 读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求对象</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"><span class="comment">//向session内存入内容</span></span><br><span class="line">session.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"txuser"</span>,<span class="keyword">new</span> TxUser(<span class="string">"admin"</span>,<span class="string">"123456"</span>));</span><br></pre></td></tr></table></figure><p><strong>有了session，就不用使用Cookie来跟踪会话了</strong>！但是session不能像Cookie那样长命，一旦用户关闭浏览器窗口，那么session就死掉了。但在请求，服务器会分配一个新的session对象给他。</p><h1 id="HttpSession原理（依赖Cookie）"><a href="#HttpSession原理（依赖Cookie）" class="headerlink" title="HttpSession原理（依赖Cookie）"></a>HttpSession原理（依赖Cookie）</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112215401736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>HTTP是无状态协议，<strong>但是为什么session可以跟踪会话状态呢</strong>？ 因为session依赖Cookie。</p></blockquote><ol><li>当客户端第一次访问服务器时，服务器会为客户端创建一个session对象，然后把session对象放到session池中，在响应时把<strong>sessionId通过Cookie响应</strong>给客户端。注意，<strong>只有在第一次访问时，服务器才会创建session，给客户端响应sessionId</strong>。从此以后就不会了！</li><li>当<strong>客户端再次访问服务器时，会在请求中带着sessionId给服务器</strong>，<strong>服务器通过sessionId到session池中找到session对象，这就可以完成会话跟踪了</strong>。也就是说，服务器端保存的是session对象，而客户端只有sessionId。每次访问都需要通过客户端的sessionId来匹配服务器端的session对象！这样用户在session中保存的数据就可以再次被使用了。</li><li>sessionId是服务器通过Cookie发送给客户端浏览器的，<strong>这个Cookie的maxAge为-1</strong>，即只在浏览器内存中存在。如果你关闭所有浏览器窗口，那么这个Cookie（Session）就会消失了！</li></ol><h1 id="HttpSession失效-精通"><a href="#HttpSession失效-精通" class="headerlink" title="HttpSession失效(精通)"></a>HttpSession失效(精通)</h1><p>session失效有如下几个原因：</p><ol><li>session.invalidate()方法注销session</li><li>session超时</li></ol><p>在web.xml中添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">    &lt;!-- session的超时时间，以分钟为单位 --&gt;</span><br><span class="line">    &lt;session-timeout&gt;1&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>Cookie被禁用</li></ol><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="Session和Cookie的区别-精通"><a href="#Session和Cookie的区别-精通" class="headerlink" title="Session和Cookie的区别(精通)"></a>Session和Cookie的区别(精通)</h2><ul><li>session 存在服务器端，cookie 存在客户端（浏览器）</li><li>session 默认被存在在服务器的一个文件里（不是内存）</li><li>session 的运行<strong>依赖 session id</strong>，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li><li>session 可以放在 文件、数据库、或内存中都可以。</li><li>用户验证这种场合一般会用 session 因此，维持一个会话的核心就是客户端的唯一标识，即 session id</li></ul><h1 id="综合练习-精通-使用cookie实现自动登录"><a href="#综合练习-精通-使用cookie实现自动登录" class="headerlink" title="综合练习(精通) 使用cookie实现自动登录"></a>综合练习(精通) 使用cookie实现自动登录</h1><p>具体实现流程如图所示：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210112230225355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>login.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"auto"</span>/&gt;</span><span class="symbol">&amp;nbsp;</span>一天内自动登陆<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Login的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置响应对象的编码</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取用户名与密码</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//判断是否传递参数</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> &amp;&amp; password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取cookies</span></span><br><span class="line">            <span class="comment">//字符串</span></span><br><span class="line">            String txStr =<span class="string">""</span>;</span><br><span class="line">            Cookie[] cookies = req.getCookies();</span><br><span class="line">            <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"txuser1"</span>))&#123;</span><br><span class="line">                        txStr = cookie.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否有用户cookie</span></span><br><span class="line">            <span class="keyword">if</span> (txStr.equals(<span class="string">""</span>))&#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">"你没登录呢"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                BASE64Decoder decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">                txStr = <span class="keyword">new</span> String(decoder.decodeBuffer(txStr));</span><br><span class="line">                <span class="comment">//划分：内容</span></span><br><span class="line">                String[] split = txStr.split(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">if</span>(split[<span class="number">0</span>].equals(<span class="string">"admin"</span>) &amp;&amp; split.equals(<span class="string">"123456"</span>))&#123;</span><br><span class="line">                    TxUser txUser = <span class="keyword">new</span> TxUser(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">                    req.getSession().setAttribute(<span class="string">"txuser"</span>,txUser);</span><br><span class="line">                    resp.getWriter().write(<span class="string">"欢迎你大哥"</span>+txUser.getUsername());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.getWriter().write(<span class="string">"大神啊，你得重新登录"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//判断用户名或者摩玛是否正确   正常应该是数据库</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)&amp;&amp; <span class="string">"123456"</span>.equals(password))&#123;</span><br><span class="line">                <span class="comment">//输入正确 获取用户，存入session</span></span><br><span class="line">                <span class="comment">//创建一个用户</span></span><br><span class="line">                TxUser txUser = <span class="keyword">new</span> TxUser(username,password);</span><br><span class="line">                <span class="comment">//用户对象 存入session</span></span><br><span class="line">                HttpSession session = req.getSession();</span><br><span class="line">                session.setAttribute(<span class="string">"txuser"</span>,txUser);</span><br><span class="line">                <span class="comment">//获取是否勾选自动登录 auto是name的参数</span></span><br><span class="line">                String auto = req.getParameter(<span class="string">"auto"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"1"</span>.equals(auto))&#123;</span><br><span class="line">                    <span class="comment">//admin:123456</span></span><br><span class="line">                    String str = txUser.getUsername()+<span class="string">":"</span>+txUser.getPassword();</span><br><span class="line">                    <span class="comment">//使用BASE64编码格式</span></span><br><span class="line">                    BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">                    str = encoder.encode(str.getBytes());</span><br><span class="line">                    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"txuser1"</span>,str);</span><br><span class="line">                    resp.addCookie(cookie);</span><br><span class="line">                    resp.getWriter().write(<span class="string">"欢迎你奥 你设置了自动登录"</span>+txUser.getUsername());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.getWriter().write(<span class="string">"欢迎你奥 不过你没有设置自动登录"</span>+txUser.getUsername());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//账号密码对不上</span></span><br><span class="line">                resp.getWriter().write(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TxUser类</p><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxUser</span> </span>{    <span class="keyword">private</span> String username;    <span class="keyword">private</span> String password;    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">()</span> </span>{    }    <span class="function"><span class="keyword">public</span> <span class="title">TxUser</span><span class="params">(String username, String password)</span> </span>{        <span class="keyword">this</span>.username = username;        <span class="keyword">this</span>.password = password;    }    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>{        <span class="keyword">return</span> username;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>{        <span class="keyword">this</span>.username = username;    }    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>{        <span class="keyword">return</span> password;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>{        <span class="keyword">this</span>.password = password;    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{        <span class="keyword">return</span> <span class="string">"TxUser{"</span> +                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +                <span class="string">'}'</span>;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC](会话对象&lt;br&gt;Session and Cookie )&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;熟练掌握Cookie的概念
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>请求对象和响应对象 request and response</title>
    <link href="http://yoursite.com/2021/01/11/%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%20request%20and%20response/"/>
    <id>http://yoursite.com/2021/01/11/%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%20request%20and%20response/</id>
    <published>2021-01-11T13:26:38.058Z</published>
    <updated>2021-01-11T13:26:45.262Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC](请求对象和响应对象 request and response )<br>request是客户端（浏览器）请求服务器，response是服务器返回给客户端（浏览器）</p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>熟练掌握相对路径和绝对路径的使用,能够解决项目中的404问题;</li><li>能够使用request的API接收所有的前台传过来的参数(单值多值);</li><li>能够熟练处理页面各种中文乱码问题;</li><li>能够熟练的使用request完成请求转发,使用response完成请求重定向;</li><li><strong>掌握请求转发和重定向的区别(面试题);</strong></li></ul><h1 id="相对路径和绝对路径-精通"><a href="#相对路径和绝对路径-精通" class="headerlink" title="相对路径和绝对路径(精通)"></a>相对路径和绝对路径(精通)</h1><p>Java中使用的路径，分为两种：<strong>绝对路径和相对路径</strong>。归根结底，Java本质上只能使用绝对路径来寻找资源。所有的相对路径寻找资源的方法，都不过是一些便利方法。不过是API在底层帮助我们构建了绝对路径，从而找到资源的！</p><h2 id="区分绝对路径与相对路径"><a href="#区分绝对路径与相对路径" class="headerlink" title="区分绝对路径与相对路径"></a>区分绝对路径与相对路径</h2><p>相对路径中</p><ul><li>. 表示当前目录</li><li>上层目录 .. (两个点)</li></ul><p>绝对路径中</p><ul><li>/ 打头 </li><li>其中完整路径包括 <code>http://localhost:8080/</code></li></ul><p>例如 ：<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210109214720649.png#pic_center" alt="在这里插入图片描述"></p><ul><li>jks.html 位于web下 其完整路径为 <code>http://localhost:8080/JAVAWEB_REQ_RES_test/jks.html</code> 其要跳转到 jks2.html </li><li>jks.html 的完整路径为 <code>http://localhost:8080/JAVAWEB_REQ_RES_test/html/jks2.html</code></li><li>从jks.html 网页中 跳转到 jks2.html 有三种方法<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    &lt;p&gt;使用完整路径访问 非常麻烦 而且项目无法上线&lt;/p&gt;</span><br><span class="line">&lt;a href=<span class="string">"http://localhost:8080/JAVAWEB_REQ_RES_test/html/jks2.html"</span>&gt;跳转http:<span class="comment">//localhost:8080/JAVAWEB_REQ_RES_test/html/jks2.html&lt;/a&gt;</span></span><br><span class="line">    &lt;p&gt;使用绝对路径访问 /代表的为8080后面的斜杠 不推荐使用，项目名称变化就失效了&lt;/p&gt;</span><br><span class="line">    &lt;a href="/JAVAWEB_REQ_RES_test/html/jks2.html"&gt;跳转 /JAVAWEB_REQ_RES_test/html/jks2.html&lt;/a&gt;</span><br><span class="line">    &lt;p&gt;使用相对路径访问&lt;/p&gt;</span><br><span class="line">    &lt;a href="html/jks2.html"&gt;跳转 html/jks2.html&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li>同样 jks2.html  跳转 回  jks.html  应该采用相对路径  <code>../回到上一层目录，然后下面的文件jks.html</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="../jks.html"&gt;跳转 ../jks.html&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="HttpServletRequest基本功能-了解"><a href="#HttpServletRequest基本功能-了解" class="headerlink" title="HttpServletRequest基本功能(了解)"></a>HttpServletRequest基本功能(了解)</h1><h2 id="HttpServletRequest的功能"><a href="#HttpServletRequest的功能" class="headerlink" title="HttpServletRequest的功能"></a>HttpServletRequest的功能</h2><p>HttpServletRequest在JavaWeb中非常重要的一个类。它<strong>是Servlet的service()方法的参数</strong>之一。request的功能可以分为以下几种：</p><ul><li>封装了请求头数据；</li><li>封装了请求正文数据，如果是GET请求，那么就没有正文；</li><li>request是一个域对象，可以把它当成Map来添加获取数据；</li><li>做请求的转发<h2 id="request获取请求头数据"><a href="#request获取请求头数据" class="headerlink" title="request获取请求头数据"></a>request获取请求头数据</h2>request与请求头相关的方法有：</li><li>String getHeader(String name)：获取指定名称的请求头；</li><li>Enumeration getHeaderNames()：获取所有请求头名称；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过请求对象获取请求头</span></span><br><span class="line">String host = req.getHeader(<span class="string">"Host"</span>);</span><br><span class="line">System.out.println(host);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过请求对象获取所有请求头的名称</span></span><br><span class="line">Enumeration &lt;String&gt; names = req.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">    String name = names.nextElement();</span><br><span class="line">    String header = req.getHeader(name);</span><br><span class="line">    System.out.println(name +<span class="string">":"</span>+ header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="request获取请求相关的其它方法"><a href="#request获取请求相关的其它方法" class="headerlink" title="request获取请求相关的其它方法"></a>request获取请求相关的其它方法</h2><ul><li><p>int getContentLength()：获取请求正文的字节数，GET请求没有正文，没有正文返回-1；</p></li><li><p><strong><code>String getContentType()</code></strong>：获取请求类型，如果请求是GET，那么这个方法返回null；如果是POST请求，那么默认为application/x-www-form-urlencoded（理解为字符串类型），其它类型以后再学；</p></li><li><p>String getMethod()：返回请求方法，例如：GET</p></li><li><p>Locale getLocale()：返回当前客户端浏览器支持的Locale。</p></li><li><p>java.util.Locale表示国家和言语，这个东西在国际化中很有用；</p></li><li><p><strong><code>String getCharacterEncoding()</code></strong>：获取请求编码，如果没有<br>setCharacterEncoding()，那么返回null。表示使用ISO-8859-1编码；</p></li><li><p>void setCharacterEncoding(String code)：设置请求编码，只对正文有效！注意，对于GET而言，没有正文！！！所以此方法只能对POST请求中的参数有效！</p></li><li><p>String getContextPath()：返回上下文路径，例如：/项目名称</p></li><li><p>String getQueryString()：返回请求URL中的参数，例如：name=zhangSan</p></li><li><p>String getRequestURI()：返回请求URI路径，例如：/hello/oneServlet</p></li><li><p>StringBuffer getRequestURL()：返回请求URL路径，例如：<a href="http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；" target="_blank" rel="noopener">http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；</a></p></li><li><p><strong><code>String getServletPath()</code></strong>：返回Servlet路径，例如：/oneServlet</p></li><li><p>String getRemoteAddr()：返回当前客户端的IP地址；</p></li><li><p>String getRemoteHost()：返回当前客户端的主机名，但这个方法的实现还是获取IP地址；</p></li><li><p>int getRemotePort()：返回客户端的端口号，每次请求都会变；</p></li><li><p>String getSchema()：返回请求协议，例如：http；</p></li><li><p>String getServerName()：返回主机名，例如：localhost</p></li><li><p>int getServerPort()：返回服务器端口号，例如：80</p><p>url分段 获取API 可看此图<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/202101100115588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="HttpServletRequest获取参数-精通"><a href="#HttpServletRequest获取参数-精通" class="headerlink" title="HttpServletRequest获取参数(精通)"></a>HttpServletRequest获取参数(精通)</h1><p>HTTP请求方法不只是<strong>GET和POST</strong>，还有其他的方法，但基本上用不上。这里只是简单介绍一下。你自己心里有个数，HTTP请求除了GET和POST之外还有别的就行了。</p><h2 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h2><p>有POST和GET 两种。  HttpServlet 下，的doGET和doPOST方法，可以互掉用比如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    doGet(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HttpServletRequest获取参数方法"><a href="#HttpServletRequest获取参数方法" class="headerlink" title="HttpServletRequest获取参数方法"></a>HttpServletRequest获取参数方法</h2><p>可以使用HttpServletRequest获取客户端的请求参数，相关方法如下：</p><ul><li><strong><code>String getParameter(String name)</code></strong>：通过指定名称获取参数值；</li><li><strong><code>String[] getParameterValues(String name)</code></strong>：通过指定名称获取参数值数组，有可能一个名字对应多个值，例如表单中的多个复选框使用相同的name时；</li><li><strong><code>Enumeration getParameterNames()</code></strong>：获取所有参数的名字；</li><li><strong><code>Map getParameterMap()</code></strong>:获取所有参数对应的Map，其中key为参数名，value为参数值。</li></ul><h3 id="单值参数的接收"><a href="#单值参数的接收" class="headerlink" title="单值参数的接收"></a>单值参数的接收</h3><p>单值参数包括单选，单值下拉框，文本，隐藏域。无论是GET还是POST，获取参数的方法是相同的。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String username = req.getParameter(“username”);</span><br></pre></td></tr></table></figure><p>案例：实现从前端传递表单，后台拿到表单数据并打印<br>前台页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前台页面:  RES1 表示当前路径下调用 该Servlet文件 RES1</span></span><br><span class="line">    &lt;form action=<span class="string">"RES1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"用户名"</span>&gt; &lt;br&gt;</span><br><span class="line">        密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"密码"</span>&gt; &lt;br&gt;</span><br><span class="line">        爱好:&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"java"</span>&gt;java</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c"</span>&gt;c</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c++"</span>&gt;c++</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>后台接收:（Servlet RES1内）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过请求对象获取单个参数</span></span><br><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//他只会获得第一个like </span></span><br><span class="line">String like = req.getParameter(<span class="string">"like"</span>);</span><br></pre></td></tr></table></figure><h3 id="多值参数接收"><a href="#多值参数接收" class="headerlink" title="多值参数接收"></a>多值参数接收</h3><p>像复选框这种，上面单值参数不能满足。所以必须使用多值参数。采用的方法为<strong><code>String[] getParameterValues(String name)</code></strong><br>前台页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前台页面:  RES1 表示当前路径下调用 该Servlet文件 RES1</span></span><br><span class="line">    &lt;form action=<span class="string">"RES1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"用户名"</span>&gt; &lt;br&gt;</span><br><span class="line">        密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"密码"</span>&gt; &lt;br&gt;</span><br><span class="line">        爱好:&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"java"</span>&gt;java</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c"</span>&gt;c</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like"</span> value=<span class="string">"c++"</span>&gt;c++</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>后台接收:（Servlet RES1内）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] likes = req.getParameterValues(<span class="string">"like"</span>);</span><br><span class="line">System.out.println(Arrays.toString(likes));</span><br></pre></td></tr></table></figure><h3 id="我不知道name是啥啊-咋办呢？-获取前台传递的所有键值和值"><a href="#我不知道name是啥啊-咋办呢？-获取前台传递的所有键值和值" class="headerlink" title="我不知道name是啥啊 咋办呢？ 获取前台传递的所有键值和值"></a>我不知道name是啥啊 咋办呢？ 获取前台传递的所有键值和值</h3><p> <strong><code>Enumeration getParameterNames()</code></strong>：获取所有参数的名字；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line"><span class="keyword">while</span> ((names.hasMoreElements()))&#123;</span><br><span class="line">    String name = names.nextElement();</span><br><span class="line">    String[] values = req.getParameterValues(name);</span><br><span class="line">    System.out.println(name+<span class="string">":"</span>+Arrays.toString(values));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有参数-键-和值对应的map-读出"><a href="#所有参数-键-和值对应的map-读出" class="headerlink" title="所有参数(键)和值对应的map 读出"></a>所有参数(键)和值对应的map 读出</h3><p><strong><code>Map getParameterMap()</code></strong>:获取所有参数对应的Map，其中key为参数名，value为参数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; parameterMap =req.getParameterMap();</span><br><span class="line"><span class="comment">//遍历Map  keySet() 方法是用来获取包含在这个哈希表的键的Set视图 相当于就是每个键+值 一个组</span></span><br><span class="line">Set&lt;String&gt; keyset = parameterMap.keySet();</span><br><span class="line"><span class="comment">//循环每个 hashMAP组 通过键得到对应的值（存成数组了）</span></span><br><span class="line"><span class="keyword">for</span> (String key : keyset)&#123;</span><br><span class="line">    System.out.println(key +<span class="string">":"</span>+Arrays.toString(parameterMap.get(key)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpServletRequest的获得中文乱码处理-熟练"><a href="#HttpServletRequest的获得中文乱码处理-熟练" class="headerlink" title="HttpServletRequest的获得中文乱码处理(熟练)"></a>HttpServletRequest的获得中文乱码处理(熟练)</h1><p>Request接收参数时有get和post两种请求方式，但是处理中文的编码却不一样，我们在做项目时会全站都采用统一的编码，最常用的就是UTF-8，在UTF-8编码的项目中的乱码处理方法如下:</p><h2 id="Post请求中文乱码"><a href="#Post请求中文乱码" class="headerlink" title="Post请求中文乱码"></a>Post请求中文乱码</h2><p>我们知道，请求信息中，只有POST存在正文，所谓POST参数编码就是就是请求正文的编码。默认情况下，使用<strong><code>getParameter()</code></strong>获取POST请求参数时，使用的是ISO-8859-1编码。<br>为什么会出现乱码？本来是使用UTF-8编码的，但错误的使用了ISO-8859-1编码。 即编码不一致</p><h3 id="第一种方法，针对字符串本身进行手动转码"><a href="#第一种方法，针对字符串本身进行手动转码" class="headerlink" title="第一种方法，针对字符串本身进行手动转码:"></a>第一种方法，针对字符串本身进行手动转码:</h3><p>但这个非常的繁琐，那不是每一个都要 进行转换解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line"><span class="comment">//转化编码解码的方式进行接收参数的乱码处理</span></span><br><span class="line">username = <span class="keyword">new</span> String(username.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(<span class="string">"username:"</span>+username);</span><br></pre></td></tr></table></figure><h3 id="JAVAWEB使用的-第二种方法-直接设置request的编码格式"><a href="#JAVAWEB使用的-第二种方法-直接设置request的编码格式" class="headerlink" title="JAVAWEB使用的 第二种方法,直接设置request的编码格式:"></a>JAVAWEB使用的 第二种方法,直接设置request的编码格式:</h3><p>request的<strong>setCharacterEncodng()</strong>可以设置编码，当然这必须在调用所有的<strong>getParameter()</strong>方法之前调用request的setCharacterEncodng()方法来设置编码，这样，就不会使用ISO解读字节串了，而是使用你给定的编码来解读。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">String name = req.getParameter(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name);</span><br></pre></td></tr></table></figure><p><strong>对于每个请求，只需要调用request的setCharacterEncodng()一次</strong>，然后所有getParameter()都会使用这个编码来解读参数。但要注意，只对请求正文有效，即POST参数。<br><strong>该方法 必须放在获取参数值之前</strong></p><h2 id="Get请求中文乱码"><a href="#Get请求中文乱码" class="headerlink" title="Get请求中文乱码"></a>Get请求中文乱码</h2><p>Get请求是讲参数放在<strong>URL的queryString</strong>中进行提交,<strong>故此不存在请求体,所以上面处理post请求乱码的方法不再生效.</strong></p><h3 id="第一种方式-同样针对字符串进行单独解码"><a href="#第一种方式-同样针对字符串进行单独解码" class="headerlink" title="第一种方式,同样针对字符串进行单独解码"></a>第一种方式,同样针对字符串进行单独解码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line"><span class="comment">//转化编码解码的方式进行接收参数的乱码处理</span></span><br><span class="line">username = <span class="keyword">new</span> String(username.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(<span class="string">"username:"</span>+username);</span><br></pre></td></tr></table></figure><h3 id="第二种方法-通过设置服务器配置（默认，除非是7版本）"><a href="#第二种方法-通过设置服务器配置（默认，除非是7版本）" class="headerlink" title="第二种方法 通过设置服务器配置（默认，除非是7版本）"></a>第二种方法 通过设置服务器配置（默认，除非是7版本）</h3><p>通过设置服务器配置来让get请求支持中文,例如我们使用tomcat服务器,则设置/conf/server.xml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">              connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">              redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"UTF-8"</span>/&gt;</span><br></pre></td></tr></table></figure><p>一旦设置了这个属性，那么对于GET参数就直接是UTF-8编码的了。但是，<Connector>元素来说，对整个Tomcat都是有效的！<strong>不过，不建议使用get请求传递中文参数</strong><br>另外，<strong>Tomcat8.5及以上版本,无需进行设置,即可直接支持URL传递中文;</strong></p><h2 id="HttpServletRequest请求转发（相当于逻辑处理后-页面的跳转，或者转其他的Servlet进行后续逻辑处理）"><a href="#HttpServletRequest请求转发（相当于逻辑处理后-页面的跳转，或者转其他的Servlet进行后续逻辑处理）" class="headerlink" title="HttpServletRequest请求转发（相当于逻辑处理后 页面的跳转，或者转其他的Servlet进行后续逻辑处理）"></a>HttpServletRequest请求转发（相当于逻辑处理后 页面的跳转，或者转其他的Servlet进行后续逻辑处理）</h2><p>在Servlet中请求转发是大量要使用的，因为当我们访问一个Servlet的时候通常会执行一些后台的业务逻辑，然后跳转到一个结果页面，那么跳转到结果页面的这个过程就是请求转发。<strong>这么做的优点是可以隐藏，文件的目录结构不在url中显示。</strong></p><h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><blockquote><p><strong>举个例子我们做登录的功能。</strong><br>我们填写用户名密码然后提交到一个负责登录的Servlet，Servlet为我们做用户名和密码的校验，如果我们都正确的话，我们就要跳转到登录的提示页面，如果错误就要跳转到登录失败的页面。<br>Request的请求转发也可以叫做服务器端的跳转，虽然有页面的跳转但是我们会发现地址栏是不会有变化的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用request进行请求转发  forward 意思为转发 转发了request和response</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"html/Dispatcher.html"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure><h3 id="跳转到其他Servlet"><a href="#跳转到其他Servlet" class="headerlink" title="跳转到其他Servlet"></a>跳转到其他Servlet</h3><p>DES2 为另一个 Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用request进行请求转发  forward 意思为转发 转发了request和response</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">"DES2"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure><h2 id="request作用域"><a href="#request作用域" class="headerlink" title="request作用域"></a>request作用域</h2><p>之前提及过ServletContext的概念，它也是一个域的对象，它的范围非常大，是指定项目所有Servlet的公共的对象，随着服务器的启动而产生，服务器的停止而销毁，那么request的也是域对象，它的作用范围小的多，它的范围只在一次请求响应范围之内，每一个线程的请求都会新产生一个HttpServletRequest和HttpServletResponse的对象。</p><ul><li>我们可以给request来设置当前域中的属性值，在该域之内（当前请求完成之前）都能获得到该属性值。</li><li>req.setAttribute(“name”, “txjava”);<br>req.getAttribute(“name”);</li></ul><p>案例：从一个Servlet中存入参数，另一个Servlet获取显示<br>第一个Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request作用域内存入数据</span></span><br><span class="line">req.setAttribute(<span class="string">"username"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">req.getRequestDispatcher(<span class="string">"RES2"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure><p>第二个Servlet  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 request作用域内获取数据</span></span><br><span class="line">Object username = req.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line">System.out.println(<span class="string">"这是ServletRES2!!!"</span>);</span><br><span class="line">req.getRequestDispatcher(<span class="string">"html/Dispatcher.html"</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><h2 id="HttpServletResponse-熟练"><a href="#HttpServletResponse-熟练" class="headerlink" title="HttpServletResponse(熟练)"></a>HttpServletResponse(熟练)</h2><ul><li>request是请求对象，而response是响应对象。</li><li>response对象用于响应client请求，向客户输出信息。</li><li>他封装了JSP产生的响应，并发送到client以响应client请求。</li></ul><h3 id="HttpServletResponse功能介绍"><a href="#HttpServletResponse功能介绍" class="headerlink" title="HttpServletResponse功能介绍"></a>HttpServletResponse功能介绍</h3><p>response对象的功能分为以下四种：</p><ul><li>设置响应头信息；addHeader(“reFresh”, “5;URL=xxxx”);</li><li>发送状态码；sendError(404);</li><li>设置响应正文；getWriter().print(“fdsfdsa”);</li><li>重定向：sendRedirect(“path”);</li></ul><h3 id="设置状态码和其他方法"><a href="#设置状态码和其他方法" class="headerlink" title="设置状态码和其他方法"></a>设置状态码和其他方法</h3><ul><li>response.setContentType(“text/html;charset=utf-8”)：设置响应类型为html，编码为utf-8，处理相应页面文本显示的乱码；</li><li>response.setCharacterEncoding(“utf-8”)：如果响应类型为文本，那么就需要设置文本的编码类型，然后浏览器使用这个编码来解读文本。注意，如果没有设置contentType，那么浏览器会认为contentType为text/html，如果没设置编码，那么默认为ISO-8859-1编码。所以以上两点在使用response返回结果之前必须设置。</li><li>response.setStatus(200)：设置状态码；</li><li>response.sendError(404, “您要查找的资源不存在”)：当发送错误状态码时，Tomcat会跳转到固定的错误页面去，但可以显示错误信息。</li></ul><h3 id="设置响应头信息"><a href="#设置响应头信息" class="headerlink" title="设置响应头信息"></a>设置响应头信息</h3><ul><li><p><strong><code>response.setHeader(“contentType”, “text/html;charset=utf-8”)</code></strong>：与setContentType()方法的功能相同。setContentType()方法属于便捷方法；</p></li><li><p>刷新（定时重定向）：<strong><code>response.setHeader(&quot;Refresh&quot;,&quot;5; URL=http://www.baidu.com&quot;)</code></strong>：5秒后自动跳转到百度主页。</p><p>JAVAWEB_HttpServletResponse</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过响应对象设置响应头信息</span></span><br><span class="line">resp.addHeader(<span class="string">"teacher"</span>,<span class="string">"ly"</span>);</span><br><span class="line"><span class="comment">// 通过响应对象设置响应头信息，5s后跳转到http://www.baidu.com</span></span><br><span class="line">resp.addHeader(<span class="string">"reFresh"</span>,<span class="string">"5,url=http://www.baidu.com"</span>);</span><br><span class="line"><span class="comment">// 发送状态码</span></span><br><span class="line">resp.sendError(<span class="number">404</span>);</span><br><span class="line"><span class="comment">// 通过相应对象设置相应的内容</span></span><br><span class="line">resp.getWriter().write(<span class="string">"success!!"</span>);</span><br></pre></td></tr></table></figure><p>可以在，检查审视中 Response Headers 中，可以看到里面的 teacher : ly<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210110235837726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="Response重定向"><a href="#Response重定向" class="headerlink" title="Response重定向"></a>Response重定向</h3><p>使用response对象的sendRedirect()方法能够将网页重定向到还有一个页面。重定向支持将地址重定向到不同的主机上，这一点与转发不同。<strong>在client浏览器上将会得到跳转后的地址，并又一次发送请求链接</strong>（即两次）；用户能够从浏览器的地址栏中看到跳转后的地址；<strong>重定向操作后，request中的属性将会所有失效，并开始一个新的request对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用响应对象进行请求的重定向</span></span><br><span class="line">resp.sendRedirect(<span class="string">"Form.html"</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210111172409609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>他是分两次访问的。第一次回复后，读取回复头的信息中的Location。再进行第二次的回复。（跳转网页或者是其他的Servlet处理）<br>注意</p><ul><li>重定向操作后，request中的属性将会所有失效，并开始一个新的request对象</li><li>就是说比如Servlet1的赋给的参数与值，并不能共享到Servlet2中。 要不你用ServletContext来做</li><li><strong>其一般用来 跳转外部网址 比如直接跳百度</strong></li></ul><p><strong>请求转发与重定向的区别</strong></p><ol><li>请求转发指的是服务器内部网页的跳转，或者Servlet逻辑的递进交付。</li><li>重定向可以访问外部地址，比如直接跳百度</li></ol><h2 id="Response中文-乱码问题"><a href="#Response中文-乱码问题" class="headerlink" title="Response中文 乱码问题"></a>Response中文 乱码问题</h2><p>当我们使用response向页面返回带有中文的值时,可能会出现中文乱码,需要进行如下设置:</p><ul><li>设置响应类为html，编码为utf-8，处理相应页面文本显示的乱码；其实还有 json响应类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure><ul><li>如果响应类型为文本，那么就需要设置文本的编码类型，然后浏览器使用这个编码来解读文本。注意，如果没有设置contentType，那么浏览器会认为contentType为text/html，如果没设置编码，会默认为ISO-8859-1编码。所以以上两点在使用response返回结果之前必须设置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p>两者中其实有一个就可以生效。不过最好都设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">"张三"</span>);</span><br></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="1-请求转发和重定向的区别"><a href="#1-请求转发和重定向的区别" class="headerlink" title="1.请求转发和重定向的区别"></a>1.请求转发和重定向的区别</h2><h3 id="1-1-处理流程的区别"><a href="#1-1-处理流程的区别" class="headerlink" title="1.1 处理流程的区别"></a>1.1 处理流程的区别</h3><p>请求转发:</p><ol><li>客户端发送请求，Servlet做出业务逻辑处理。</li><li>Servlet调用forword()方法，服务器Servlet把<strong>目标资源返回给客户端浏览器</strong>。 <strong>一次性</strong></li></ol><p>重定向:</p><ul><li>客户端发送请求，Servlet做出业务逻辑处理。</li><li>Servlet调用response.sendReadirect()方法，把要<strong>访问的目标资源作为response响应头信息发给客户端浏览器</strong>。例如，在访问location中的内容。 <strong>二次型</strong></li><li>客户端浏览器重新访问服务器资源xxx.jsp，服务器再次对客户端浏览器做出响应。</li></ul><h3 id="1-2-路径"><a href="#1-2-路径" class="headerlink" title="1.2 路径"></a>1.2 路径</h3><ul><li>使用<strong>相对路径</strong>在重定向和转发中没有区别</li><li>重定向和请求转发使用<strong>绝对路径</strong>时，<strong>根/路径代表了不同含义</strong></li><li><ul><li>重定向resp.sendRedirect(“xxx”)是服务器向客户端发送一个请求头信息，由客户端再请求一次服务器。<strong>/指的Tomcat的根目录</strong>,写绝对路径应该写成”<strong>/当前Web程序根名称/资源名</strong>“ 。如”/WebModule/login.jsp”,”<strong>/bbs/servlet/LoginServlet</strong>“</li><li><ul><li>请求转发是在服务器内部进行的，<strong>写绝对路径/开头指的是当前的Web应用程序</strong>。绝对路径写法就是”/login.jsp”或”<strong>/servlet/LoginServlet</strong>“。</li></ul></li><li>总结：以上要注意是区分是从服务器外的请求，还在是内部转发，<strong>从服务器外的请求，从Tomcat根写起(就是要包括当前Web的根)</strong>；是服务器内部的转发，很简单了，<strong>因为在当前服务器内，/写起指的就是当前Web的根目录</strong>。</li></ul></li></ul><h3 id="1-3-其他区别"><a href="#1-3-其他区别" class="headerlink" title="1.3 其他区别"></a>1.3 其他区别</h3><p>请求转发</p><ul><li><p>req.getRequestDispatcher()是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；<strong>服务器内部转发，整个过程处于同一个请求当中</strong>。</p></li><li><ul><li>forward()更加高效，在可以满足需要时，尽量使用RequestDispatcher.forward()方法。</li></ul></li><li><ul><li>RequestDispatcher是通过调用HttpServletRequest对象的getRequestDispatcher()方法得到的，是属于请求对象的方法。</li></ul><p>重定位</p></li><li><p>resp.sendRedirect()则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。不在同一个请求。重定向，实际上客户端会向服务器端发送两个请求。</p></li><li><ul><li>sendRedirect()是HttpServletResponse对象的方法，即响应对象的方法，既然调用了响应对象的方法，那就表明整个请求过程已经结束了，服务器开始向客户端返回执行的结果。</li></ul></li><li><p><strong>所以转发中数据的存取可以用request作用域：req.setAttribute()； req.getAttribute()，重定向是取不到request中的数据的。只能用session。</strong></p></li><li><p><strong>重定向可以跨域访问，而转发是在web服务器内部进行的，不能跨域访问。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC](请求对象和响应对象 request and response )&lt;br&gt;request是客户端（浏览器）请求服务器，response是服务器返回给客户端（浏览器）&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Servlet - HttpServlet （2）</title>
    <link href="http://yoursite.com/2021/01/09/Servlet%20-%20HttpServlet%20%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2021/01/09/Servlet%20-%20HttpServlet%20%EF%BC%882%EF%BC%89/</id>
    <published>2021-01-09T09:18:31.359Z</published>
    <updated>2021-01-09T09:18:38.507Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="HttpServlet">TOC</a></p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>了解Servlet概念和JavaWeb的三大组件都包含哪些组件;</li><li>创建一个Servlet实现javax.servlet.Servlet接口,并自行验证Servlet的生命周期;</li><li>创建一个Servlet继承javax.servlet.http.HttpServlet类,提供一个初始化属性,并在Servlet初始化时打印它;</li><li>自己实现统计网址访问人次的功能;</li><li>熟练掌握两道面试题<h1 id="HttpServlet介绍"><a href="#HttpServlet介绍" class="headerlink" title="HttpServlet介绍"></a>HttpServlet介绍</h1><strong>因为现在我们的请求都是基于HTTP协议的</strong>，所以我们应该<strong>专门为HTTP请求写一个Servlet做为通用父类。</strong><br>我们只需要创建一个HttpServlet的继承即可。其内部关系结构如图所示<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108135020440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>由上图我们可以看出,以后再写<strong>Servlet 可以直接继承HttpServlet</strong><br><strong>Servlet            一个标准<br>GenericServlet     是Servlet接口子类<br>HttpServlet        是GenericServlet子类，一个专门处理Http请求的Servlet</strong></li></ul><h1 id="Http请求方法"><a href="#Http请求方法" class="headerlink" title="Http请求方法"></a>Http请求方法</h1><p>HTTP请求方法不只是<strong>GET和POST</strong>，还有其他的方法，但基本上用不上。这里只是简单介绍一下。你自己心里有个数，HTTP请求除了GET和POST之外还有别的就行了。</p><ol><li><strong>GET            通过请求URI得到资源</strong>   实现的方法就是 doGet</li><li><strong>POST        用于添加新的内容</strong>   实现的方法就是 doPost</li><li>PUT            用于修改某个内容</li><li>DELETE        删除某个内容</li><li>CONNECT    用于代理进行传输，如使用SSL</li><li>OPTIONS    询问可以执行哪些方法</li><li>PATCH        部分文档更改</li><li>RACE        用于远程诊断服务器</li><li>HEAD        类似于GET, 但是不返回body信息，用于检查对象是否存在，以及得到对象的元数据</li><li>TRACE        用于远程诊断服务器</li></ol><h1 id="创建HttpServlet"><a href="#创建HttpServlet" class="headerlink" title="创建HttpServlet"></a>创建HttpServlet</h1><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><ol><li>创建一个类继承HttpServlet。并实现方法，例如实现GET就是doGet方法。输入doget自己就可以联想出来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用了doGET方法"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>web.xml配置 Servlet 路径信息。同上节<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web.xml</span></span><br><span class="line">    &lt;!--定义一个Servlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--名称--&gt;</span><br><span class="line">        &lt;servlet-name&gt;MyHttpServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--对应的<span class="class"><span class="keyword">class</span>文件--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_servlet</span>.<span class="title">MyHttpServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--定义一个<span class="title">Servlet</span>的路径映射--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;!--对应的名称--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">MyHttpServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;!--该<span class="title">Servlet</span>处理的请求路径--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">myHttphello</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第二种方法-（只找到2017版本的-2020版本未知）"><a href="#第二种方法-（只找到2017版本的-2020版本未知）" class="headerlink" title="第二种方法  （只找到2017版本的 2020版本未知）"></a>第二种方法  （只找到2017版本的 2020版本未知）</h2></li><li>IDEA直接创建servlet<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108152824741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>填写一下 Servlet的名字<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108152911175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>创建完成,自己填写映射路径 urlPatterns<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108153040578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="Servlet创建顺序"><a href="#Servlet创建顺序" class="headerlink" title="Servlet创建顺序"></a>Servlet创建顺序</h2>之前都是你在客户端请求，初始化Servlet。 需要一定的时间，所以最爱的办法就是在TomCat启动的时候就初始化了 所有的Servlet。<br>有些Servlet需要在Tomcat启动时就被创建，而不是第一次访问时被创建，那么可以在web.xml文件中配置&lt; servlet &gt;元素</li><li>在&lt; servlet &gt;元素中添加子元素&lt; load-on-startup &gt;元素<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">tx</span>.<span class="title">servlet</span>.<span class="title">Servlet1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--由参数控制启动时机--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;1&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>&lt; load-on-startup &gt;1&lt; /load-on-startup &gt;中间的值1     <strong>当值为0或者大于0</strong>时，表示容器在应用启动时就加载这个servlet； 而这个值 表示各自 创建Servlet实例对象（初始化的顺序）</li><li>对于刚才的HttpServlet 需要自己重写一个 init方法。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">    System.out.println(<span class="string">"你是第2个被初始化的"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ServletConfig（熟练）"><a href="#ServletConfig（熟练）" class="headerlink" title="ServletConfig（熟练）"></a>ServletConfig（熟练）</h1><ul><li><p>. ServletConfig对象对应web.xml文件中的&lt; servlet &gt;元素。**例如你想获取当前Servlet在web.xml文件中的配置名，那么可以使用servletConfig.getServletName()方法获取！</p></li><li><p>你不能自己去创建ServletConfig对象，Servlet的init()方法的参数就是ServletConfig类型的。<strong>Tomcat在调用init()方法时，会传递ServletConfig对象。</strong></p><h2 id="如何设定初始参数，并操作"><a href="#如何设定初始参数，并操作" class="headerlink" title="如何设定初始参数，并操作"></a>如何设定初始参数，并操作</h2></li></ul><ol><li>在对应的Servlet标签下，设定init初始化参数，使用的标签为 <code>&lt;init-param&gt;</code>。并且 <code>&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</code>必须再初始化数据之后。</li><li>在对应的Servlet标签下，设定init初始化参数，使用的标签为 <code>&lt;init-param&gt;</code>。并且 <code>&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</code>必须再初始化数据之后。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义一个Servlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;!--名称--&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyHttpServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--对应的<span class="class"><span class="keyword">class</span>文件--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_servlet</span>.<span class="title">MyHttpServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">company</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">txjava</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">chaiquan</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">liyuan</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;2&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果我知道参数键是啥。在对应的servlet Class 文件下 通过<code>ServletConfig</code> 获取<code>servletConfig</code>对象，通过之前设定的参数键得到值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ServletConfig</span></span><br><span class="line">ServletConfig servletConfig = getServletConfig();</span><br><span class="line"><span class="comment">//获取该Servlet的初始化参数</span></span><br><span class="line">String company = servletConfig.getInitParameter(<span class="string">"company"</span>);</span><br><span class="line">System.out.println(company);</span><br><span class="line">String teacher = servletConfig.getInitParameter(<span class="string">"chaiquan"</span>);</span><br><span class="line">System.out.println(teacher);</span><br></pre></td></tr></table></figure></li><li>如果我不知道参数键是啥。也就是我需要全部读取到<strong>枚举集合</strong>中  Enumeration&lt; String &gt;   参数是String类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有初始化参数的枚举集合</span></span><br><span class="line">Enumeration&lt;String&gt; names = servletConfig.getInitParameterNames();</span><br><span class="line"><span class="comment">//遍历枚举</span></span><br><span class="line"><span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">    <span class="comment">//拿到名称</span></span><br><span class="line">    String name = names.nextElement();</span><br><span class="line">    String value = servletConfig.getInitParameter(name);</span><br><span class="line">    System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Servlet路径映射（熟练）"><a href="#Servlet路径映射（熟练）" class="headerlink" title="Servlet路径映射（熟练）"></a>Servlet路径映射（熟练）</h1><h2 id="关于Url-Pattern（即url的Servlet入口地址）的配置："><a href="#关于Url-Pattern（即url的Servlet入口地址）的配置：" class="headerlink" title="关于Url-Pattern（即url的Servlet入口地址）的配置："></a>关于Url-Pattern（即url的Servlet入口地址）的配置：</h2><ol><li>完全路径匹配  以/开头    例如  /aaa   /aaa/bbb  </li><li>目录匹配        以/开头       例如  /aaa/*   /*</li><li>扩展名匹配    不能以/开头   例如  *.do   *.action  ….</li></ol><p> <strong>优先级： 完全路径匹配 &gt; 目录匹配 &gt; 扩展名匹配</strong><br> <strong>经典错误：  /*.do</strong>  这玩意不存在的  注意</p><h1 id="ServletContext-熟练"><a href="#ServletContext-熟练" class="headerlink" title="ServletContext(熟练)"></a>ServletContext(熟练)</h1><h2 id="ServletContext介绍"><a href="#ServletContext介绍" class="headerlink" title="ServletContext介绍"></a>ServletContext介绍</h2><blockquote><p>ServletContext是一个全局的储存信息的空间，服务器开始，其就存在，服务器关闭，其才释放。<strong>request，一个用户可有多个；session，一个用户一个；**</strong>而servletContext，所有用户共用一个<strong>。所以，为了节省空间，提高效率，ServletContext中，要放必须的、重要的、</strong>所有用户需要共享的线程又是安全的一些信息**。</p></blockquote><p>说白了，就是 一个web项目内，一些Servlet可以共同共享访问的内容 放在ServletContext中。 举个实际的例子，一个网站n多人访问，请求的内容可能是一致的。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108223708569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。</li><li>由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，<strong>因此Servlet对象之间可以通过ServletContext对象来实现通讯</strong>。ServletContext对象通常也被称之为context域对象。</li><li>查看ServletContext API文档，了解ServletContext对象的功能。其主要的功能方法包括</li></ul><table><thead><tr><th>ServletContext API</th><th></th></tr></thead><tbody><tr><td>Object</td><td><strong>getAttribute(String name)</strong>  取键值对</td></tr><tr><td>String</td><td>getContextPath()</td></tr><tr><td>String</td><td>getInitParameter(String name)</td></tr><tr><td>String</td><td>getRealPath(String path)</td></tr><tr><td>void</td><td><strong>setAttribute(String name, Object object)</strong>  设置键值对</td></tr><tr><td>InputStream</td><td>getResourceAsStream(String path)</td></tr></tbody></table><h3 id="举个例子实现两个Servelt对象之间的-通讯。一个实现放置键值对，一个取键值"><a href="#举个例子实现两个Servelt对象之间的-通讯。一个实现放置键值对，一个取键值" class="headerlink" title="举个例子实现两个Servelt对象之间的 通讯。一个实现放置键值对，一个取键值"></a>举个例子实现两个Servelt对象之间的 通讯。一个实现放置键值对，一个取键值</h3><p>设置键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServleContext对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//存入内存 设置键值对</span></span><br><span class="line">        context.setAttribute(<span class="string">"company"</span>,<span class="string">"chaiquan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取键值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServleContext对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//存入内存 设置键值对</span></span><br><span class="line">        Object company = context.getAttribute(<span class="string">"company"</span>);</span><br><span class="line">        System.out.println(company);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：统计站点访问次数 （注意版本区别，返回是resp）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServleContext对象</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//num 表示当前访问的人数  如果为null则初始化并加1</span></span><br><span class="line">        Integer num = (Integer)(context.getAttribute(<span class="string">"num"</span>));</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span>)</span><br><span class="line">            num =<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//把num加1，然后存入键值对  实现刷新一次 就+1 由于是共享的 两个不同的浏览器看到的会是同步的效果</span></span><br><span class="line">        context.setAttribute(<span class="string">"num"</span>,++num);</span><br><span class="line">        <span class="comment">//向客户端返回相应的内容</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"GBK"</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">"当前网站访问人次:"</span>+num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="通过ServletContext对象读取资源文件"><a href="#通过ServletContext对象读取资源文件" class="headerlink" title="通过ServletContext对象读取资源文件"></a>通过ServletContext对象读取资源文件</h3><h4 id="方法一：通过ServletContext-getRealPath-方法-（注意druid-properties-要放在web这个文件下）"><a href="#方法一：通过ServletContext-getRealPath-方法-（注意druid-properties-要放在web这个文件下）" class="headerlink" title="方法一：通过ServletContext.getRealPath()方法;（注意druid.properties 要放在web这个文件下）"></a>方法一：通过ServletContext.getRealPath()方法;（注意druid.properties 要放在web这个文件下）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String path = servletContext.getRealPath(<span class="string">"druid.properties"</span>);</span><br><span class="line">System.out.println(path);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">    p.load(is);</span><br><span class="line">    String username = p.getProperty(<span class="string">"username"</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：使用servletContext-getResourceAsStream-方法-（相对地址获取）放src下即可"><a href="#方法二：使用servletContext-getResourceAsStream-方法-（相对地址获取）放src下即可" class="headerlink" title="方法二：使用servletContext.getResourceAsStream()方法;（相对地址获取）放src下即可"></a>方法二：使用servletContext.getResourceAsStream()方法;（相对地址获取）放src下即可</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获得到ServletContext对象</span></span><br><span class="line">ServletContext servletContext = getServletContext();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获得工程目录web下文件的流第一个/代表项目的根目录</span></span><br><span class="line">    InputStream is = servletContext.getResourceAsStream(<span class="string">"/WEB-INF/druid.properties"</span>);</span><br><span class="line">    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">    p.load(is);</span><br><span class="line">    String username = p.getProperty(<span class="string">"username"</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法三：使用getClass-getClassLoader-getResourceAsStream-方法-（注意druid-properties-要放在该Class的上一层文件目录下）"><a href="#方法三：使用getClass-getClassLoader-getResourceAsStream-方法-（注意druid-properties-要放在该Class的上一层文件目录下）" class="headerlink" title="方法三：使用getClass().getClassLoader().getResourceAsStream()方法;（注意druid.properties 要放在该Class的上一层文件目录下）"></a>方法三：使用getClass().getClassLoader().getResourceAsStream()方法;（注意druid.properties 要放在该Class的上一层文件目录下）</h4><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210109171444633.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用类加载器的方式来读取classpath下的资源文件，好处不依赖与ServletContext，任何类都可以获得classpath下的资源文件，</span></span><br><span class="line"><span class="comment">//不需要再自己指定/WEB-INF/classes</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>);</span><br><span class="line">        properties.load(is);</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"username"</span>));</span><br><span class="line">       <span class="comment">//这个也行 统一一下 System.out.println(properties.get("username"));</span></span><br></pre></td></tr></table></figure><h1 id="面试有关"><a href="#面试有关" class="headerlink" title="面试有关"></a>面试有关</h1><h2 id="单例的Servlet"><a href="#单例的Servlet" class="headerlink" title="单例的Servlet"></a>单例的Servlet</h2><p>因为Servlet实例是由Tomcat来创建的，但Tomcat只会创建一个Servlet实例，所以<strong>Servlet就是单例的</strong>！这与我们自己写的单例模式不太一样。因为这种单例是通过容器tomcat来管理而实现的！</p><p>一个实例需要在同一个时间点上处理多个请求！<br>同步就是安全，但效率太低！</p><ul><li><strong>Servlet是线程不安全的！</strong></li><li>不写属性；</li><li>不写可以存储数据的属性<h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2></li><li>Servlet 通过调用 init () 方法进行初始化。</li><li>Servlet 调用 service() 方法来处理客户端的请求。</li><li>Servlet 通过调用 destroy() 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p><br><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;HttpServlet&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;了解Servlet概念和JavaWe
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Servlet概述与使用（1）</title>
    <link href="http://yoursite.com/2021/01/08/Servlet%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2021/01/08/Servlet%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%881%EF%BC%89/</id>
    <published>2021-01-08T05:43:15.340Z</published>
    <updated>2021-01-08T05:42:54.501Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="Servlet概述与使用">TOC</a></p><h1 id="Servlet概述"><a href="#Servlet概述" class="headerlink" title="Servlet概述"></a>Servlet概述</h1><h2 id="JavaWeb的三大组件"><a href="#JavaWeb的三大组件" class="headerlink" title="JavaWeb的三大组件"></a>JavaWeb的三大组件</h2><p>JavaWeb的三大组件：Servlet、Filiter（过滤器）、Listener（观察者模式、监听器）</p><h2 id="Servlet的作用"><a href="#Servlet的作用" class="headerlink" title="Servlet的作用"></a>Servlet的作用</h2><p><strong>Servlet 用于处理用户请求</strong>。 当客户端发出请求后，由Tomcat去找到可以处理这一请求的Servlet 来处理。 </p><ul><li>举个例子，用户发出登录请求，有Servlet组件来处理登录请求。判断是否正确啊或者是不是自动登录等等，在返回给服务器响应给浏览器。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106164835424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Servlet-初始"><a href="#Servlet-初始" class="headerlink" title="Servlet 初始"></a>Servlet 初始</h1><h2 id="Servlet的说明"><a href="#Servlet的说明" class="headerlink" title="Servlet的说明"></a>Servlet的说明</h2><p>servlet 是运行在 Web 服务器中的小型 Java 程序。servlet 通常通过 HTTP（超文本传输协议）接收和响应来自 Web 客户端的请求。也就是说，Servlet是由我们自己来完成的！Servlet一定要实现javax.servlet.Servlet接口，并且还要在web.xml文件中部署！不然Tomcat是找不到我们写的Servlet的。</p><ol><li><p>在src下，创建一个文件夹，例如叫：cn_tx_servlet   在其目录中创建一个class文件MyServlet 。</p></li><li><p>MyServlet 实现 Servlet接口 。实现5个方法，分别为 Servlet生命周期。生命周期要经过以下路径，并且涉及到五种方法：<br>（1）装载Servlet类<br>（2）创建Servlet实例（实例化）<br>（3）通过调用init()方法初始化servlet。 <code>void init(ServletConfig config)方法</code><br>（4）servlet调用service()方法来处理客户端的请求。<code>void service(ServletRequest req, ServletResponse res)</code>   可以在里面写点东西看看是否调用了<br>（5）通过调用destroy()方法终止servlet。<code>public void destroy()</code><br>下面将分别介绍五种方法。</p></li><li><p>public void init(ServletConfig servletConfig)  </p></li></ol><blockquote><p> //当Tomcat创建Servlet实例后，马上调用init()方法。<br>    // 这个方法只在创建后调用一次！用来做Servlet初始化工作！<br>    // 一个Servlet实例只被创建一次，所以init()方法也只被调用一次！</p></blockquote><ol start="2"><li>public void service(ServletRequest servletRequest, ServletResponse servletResponse)</li></ol><blockquote><p>  //Servlet实例在每次处理请求时都调用service()方法。<br>    // 这个方法是在servlet生命周期中被多次调用的唯一方法，同时它也是执行实际任务的主要方法。<br>    // 它服务于来自客户端（浏览器）请求，每当服务器收到请求时都会调用此方法。<br>    // 每当服务器接收到对servlet的请求时，服务器将产生一个新线程并调用服务。<br>    // Service()方法检查HTTP请求类型（GET，POST，PUT，DELETE等），并根据需要调用doGet，doPost，doPut，doDelete等方法。</p></blockquote><ol start="3"><li>public ServletConfig getServletConfig() </li></ol><blockquote><p> //这个方法返回ServletConfig对象，但我们不能自己去创建ServletConfig对象，<br>    // 所以一般我们会在init()方法中把init()方法的参数保存起来，<br>    // 然后再在本方法中返回它。ServletConfig对象对应web.xml中当前Servlet实例的配置信息。<br> 4.  public String getServletInfo()<br> //基本没用，返回有关servlet的信息，如作者，版本和版权。<br> 5. public void destroy()<br>  //当Tomcat要销毁Servlet实例时，会先调用destroy()方法，再销毁它。<br>    // 所谓销毁Servlet，其实就是在Servlet缓存池中把Servlet移除！<br>    // 一旦destroy()方法被调用，servlet容器就不会调用service()方法了。<br>    // 一般只有Tomcat关闭时，才会销毁Servlet实例！<br> 3. 在WEB-INF包下的 web.xml文件中 添加 （<strong>如果Web容器中包含了多个Servlet，特定的HTTP请求该由哪一个Servlet来处理呢？它由Web容器中的web.xml来决定的</strong>。）<br>这边映射的 url为 /hello</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义一个Servlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;!--名称--&gt;</span><br><span class="line">    &lt;servlet-name&gt;myServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--对应的<span class="class"><span class="keyword">class</span>文件--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">cn_tx_servlet</span>.<span class="title">MyServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!--定义一个<span class="title">Servlet</span>的路径映射--&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--对应的名称--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">myServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--该<span class="title">Servlet</span>处理的请求路径--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">hello</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>那JAVAWEB是如何加载url地址运行的呢？</strong>如图所示<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108131819710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例如地址  <a href="http://localhost:8080/JAVA_WEB_ServletDemo1/hello" target="_blank" rel="noopener">http://localhost:8080/JAVA_WEB_ServletDemo1/hello</a>     可以输出Serve方法的内容。  </p><ul><li>其中<a href="http://localhost:8080，为TomCat的环回地址">http://localhost:8080，为TomCat的环回地址</a></li><li>/JAVA_WEB_ServletDemo1 为 TomCat 预定设置的 访问地址（设置方式看上一讲）</li><li>/hello 为设定的  该Servlet处理的请求路径</li></ul><p>复杂的来说具体流程为：</p><blockquote><p>当Tomcat接收到请（<a href="http://localhost:8080/JAVA_WEB_ServletDemo1/hello）后，Tomcat会找到servlet_pro项目中的web.xml文件。" target="_blank" rel="noopener">http://localhost:8080/JAVA_WEB_ServletDemo1/hello）后，Tomcat会找到servlet_pro项目中的web.xml文件。</a><br>然后通过logon这个请求路径，查找处理这个请求的Servlet类型。<br>这刚好与<url-pattern>/hello</url-pattern>匹配，这说明存在一个可以通过这个请求的Servlet。然后再通过<url-pattern>/hello </url-pattern>查找到<servlet-name>hello</servlet-name>，然后再通过<servlet-name>hello </servle-name>查找到<servlet-class>cn_tx_servlet.MyServlet</servlet-class>。这时Tomcat已经得到了一个Servlet类名字（一个字符串而已）。<br>Tomcat通过Servlet类名字去查找内存中是否存在Servlet对象，如果存在，那么就不用再去创建，直接获取这个Servlet实例，调用它的service()方法完成请求！<br>如果这个Servlet不存在，那么Tomcat会通过反射来创建Servlet实例，并把Servlet实例存放到Servlet池中，再去调用Servlet的service方法处理请求。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210108131855138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><p>即Servlet的调用顺序，javax.servlet.Servlet接口中，有三个方法说明了Servlet的生命周期。 其背后的操作者当然是 服务器容器 TomCat</p><ol><li>public void init(ServletConfig servletConfig)   先初始化，但其只初始化一次，后续的刷新（访问），<strong>都不会再次初始化。因为其实个单例模式。</strong></li><li>public void service(ServletRequest servletRequest, ServletResponse servletResponse)  每次处理请求时调用service()方法；处理请求的服务，可以多次访问调用</li><li>void destroy()：当Tomcat要销毁Servlet实例时（就是关掉TomCat），先调用destroy()方法。</li><li>Servlet 最后由JVM的垃圾回收器进行垃圾回收</li></ol><h2 id="Servlet注意点"><a href="#Servlet注意点" class="headerlink" title="Servlet注意点"></a>Servlet注意点</h2><ol><li>Servlet对象的实例默认情况下是在浏览器第一次调用servlet时候被创建的</li><li><strong>Servlet的实例不由我们创建，Servlet的方法不由我们来调用，这一切都是由Tomcat来完成</strong>！！！这就是说由<strong>Tomcat来管理Servlet</strong>，而<strong>我们只需要去编写Servlet实现类，并将其部署到web.xml文件中去</strong>！</li><li>再次提醒，只有这三个方法是生命周期中的方法。也就是说，<strong>生命周期方法会被Tomcat在不同的时间点来调用！而其它方法就不会被调用了！！！</strong>如果你在自己写的Servlet中添加了其他方法，那么Tomcat也是不会去调用它们的！但你可以让生命周期方法去调用你自己写的方法就OK了！</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;Servlet概述与使用&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Servlet概述&quot;&gt;&lt;a href=&quot;#Servlet概述&quot; class=&quot;headerlink&quot; title=&quot;Servlet概述&quot;&gt;&lt;/a&gt;Servlet概述&lt;/h1&gt;&lt;h2 id
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IDEA部署TomCat搭建WEB项目</title>
    <link href="http://yoursite.com/2021/01/06/IDEA%E9%83%A8%E7%BD%B2TomCat%E6%90%AD%E5%BB%BAWEB%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2021/01/06/IDEA%E9%83%A8%E7%BD%B2TomCat%E6%90%AD%E5%BB%BAWEB%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-01-06T08:33:09.483Z</published>
    <updated>2021-01-06T08:33:16.732Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="TomCat搭建WEB项目">TOC</a></p><h2 id="TomCat-的作用"><a href="#TomCat-的作用" class="headerlink" title="TomCat 的作用"></a>TomCat 的作用</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106160120625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="TomCat-的配置"><a href="#TomCat-的配置" class="headerlink" title="TomCat 的配置"></a>TomCat 的配置</h2><p>官网下载TomCat 9.0 版本。 需要配置JAVA_HOME，环境变量；并配置path 如图<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106142805753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>而后打开 bin文件夹下的 start.up。  出现黑框，并且开始读一串下来就算成功了。打开环回地址：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>    看见TomCat的界面 表明这个服务器已经开启成功了。</p><h2 id="TomCat-构建JAVAWEB项目"><a href="#TomCat-构建JAVAWEB项目" class="headerlink" title="TomCat 构建JAVAWEB项目"></a>TomCat 构建JAVAWEB项目</h2><h3 id="WEB项目部署目录结构"><a href="#WEB项目部署目录结构" class="headerlink" title="WEB项目部署目录结构"></a>WEB项目部署目录结构</h3><p>TomCat文件夹下有一个 <strong>webapps</strong> 的文件目录用于存放JAVA项目。其下面，每个文件夹都是一个独立的项目（其默认有4个项目，都是自带的）其中的ROOT 是我们测试Tomcat时访问的Tomcat 主项目。</p><p>我们构建一个叫<strong>hello</strong>的<strong>WEB</strong>项目</p><ol><li>在<strong>webapps</strong> 下面 创建一个叫hello的文件夹</li><li>在<strong>hello</strong>文件夹下面 要包括 <strong>WEB-INF</strong>文件夹（必须得有，其实受保护目录，里面的东西用户不能直接访问，需要动态页面来访问。<strong>即用户不能通过浏览器地址的形式打开里面的东西</strong>），再创建一个 hello.html 的网页文件</li><li>在<strong>WEB-INF</strong>文件夹下，创建<strong>web.xml</strong>文件（把ROOT下面的web.xml内容复制过来，在删掉不要的留个大框），<strong>classes</strong>文件夹（存放项目所需的class文件）和<strong>lib</strong>文件夹（存放项目所需要的jar文件）</li></ol><p>之后重新启动Tomcat，访问对应的hello.html网页的 浏览器地址为：<a href="http://localhost:8080/hello/hello.html" target="_blank" rel="noopener">http://localhost:8080/hello/hello.html</a></p><h2 id="IDEA-创建一个JAVAWEB项目"><a href="#IDEA-创建一个JAVAWEB项目" class="headerlink" title="IDEA 创建一个JAVAWEB项目"></a>IDEA 创建一个JAVAWEB项目</h2><p>可以把上述的项目hello放到任何目录中，然后通过添加&lt; Context &gt;元素来指定项目的真实位置。在&lt; Host &gt;元素中添加&lt; Context &gt;元素，然后指定&lt; Context &gt;元素的path和docBase属性，其中path指定的为项目虚拟路径，可以随意的给出 例如path=“/h1”  而，docBase指定hello 项目真实存放的路径<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106151835748.png#pic_center" alt="在这里插入图片描述"><br>此时访问 对应的hello.html的 浏览器目的URL为 <a href="http://localhost:8080/h1/hello.html" target="_blank" rel="noopener">http://localhost:8080/h1/hello.html</a></p><p>IDEA创建 JAVAWEB项目（针对2020版本）</p><ol><li>首先先建立一个普通的JAVA项目</li><li>项目右击 ADD framework Support</li><li>勾选Web Application  选择创建web.xml</li><li>点击OK<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20210106153057691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="IDEA-的JAVAWEB部署到TomCat-中"><a href="#IDEA-的JAVAWEB部署到TomCat-中" class="headerlink" title="IDEA 的JAVAWEB部署到TomCat 中"></a>IDEA 的JAVAWEB部署到TomCat 中</h3></li><li>点击右上角 的 Add Configuration</li><li>选择添加 <strong>Tomcat server  local</strong></li><li>添加 本地的 Tomcat地址。 </li><li>deployment 下 <strong>Application context</strong> 取名随便。 例如取名为 <strong>/txjava_web</strong></li><li>在 idea 的 web目录下 创建一个 <strong>txjava_web.html</strong>的 网页文件</li><li>点击右上角启动服务器。  注意要关闭之前所有的tomcat黑框。一次只能有一个tomcat执行</li><li>可以通过访问<a href="http://localhost:8080/txjava_web/txjava_web.html" target="_blank" rel="noopener">http://localhost:8080/txjava_web/txjava_web.html</a>   来访问对应的网页文件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;TomCat搭建WEB项目&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;TomCat-的作用&quot;&gt;&lt;a href=&quot;#TomCat-的作用&quot; class=&quot;headerlink&quot; title=&quot;TomCat 的作用&quot;&gt;&lt;/a&gt;TomCat 的作用&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JDBC(1)</title>
    <link href="http://yoursite.com/2020/07/09/JDBC(1)/"/>
    <id>http://yoursite.com/2020/07/09/JDBC(1)/</id>
    <published>2020-07-09T06:35:19.074Z</published>
    <updated>2020-07-09T06:35:26.234Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="JDBC">TOC</a></p><h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><h2 id="JDBC是神马"><a href="#JDBC是神马" class="headerlink" title="JDBC是神马"></a>JDBC是神马</h2><p>JDBC（Java DataBase Connectivity）就是<strong>Java数据库连接</strong>，说白了就是用Java语言来操作数据库。原来操作数据库是在控制台使用SQL语句来操作数据库，而JDBC是用Java语言向数据库发送SQL语句。</p><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>遵循了JDBC规范的，可以访问自己数据库的API被称之为驱动。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200709105133961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2prczg4OTk1NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>JDBC是接口，而JDBC驱动才是接口的实现，没有驱动无法完成数据库连接！每个数据库厂商都有自己的驱动，用来连接自己公司的数据库。</p><h1 id="JDBC接口、类介绍"><a href="#JDBC接口、类介绍" class="headerlink" title="JDBC接口、类介绍"></a>JDBC接口、类介绍</h1><h2 id="JDBC中的主要类（接口）"><a href="#JDBC中的主要类（接口）" class="headerlink" title="JDBC中的主要类（接口）"></a>JDBC中的主要类（接口）</h2><p>在JDBC中常用的类有：</p><ul><li>DriverManager – 类，用来获取Connection；今后只需要会用DriverManager的getConnection()方法</li><li>Connection – 接口；</li></ul><blockquote><p>Connection最为重要的方法就是获取Statement：<br>Statement stmt = con.createStatement(); </p></blockquote><p>后面在学习ResultSet方法时，还要学习一下下面的方法：<br>Statement stmt = con.createStatement(int,int);</p><ul><li>Statement – 接口；</li></ul><blockquote><p>Statement最为重要的方法是：<br>int executeUpdate(String sql)：执行更新操作，即执行insert、update、delete语句，其实这个方法也可以执行create table、alter table，以及drop table等语句，但我们很少会使用JDBC来执行这些语句；<br>ResultSet executeQuery(String sql)：执行查询操作，执行查询操作会返回ResultSet，即结果集。</p></blockquote><ul><li>ResultSet – 接口  用于查询；可以通过next()方法使ResultSet的游标向下移动</li></ul><h2 id="如何写一个JDBC-连接数据库呢？"><a href="#如何写一个JDBC-连接数据库呢？" class="headerlink" title="如何写一个JDBC 连接数据库呢？"></a>如何写一个JDBC 连接数据库呢？</h2><p>具体的步骤出查询外有一些区别，大体上的过程如下所示：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200709143302435.png#pic_center" alt="在这里插入图片描述"></p><p>首先，访问的数据库与执行访问程序的一定不是一台电脑。所以连接一个服务器数据库需要的东西包括：（用java表达的话）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String username = <span class="string">"root"</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String password = <span class="string">"root"</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"jdbc:mysql://127.0.0.1:3306/jdbcdemo"</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String driver = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br></pre></td></tr></table></figure><p>而要访问一个数据表，并进行CRUD其实是使用JDBC+SQL语句的方式</p><h3 id="数据表添加记录"><a href="#数据表添加记录" class="headerlink" title="数据表添加记录"></a>数据表添加记录</h3><p>首先先定义一条添加记录的SQL语句如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = "<span class="keyword">insert</span> <span class="keyword">into</span> person(p_id,<span class="keyword">name</span>,addr,birth) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'志玲'</span>,<span class="string">'日本'</span>,<span class="string">'1998-7-1'</span>)<span class="string">";</span></span><br></pre></td></tr></table></figure><p>再设定初始外部的接口Connection与Statement为NULL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement statement = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>而后分别是 驱动加载、建立连接、获取执行SQL对象、执行SQL。但途中可能需要抛出SQL异常等进行捕获。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//驱动加载</span></span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//获得一个执行sql的对象</span></span><br><span class="line">statement = conn.createStatement();</span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line">statement.executeUpdate(sql);</span><br></pre></td></tr></table></figure><p>最后将原来访问的接口，关闭即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (statement != <span class="keyword">null</span>) </span><br><span class="line">statement.close();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>)</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>详细的具体代码可以看如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"insert into person(p_id,name,addr,birth) values(null,'志玲','日本','1998-7-1')"</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//驱动加载</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//获得一个执行sql的对象</span></span><br><span class="line">        statement = conn.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>)</span><br><span class="line">                statement.close();</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) </span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据表修改记录"><a href="#数据表修改记录" class="headerlink" title="数据表修改记录"></a>数据表修改记录</h3><p>与插入记录步骤相同，仅仅改变SQL语句即可。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"update person p set p.ADDR = '日本', p.BIRTH = '1977-12-31' where p.P_ID = 2"</span>;</span><br></pre></td></tr></table></figure><h3 id="数据表删除记录"><a href="#数据表删除记录" class="headerlink" title="数据表删除记录"></a>数据表删除记录</h3><p>与插入记录步骤相同，仅仅改变SQL语句即可。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"delete from person where p_id = 3"</span>;</span><br></pre></td></tr></table></figure><h3 id="数据表查询记录"><a href="#数据表查询记录" class="headerlink" title="数据表查询记录"></a>数据表查询记录</h3><p>访问服务器、驱动加载、建立连接、获取执行SQL对象步骤都一致，但由于查询需要获得列表数据，所以执行得返回果集。<strong>所以执行SQL使用的方法不同</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//驱动的加载</span></span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//获得一个执行SQL的对象</span></span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line">rs = stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><p>stmt.executeQuery(sql)得到的对象，是一组列表对象。可以通过next()方法使ResultSet的游标向下移动，当游标移动到你需要的行时，就需要来获取该行的数据了。next()方法在碰到有数据记录时会返回true，并会循环直到找不到数据记录而返回false为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="comment">//获得列数据 标明列数或者列名均可以 实际为方法的两种重载</span></span><br><span class="line"><span class="keyword">int</span> pId = rs.getInt(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//int pId = rs.getInt("p_id");</span></span><br><span class="line">String pname = rs.getString(<span class="number">2</span>);</span><br><span class="line">String addr = rs.getString(<span class="number">3</span>);</span><br><span class="line">Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不清楚获取的东西，类型是啥应该采用getObject的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如获取名称为columnName的列的Object数据；</span></span><br><span class="line"><span class="function">Object <span class="title">getObject</span><span class="params">(String columnName)</span></span>;</span><br></pre></td></tr></table></figure><p>最后再把访问的接口都关了就可以了。<br>总体查询栗子，举个栗子如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个sql</span></span><br><span class="line">    String sql = <span class="string">"select * from person where pname like '%娜%'"</span>;</span><br><span class="line"></span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//驱动的加载</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//获得一个执行SQL的对象</span></span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="comment">//获得列数据</span></span><br><span class="line">            <span class="keyword">int</span> pId = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            String pname = rs.getString(<span class="number">2</span>);</span><br><span class="line">            String addr = rs.getString(<span class="number">3</span>);</span><br><span class="line">            Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"pid:"</span>+pId+<span class="string">"     pname:"</span>+pname+<span class="string">"   addr:"</span>+addr+<span class="string">"    birth:"</span>+birth);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"执行完毕"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;JDBC&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;JDBC概述&quot;&gt;&lt;a href=&quot;#JDBC概述&quot; class=&quot;headerlink&quot; title=&quot;JDBC概述&quot;&gt;&lt;/a&gt;JDBC概述&lt;/h1&gt;&lt;h2 id=&quot;JDBC是神马&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
